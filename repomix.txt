This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursor/rules/hydrogen-react-router.mdc
.github/workflows/oxygen-deployment-1000037769.yml
.gitignore
.graphqlrc.ts
app/assets/favicon.svg
app/components/AddToCartButton.tsx
app/components/Aside.tsx
app/components/CartLineItem.tsx
app/components/CartMain.tsx
app/components/CartSummary.tsx
app/components/Footer.tsx
app/components/GradientText.tsx
app/components/Header.tsx
app/components/KprButton.tsx
app/components/KprHeader.tsx
app/components/MatrixNavLink.tsx
app/components/MobileMenu.tsx
app/components/PageLayout.tsx
app/components/PaginatedResourceSection.tsx
app/components/ProductForm.tsx
app/components/ProductImage.tsx
app/components/ProductItem.tsx
app/components/ProductPrice.tsx
app/components/SearchForm.tsx
app/components/SearchFormPredictive.tsx
app/components/SearchResults.tsx
app/components/SearchResultsPredictive.tsx
app/components/sections/Hero.tsx
app/components/sections/Intro.tsx
app/components/sections/TraditionalConcept.tsx
app/components/sections/TraditionalVideo.tsx
app/constants/index.js
app/entry.client.tsx
app/entry.server.tsx
app/graphql/customer-account/CustomerAddressMutations.ts
app/graphql/customer-account/CustomerDetailsQuery.ts
app/graphql/customer-account/CustomerOrderQuery.ts
app/graphql/customer-account/CustomerOrdersQuery.ts
app/graphql/customer-account/CustomerUpdateMutation.ts
app/lib/context.ts
app/lib/fragments.ts
app/lib/i18n.ts
app/lib/redirect.ts
app/lib/search.ts
app/lib/session.ts
app/lib/variants.ts
app/root.tsx
app/routes.ts
app/routes/_index.tsx
app/routes/($locale)._index.tsx
app/routes/($locale).[sitemap.xml].tsx
app/routes/($locale).$.tsx
app/routes/($locale).account_.authorize.tsx
app/routes/($locale).account_.login.tsx
app/routes/($locale).account_.logout.tsx
app/routes/($locale).account._index.tsx
app/routes/($locale).account.$.tsx
app/routes/($locale).account.addresses.tsx
app/routes/($locale).account.orders._index.tsx
app/routes/($locale).account.orders.$id.tsx
app/routes/($locale).account.profile.tsx
app/routes/($locale).account.tsx
app/routes/($locale).api.$version.[graphql.json].tsx
app/routes/($locale).blogs._index.tsx
app/routes/($locale).blogs.$blogHandle._index.tsx
app/routes/($locale).blogs.$blogHandle.$articleHandle.tsx
app/routes/($locale).cart.$lines.tsx
app/routes/($locale).cart.tsx
app/routes/($locale).collections._index.tsx
app/routes/($locale).collections.$handle.tsx
app/routes/($locale).collections.all.tsx
app/routes/($locale).discount.$code.tsx
app/routes/($locale).pages.$handle.tsx
app/routes/($locale).policies._index.tsx
app/routes/($locale).policies.$handle.tsx
app/routes/($locale).products.$handle.tsx
app/routes/($locale).search.tsx
app/routes/($locale).sitemap.$type.$page[.xml].tsx
app/routes/($locale).tsx
app/routes/[robots.txt].tsx
app/routes/[sitemap.xml].tsx
app/routes/$.tsx
app/routes/account_.authorize.tsx
app/routes/account_.login.tsx
app/routes/account_.logout.tsx
app/routes/account._index.tsx
app/routes/account.$.tsx
app/routes/account.addresses.tsx
app/routes/account.orders._index.tsx
app/routes/account.orders.$id.tsx
app/routes/account.profile.tsx
app/routes/account.tsx
app/routes/api.$version.[graphql.json].tsx
app/routes/blogs._index.tsx
app/routes/blogs.$blogHandle._index.tsx
app/routes/blogs.$blogHandle.$articleHandle.tsx
app/routes/cart.$lines.tsx
app/routes/cart.tsx
app/routes/collections._index.tsx
app/routes/collections.$handle.tsx
app/routes/collections.all.tsx
app/routes/discount.$code.tsx
app/routes/pages.$handle.tsx
app/routes/policies._index.tsx
app/routes/policies.$handle.tsx
app/routes/products.$handle.tsx
app/routes/search.tsx
app/routes/sitemap.$type.$page[.xml].tsx
app/styles/app.css
app/styles/fonts.css
app/styles/reset.css
app/styles/tailwind.css
Ascent Section/Header/header-drawer.liquid
Ascent Section/Header/header-menu.liquid
Ascent Section/Header/header.liquid
Ascent Section/Header/sticky-header.js
CHANGELOG.md
customer-accountapi.generated.d.ts
docs/GradientText-QuickGuide.md
docs/KprButton-QuickGuide.md
env.d.ts
eslint.config.js
guides/predictiveSearch/predictiveSearch.md
guides/search/search.md
memory-bank/activeContext.md
memory-bank/productContext.md
memory-bank/progress.md
memory-bank/projectbrief.md
memory-bank/README.md
memory-bank/systemPatterns.md
memory-bank/techContext.md
package.json
public/images/big-hero-text.svg
public/images/hero-text.svg
public/images/kpr-logo-icon.svg
public/images/kpr-logo-text.svg
public/images/kpr-logo.svg
public/images/mask.svg
public/images/menu.svg
public/images/nav-logo.svg
public/images/play.svg
public/images/ps-logo.svg
public/images/x-logo.svg
react-router.config.ts
README.md
server.ts
storefrontapi.generated.d.ts
tailwind.config.js
tsconfig.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="memory-bank/activeContext.md">
# Active Context - Kyperus Storefront

## Current Work Focus
**Hiện tại:** Khởi tạo Memory Bank và documentation system  
**Ngày cập nhật:** 2025-01-26  
**Sprint/Phase:** Setup & Documentation  

## Recent Changes
### Latest Modifications
1. **app/constants/index.js** - Modified (unstaged)
   - Responsive mask settings cho Hero animation
   - Mobile, tablet, desktop breakpoints
   - Vietnamese comments added

### Recent Development Activity
- Hero component với GSAP scroll-triggered animations
- Mask effect implementation với responsive settings
- Component structure established
- TypeScript migration ongoing

## Active Decisions & Considerations
### 1. Import Strategy
**Decision:** Sử dụng React Router imports, KHÔNG dùng Remix
```typescript
// ALWAYS use this pattern
import { useLoaderData, Link } from 'react-router';
// NEVER use @remix-run/react or react-router-dom
```

### 2. Animation Performance
**Current approach:** GSAP với ScrollTrigger
- Mask animations cho Hero section
- Responsive breakpoints trong constants
- GPU acceleration cho smooth 60fps

### 3. File Organization
**Pattern được áp dụng:**
- Components trong `/app/components/`
- Sections trong `/app/components/sections/`
- Constants trong `/app/constants/`
- Routes theo React Router file-based routing

## Next Steps (Priority Order)
### Immediate (This Week)
1. **Migrate constants file to TypeScript**
   - Rename `index.js` to `index.ts`
   - Add proper TypeScript types
   - Update import statements

2. **Complete Hero section animation**
   - Test mask effect on all devices
   - Optimize performance
   - Add fallbacks cho older browsers

3. **Fix any TypeScript errors**
   - Review current type coverage
   - Add missing type definitions
   - Ensure strict mode compliance

### Short Term (Next 2 Weeks)
1. **Component library expansion**
   - Enhance ProductForm components
   - Improve Cart functionality
   - Add Search components

2. **Performance optimization**
   - Bundle size analysis
   - Image optimization
   - Code splitting improvements

3. **Animation system completion**
   - Additional GSAP animations
   - Scroll-based interactions
   - Mobile animation optimization

### Medium Term (Next Month)
1. **E-commerce functionality**
   - Complete checkout flow
   - Customer account features
   - Order management

2. **Testing implementation**
   - Unit tests với Jest
   - E2E tests với Playwright
   - Performance testing

3. **SEO & Accessibility**
   - Meta tags optimization
   - WCAG compliance
   - Structured data implementation

## Current Challenges
### Technical Challenges
1. **GSAP Performance on Mobile**
   - Heavy animations có thể cause jank
   - Need optimization cho lower-end devices
   - Battery usage considerations

2. **TypeScript Migration**
   - Some files still in JavaScript
   - Type definitions cần improvement
   - Strict mode compliance

3. **Bundle Size Management**
   - GSAP thêm significant size
   - Need tree shaking optimization
   - Route splitting strategy

### Design Challenges
1. **Cultural Theme Integration**
   - Balance traditional elements với modern UX
   - Color scheme consistency
   - Typography hierarchy

2. **Mobile-first Responsive Design**
   - Complex animations on small screens
   - Touch interaction optimization
   - Performance vs visual appeal

## Decisions Pending
### 1. Animation Library Strategy
**Options:**
- Continue với GSAP (current)
- Migrate to Framer Motion
- Hybrid approach

**Factors:** Performance, bundle size, ease of use

### 2. State Management
**Current:** React Router loaders + component state
**Consideration:** Need for global state management?

### 3. Testing Strategy
**Pending:** Choose between Jest vs Vitest
**Consideration:** Vite ecosystem compatibility

## Blocked Items
### Current Blockers
1. **Environment Setup Issues**
   - Shopify store configuration needed
   - API keys and tokens setup
   - Domain configuration cho Customer Account API

2. **Design Assets**
   - Some images/logos chưa optimized
   - Icon system chưa complete
   - Font loading optimization needed

## Key Stakeholder Notes
### User Feedback
- Performance is critical
- Mobile experience must be excellent
- Cultural theme should be prominent but not overwhelming

### Technical Requirements
- Must use React Router (not Remix)
- Shopify Hydrogen compliance
- 60fps animation target
- < 3s loading time requirement

## Tools & Resources Currently Used
- **Development:** Cursor IDE với Memory Bank system
- **Version Control:** Git
- **Package Management:** npm
- **Testing:** TBD (Jest or Vitest)
- **Deployment:** Shopify Oxygen
- **Monitoring:** TBD (Shopify Analytics + custom)

## Important Notes
- Memory Bank được initialize để track project progress
- All documentation phải được update when major changes occur
- React Router migration hoàn thành, chỉ sử dụng React Router imports
- Vietnamese language preference cho comments và documentation
</file>

<file path="memory-bank/productContext.md">
# Product Context - Kyperus Storefront

## Tại sao Dự án này Tồn tại
Kyperus Storefront được tạo ra để cung cấp một trải nghiệm mua sắm trực tuyến độc đáo, kết hợp giữa công nghệ hiện đại và văn hóa truyền thống Việt Nam. Đây là một Shopify Hydrogen storefront được thiết kế để mang lại hiệu suất cao và trải nghiệm người dùng xuất sắc.

## Vấn đề Được Giải quyết
### 1. Hiệu suất Website Thấp
- **Vấn đề:** Các e-commerce site truyền thống thường chậm và không tối ưu
- **Giải pháp:** Sử dụng Hydrogen với React Router để có hiệu suất cao và server-side rendering

### 2. Thiếu Bản sắc Văn hóa
- **Vấn đề:** Các website thương mại điện tử thiếu yếu tố văn hóa địa phương
- **Giải pháp:** Tích hợp chủ đề Kyperus với các yếu tố truyền thống trong design

### 3. Trải nghiệm Người dùng Tĩnh
- **Vấn đề:** Giao diện web thương mại điện tử thường nhàm chán và thiếu tương tác
- **Giải pháp:** Sử dụng GSAP để tạo animations mượt mà và engaging

## Cách Hệ thống Hoạt động
### Architecture Overview
```mermaid
graph TD
    A[User Browser] --> B[React Router App]
    B --> C[Shopify Hydrogen]
    C --> D[Shopify Storefront API]
    C --> E[Shopify Customer Account API]
    B --> F[GSAP Animations]
    B --> G[Tailwind CSS]
```

### User Journey
1. **Landing Page:** Hero section với animated mask effect
2. **Product Discovery:** Browse collections và search functionality
3. **Product Detail:** Rich media presentation với animations
4. **Shopping Cart:** Smooth add-to-cart và checkout experience
5. **Account Management:** Customer authentication và order history

## Mục tiêu Trải nghiệm Người dùng
### Performance Goals
- **First Contentful Paint:** < 1.5s
- **Largest Contentful Paint:** < 2.5s
- **Cumulative Layout Shift:** < 0.1
- **Time to Interactive:** < 3s

### User Experience Goals
- **Intuitive Navigation:** Dễ dàng tìm kiếm và khám phá sản phẩm
- **Visual Appeal:** Giao diện đẹp mắt với văn hóa truyền thống
- **Smooth Interactions:** Animations không gây lag hoặc janky
- **Mobile Excellence:** Trải nghiệm tuyệt vời trên mobile devices

## Target Audience
### Primary Users
- **Khách hàng quan tâm đến văn hóa truyền thống**
- **Người mua sắm trực tuyến yêu thích trải nghiệm cao cấp**
- **Mobile users (70%+ traffic)**

### User Expectations
- Fast loading times
- Beautiful visual design
- Easy checkout process
- Reliable search functionality
- Responsive customer support

## Competitive Advantages
1. **Cultural Integration:** Độc đáo với chủ đề văn hóa Việt Nam
2. **Performance Excellence:** Hydrogen stack cho tốc độ cao
3. **Animation Quality:** GSAP cho trải nghiệm visual tuyệt vời
4. **Modern Stack:** Latest React Router và Shopify APIs
5. **Mobile Optimization:** Mobile-first approach
</file>

<file path="memory-bank/progress.md">
# Progress Tracking - Kyperus Storefront

## Current Status: 🟡 Development Phase
**Overall Completion:** ~35%  
**Last Updated:** 2025-01-26  
**Version:** 2025.5.1  

## ✅ What Works (Completed Features)
### Core Infrastructure ✅
- [x] **Project Setup**
  - Shopify Hydrogen foundation
  - React Router v7 configuration
  - TypeScript setup
  - Vite build system
  - ESLint và Prettier configuration

- [x] **Shopify Integration**
  - Storefront API connection
  - Customer Account API setup
  - GraphQL codegen working
  - Basic product queries

- [x] **Styling System**
  - Tailwind CSS v4 integration
  - Font loading (Oxanium, Source Sans 3)
  - CSS reset và base styles
  - Responsive utilities

### Components Library ✅
- [x] **Layout Components**
  - Header with navigation
  - Footer structure
  - PageLayout wrapper
  - Aside component for mobile menu

- [x] **Product Components**
  - ProductItem display
  - ProductImage component
  - ProductPrice formatting
  - Basic ProductForm structure

- [x] **Cart Components**
  - CartMain implementation
  - CartLineItem component
  - CartSummary calculations
  - AddToCartButton functionality

- [x] **Search Components**
  - SearchForm basic implementation
  - SearchFormPredictive
  - SearchResults display
  - SearchResultsPredictive

### Animation System ✅
- [x] **GSAP Foundation**
  - GSAP core library integration
  - ScrollTrigger plugin setup
  - useGSAP hook implementation
  - Basic timeline management

- [x] **Hero Animation**
  - Mask effect animation working
  - Responsive animation settings
  - Scroll-triggered timeline
  - Mobile/tablet/desktop breakpoints

### Routing System ✅
- [x] **Core Routes**
  - Homepage (_index.tsx)
  - Product detail pages
  - Collection pages
  - Cart functionality
  - Account pages structure

- [x] **Locale Support**
  - Basic locale routing setup
  - Route parameter handling
  - Sitemap generation

## 🔄 In Progress (Current Work)
### Animation Enhancements 🔄
- [ ] **Hero Section Polish**
  - Fine-tune mask animation timing
  - Optimize mobile performance
  - Add animation fallbacks
  - Improve Intro section integration

### TypeScript Migration 🔄
- [ ] **Constants Migration**
  - Migrate `app/constants/index.js` to TypeScript
  - Add proper type definitions
  - Update import statements

- [ ] **Type Coverage**
  - Add missing component prop types
  - Fix remaining `any` types
  - Ensure strict mode compliance

## 🟠 Partially Complete (Needs Work)
### E-commerce Features 🟠
- [ ] **Product Pages** (70% complete)
  - ✅ Basic product display
  - ✅ Variant selection
  - ⚠️ Product form needs enhancement
  - ❌ Image gallery missing
  - ❌ Product recommendations incomplete

- [ ] **Cart Experience** (60% complete)
  - ✅ Add to cart functionality
  - ✅ Cart line items
  - ⚠️ Cart drawer needs styling
  - ❌ Cart animations missing
  - ❌ Quantity updates need improvement

- [ ] **Search Functionality** (50% complete)
  - ✅ Basic search working
  - ✅ Predictive search structure
  - ⚠️ Search results styling needed
  - ❌ Advanced filtering missing
  - ❌ Search analytics missing

### User Experience 🟠
- [ ] **Mobile Optimization** (60% complete)
  - ✅ Responsive layouts
  - ✅ Mobile navigation
  - ⚠️ Touch interactions need work
  - ❌ Mobile animations optimization
  - ❌ Progressive Web App features

- [ ] **Performance** (65% complete)
  - ✅ Basic optimization
  - ✅ Image optimization setup
  - ⚠️ Bundle size needs improvement
  - ❌ Code splitting incomplete
  - ❌ Performance monitoring missing

## ❌ Not Started (Planned Features)
### Content Management ❌
- [ ] **Blog System**
  - Blog listing pages
  - Article detail pages
  - Related content
  - SEO optimization

- [ ] **Page Management**
  - Static pages
  - Legal pages (policies)
  - Custom page layouts
  - Content optimization

### Advanced Features ❌
- [ ] **Customer Account**
  - Account dashboard
  - Order history
  - Address management
  - Profile editing

- [ ] **Checkout Enhancement**
  - Multi-step checkout
  - Guest checkout
  - Payment integration
  - Order confirmation

### Cultural Theme ❌
- [ ] **Traditional Elements**
  - Cultural design patterns
  - Traditional color schemes
  - Vietnamese typography
  - Cultural storytelling sections

- [ ] **Video Integration**
  - Traditional video sections
  - Smooth video transitions
  - Performance optimization
  - Mobile video handling

## 🔧 Technical Debt & Issues
### High Priority 🔴
1. **Constants File Migration**
   - Currently in JavaScript, needs TypeScript
   - Missing type definitions
   - File in git changes (unstaged)

2. **Animation Performance**
   - GSAP animations might cause mobile lag
   - Need GPU acceleration optimization
   - Memory leaks trong animation cleanup

3. **Import Consistency**
   - Ensure all React Router imports are correct
   - Remove any remaining Remix imports
   - Standardize import order

### Medium Priority 🟡
1. **Component Organization**
   - Some components need refactoring
   - Prop drilling in some areas
   - State management could be improved

2. **Bundle Optimization**
   - GSAP adds significant bundle size
   - Need better tree shaking
   - Route splitting strategy needed

3. **Error Handling**
   - Need comprehensive error boundaries
   - GraphQL error handling
   - User-friendly error messages

### Low Priority 🟢
1. **Documentation**
   - Component documentation
   - API documentation
   - Development guides

2. **Testing Infrastructure**
   - Unit testing setup
   - E2E testing framework
   - Performance testing

## 🎯 Next Milestones
### Week 1 Goals
- [ ] Complete constants file TypeScript migration
- [ ] Polish Hero section animations
- [ ] Fix any remaining TypeScript errors
- [ ] Optimize mobile animation performance

### Week 2-3 Goals
- [ ] Complete product page enhancements
- [ ] Implement cart drawer animations
- [ ] Add image gallery to product pages
- [ ] Improve search results styling

### Month 1 Goals
- [ ] Complete customer account functionality
- [ ] Implement blog system
- [ ] Add cultural theme elements
- [ ] Performance optimization pass

## 🧪 Testing Status
### Automated Testing ❌
- [ ] Unit tests: Not implemented
- [ ] Integration tests: Not implemented
- [ ] E2E tests: Not implemented
- [ ] Performance tests: Not implemented

### Manual Testing ✅
- [x] Basic functionality testing
- [x] Cross-browser testing (partial)
- [x] Mobile responsiveness testing
- [x] Animation performance testing

## 📊 Performance Metrics
### Current Performance (Development)
- **Bundle Size:** ~2.1MB (not optimized)
- **Initial Load:** ~4-5s (development mode)
- **Animation FPS:** 45-60fps (varies by device)
- **Lighthouse Score:** Not measured yet

### Target Performance
- **Bundle Size:** < 300KB gzipped
- **Initial Load:** < 3s
- **Animation FPS:** Consistent 60fps
- **Lighthouse Score:** > 90 for all metrics

## 🚀 Deployment Status
### Development Environment ✅
- [x] Local development working
- [x] Hot module replacement
- [x] TypeScript compilation
- [x] ESLint integration

### Production Deployment ❌
- [ ] Shopify Oxygen deployment
- [ ] Environment variables setup
- [ ] Performance optimization
- [ ] Error monitoring
- [ ] Analytics integration

## 📝 Known Issues
1. **Constants file** currently in JavaScript needs TypeScript migration
2. **GSAP animations** may need performance optimization on mobile
3. **Some TypeScript types** are incomplete or using `any`
4. **Bundle size** is larger than target due to GSAP
5. **Mobile touch interactions** need refinement
6. **Search functionality** needs styling improvements
7. **Cart animations** are missing
8. **Error boundaries** not implemented

## 💡 Future Enhancements
- Progressive Web App capabilities
- Offline functionality
- Advanced analytics integration
- A/B testing framework
- Multi-language support
- Advanced personalization
- AI-powered product recommendations
</file>

<file path="memory-bank/projectbrief.md">
# Project Brief - Kyperus Storefront

## Dự án Tổng quan
**Tên dự án:** Kyperus Storefront  
**Phiên bản:** 2025.5.1  
**Loại:** Shopify Hydrogen E-commerce Storefront  
**Chủ đề:** Văn hóa truyền thống Việt Nam với thiết kế hiện đại  

## Mục tiêu Cốt lõi
1. **Trải nghiệm mua sắm trực tuyến cao cấp** với giao diện hiện đại
2. **Tích hợp văn hóa truyền thống** vào thiết kế UI/UX
3. **Hiệu suất tối ưu** sử dụng Shopify Hydrogen stack
4. **Hoạt ảnh mượt mà** với GSAP và scroll-triggered animations
5. **Responsive design** hoàn toàn trên mọi thiết bị

## Yêu cầu Chức năng
### E-commerce Core
- Hiển thị sản phẩm và bộ sưu tập
- Giỏ hàng và checkout process
- Tìm kiếm sản phẩm (predictive search)
- Quản lý tài khoản khách hàng
- Blog và nội dung tĩnh

### Trải nghiệm Người dùng
- Hero section với animated mask effect
- Smooth scrolling với Lenis
- GSAP animations cho micro-interactions
- Mobile-first responsive design
- Loading states và suspense handling

## Ràng buộc Kỹ thuật
- **Framework:** React Router v7 (NOT Remix)
- **Platform:** Shopify Hydrogen
- **Deployment:** Shopify Oxygen
- **Styling:** Tailwind CSS v4
- **Animations:** GSAP với ScrollTrigger
- **Language:** TypeScript
- **Node version:** >= 18.0.0

## Thành công Định nghĩa
- Page load speed < 3 giây
- Mobile responsiveness 100%
- Accessibility compliance (WCAG)
- SEO optimization hoàn chỉnh
- Conversion rate optimization
- Smooth animation performance (60fps)

## Phạm vi Dự án
### Trong phạm vi
- Shopify storefront development
- Custom component library
- Animation system implementation
- E-commerce functionality
- Cultural theme integration

### Ngoài phạm vi
- Shopify admin customization
- Third-party integrations beyond Shopify
- Custom payment providers
- Multi-language support (hiện tại chỉ Vietnamese)
</file>

<file path="memory-bank/README.md">
# Memory Bank - Kyperus Storefront

## Tổng quan
Memory Bank là hệ thống documentation toàn diện cho dự án Kyperus Storefront, được thiết kế để đảm bảo tính liên tục và hiệu quả trong quá trình development khi memory được reset giữa các sessions.

## Cấu trúc Memory Bank

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]
```

## Files Core (Bắt buộc)

### 1. `projectbrief.md`
- **Mục đích:** Foundation document định nghĩa core requirements và goals
- **Nội dung:** Project overview, mục tiêu cốt lõi, yêu cầu chức năng, ràng buộc kỹ thuật
- **Update frequency:** Khi có thay đổi fundamental trong project scope

### 2. `productContext.md`
- **Mục đích:** Giải thích tại sao project tồn tại và problems được giải quyết
- **Nội dung:** User journey, target audience, competitive advantages
- **Update frequency:** Khi có insights mới về user needs hoặc market position

### 3. `systemPatterns.md`
- **Mục đích:** System architecture và key technical decisions
- **Nội dung:** Component patterns, data flow, animation system, code organization
- **Update frequency:** Khi implement new patterns hoặc architectural changes

### 4. `techContext.md`
- **Mục đích:** Technologies used, development setup, technical constraints
- **Nội dung:** Stack details, environment setup, performance constraints, known technical debt
- **Update frequency:** Khi upgrade dependencies hoặc change development setup

### 5. `activeContext.md`
- **Mục đích:** Current work focus, recent changes, next steps
- **Nội dung:** Latest modifications, active decisions, pending items, current challenges
- **Update frequency:** Thường xuyên nhất - sau mỗi major change hoặc khi start new work

### 6. `progress.md`
- **Mục đích:** Track what works, what's left to build, current status
- **Nội dung:** Completed features, in-progress work, technical debt, known issues
- **Update frequency:** Weekly hoặc khi complete major features

## Cách Sử dụng Memory Bank

### Khi Bắt đầu Session Mới
1. **Đọc ALL memory bank files** để hiểu full context
2. **Check activeContext.md** để biết current focus
3. **Review progress.md** để hiểu current status
4. **Plan next actions** dựa trên documented next steps

### Khi Update Memory Bank
1. **Document major changes** ngay sau khi implement
2. **Update activeContext.md** with new focus areas
3. **Update progress.md** với completed work
4. **Update technical files** nếu có architectural changes

### Workflow Patterns

#### Plan Mode
```mermaid
flowchart TD
    Start[Start Session] --> ReadAll[Read All Memory Bank Files]
    ReadAll --> Assess[Assess Current State]
    Assess --> Plan[Create Action Plan]
    Plan --> Document[Document Plan in activeContext.md]
```

#### Execute Mode
```mermaid
flowchart TD
    Start[Start Work] --> Check[Check activeContext.md]
    Check --> Execute[Execute Planned Work]
    Execute --> Update[Update progress.md]
    Update --> DocChanges[Document Changes]
```

## Update Triggers

### Automatic Updates (Phải làm)
- **Sau mỗi major feature completion**
- **Khi có architectural changes**
- **When user requests "update memory bank"**
- **Khi discover new patterns hoặc best practices**

### Manual Updates (Nên làm)
- **Weekly progress reviews**
- **Before major refactoring**
- **After debugging complex issues**
- **When stakeholder requirements change**

## Quality Guidelines

### Documentation Quality
- **Specific và actionable** thay vì vague descriptions
- **Include code examples** cho technical patterns
- **Vietnamese language preference** cho comments và documentation
- **Update dates** và version numbers cho tracking

### Context Preservation
- **Why decisions were made** không chỉ là what was implemented
- **Trade-offs và alternatives considered**
- **Known limitations và future improvements**
- **Dependencies giữa components và systems**

## Memory Bank Maintenance

### Weekly Review Checklist
- [ ] Update `activeContext.md` với current focus
- [ ] Review và update `progress.md` với completed work
- [ ] Check for any outdated information
- [ ] Document any new patterns discovered

### Monthly Review Checklist
- [ ] Review all files cho accuracy
- [ ] Update technical constraints nếu có changes
- [ ] Assess if project brief needs updates
- [ ] Plan documentation improvements

## Integration với Development Workflow

### Git Integration
- Memory bank files được tracked trong git
- Commit changes cùng với code changes
- Use meaningful commit messages cho documentation updates

### IDE Integration
- Memory bank được reference trong .cursorrules
- Cursor AI sẽ read these files để understand project context
- Consistent với Cursor's Memory Bank patterns

## Best Practices

### Do's ✅
- Read ALL files khi start new session
- Update documentation immediately after major changes
- Use Vietnamese cho internal documentation
- Include specific examples và code snippets
- Track decisions và their reasoning

### Don'ts ❌
- Don't let documentation lag behind code
- Don't document implementation details that change frequently
- Don't use vague descriptions without actionable information
- Don't skip updating activeContext.md after major work

## Troubleshooting

### Common Issues
1. **Outdated Information**
   - Solution: Regular review cycles và immediate updates

2. **Missing Context**
   - Solution: Document not just what but why

3. **Inconsistent Updates**
   - Solution: Make documentation part of definition of done

### Recovery Procedures
Nếu memory bank becomes outdated:
1. Start với project brief validation
2. Update technical context với current state
3. Rebuild progress tracking từ git history
4. Update active context với current reality

## Future Improvements
- Automated documentation generation từ code
- Integration với project management tools
- Performance metrics tracking
- Automated outdated content detection

---

**Note:** Memory Bank này được design để work với Cursor AI's memory reset pattern. Maintaining accuracy và completeness là critical cho productivity.
</file>

<file path="memory-bank/systemPatterns.md">
# System Patterns - Kyperus Storefront

## Architecture Overview
Kyperus Storefront được xây dựng trên Shopify Hydrogen framework với React Router, tuân theo các pattern hiện đại để đảm bảo maintainability và performance.

## Core Technology Stack
### Frontend Framework
- **React Router v7.6.0** (NOT Remix) - Routing và SSR
- **React 18** - UI library với Suspense và concurrent features
- **TypeScript** - Type safety và developer experience

### Shopify Integration
- **@shopify/hydrogen 2025.5.0** - Shopify-specific components và utilities
- **Shopify Storefront API** - Product data và e-commerce functionality
- **Shopify Customer Account API** - Authentication và customer management

### Styling & Animation
- **Tailwind CSS v4.1.10** - Utility-first CSS framework
- **GSAP 3.13.0** - High-performance animations
- **Lenis 1.3.4** - Smooth scrolling library

## Directory Structure Pattern
```
app/
├── components/           # Reusable UI components
│   ├── sections/        # Page sections (Hero, Intro, etc.)
│   └── *.tsx           # Core components (Header, Footer, etc.)
├── constants/          # Configuration và constants
├── graphql/           # GraphQL queries organization
├── lib/              # Utility functions và helpers
├── routes/           # React Router routes
├── sections/         # Additional sections
└── styles/          # CSS files
```

## Component Architecture Patterns
### 1. Compound Components
```typescript
// Example: ProductForm với variants
<ProductForm>
  <ProductForm.VariantSelector />
  <ProductForm.AddToCart />
  <ProductForm.Price />
</ProductForm>
```

### 2. Hook-based Logic
```typescript
// Custom hooks cho reusable logic
export const useMaskSettings = () => {
  const isMobile = useMediaQuery({ maxWidth: 768 });
  // Logic cho responsive mask animations
}
```

### 3. Render Props Pattern
```typescript
// Async data loading với Suspense
<Suspense fallback={<Loading />}>
  <Await resolve={products}>
    {(data) => <ProductGrid products={data} />}
  </Await>
</Suspense>
```

## Data Flow Patterns
### 1. Loader-based Data Fetching
```typescript
export async function loader(args: LoaderFunctionArgs) {
  const criticalData = await loadCriticalData(args);
  const deferredData = loadDeferredData(args);
  return {...criticalData, ...deferredData};
}
```

### 2. GraphQL Query Organization
- Fragments cho reusable data shapes
- Query co-location với components
- Type generation từ GraphQL schema

### 3. Error Handling
- Try-catch blocks cho deferred data
- Graceful degradation khi APIs fail
- User-friendly error messages

## Animation System Patterns
### 1. GSAP Timeline Management
```typescript
useGSAP(() => {
  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: '.hero-section',
      start: 'top top',
      end: '+=200%',
      scrub: 2.5,
      pin: true,
    }
  });
  // Animation sequence
});
```

### 2. Responsive Animation Configuration
```typescript
const { initialMaskPos, initialMaskSize, maskPos, maskSize } = useMaskSettings();
// Different animation params dựa trên screen size
```

### 3. Performance Optimization
- `will-change` CSS properties
- Animation cleanup on unmount
- GPU acceleration cho smooth performance

## State Management Patterns
### 1. React Router Loader State
- Server-side data loading
- Automatic revalidation
- Loading states với Suspense

### 2. Component-level State
- useState cho local UI state
- useEffect cho side effects
- Custom hooks cho shared logic

### 3. Context Pattern (when needed)
- Minimal global state
- Provider pattern cho shared data
- Performance optimization với useMemo

## Code Organization Principles
### 1. Single Responsibility
- Mỗi component có một mục đích rõ ràng
- Utility functions được tách riêng
- Separation of concerns

### 2. Composition over Inheritance
- Component composition pattern
- Higher-order components khi cần thiết
- Render props cho flexibility

### 3. Import Organization
```typescript
// External libraries
import gsap from 'gsap';
import { useGSAP } from '@gsap/react';

// Internal utilities
import { useMaskSettings } from '../../constants';

// Components
import Intro from './Intro';
```

## Performance Patterns
### 1. Code Splitting
- Route-based splitting với React Router
- Dynamic imports cho heavy components
- Lazy loading cho non-critical resources

### 2. Image Optimization
- Shopify's Image component
- Responsive images với srcset
- WebP format optimization

### 3. Bundle Optimization
- Tree shaking được enable
- Minimal dependencies
- Vite cho fast build times

## Testing Patterns (Future Implementation)
### 1. Component Testing
- Jest + React Testing Library
- Snapshot testing cho UI regression
- Integration tests cho user flows

### 2. E2E Testing
- Playwright cho browser testing
- Critical user journey coverage
- Performance testing

## Security Patterns
### 1. Environment Variables
- Sensitive data trong .env files
- Shopify API keys security
- Client vs server environment separation

### 2. Input Validation
- GraphQL query validation
- Form input sanitization
- XSS protection
</file>

<file path="memory-bank/techContext.md">
# Technical Context - Kyperus Storefront

## Technology Stack
### Core Technologies
- **Framework:** React Router v7.6.0 (Migration từ Remix)
- **Runtime:** Node.js >= 18.0.0
- **Package Manager:** npm
- **Build Tool:** Vite 6.2.4
- **Language:** TypeScript 5.2.2

### Shopify Integration
- **Platform:** Shopify Hydrogen 2025.5.0
- **Deployment:** Shopify Oxygen
- **APIs:** 
  - Storefront API (GraphQL)
  - Customer Account API (GraphQL)
- **CLI:** Shopify CLI ~3.80.4

### Frontend Dependencies
```json
{
  "react": "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router": "7.6.0",
  "react-router-dom": "7.6.0",
  "@shopify/hydrogen": "2025.5.0",
  "graphql": "^16.10.0",
  "tailwindcss": "^4.1.10",
  "gsap": "^3.13.0",
  "lenis": "^1.3.4"
}
```

### Development Tools
- **Linting:** ESLint 9.18.0 với TypeScript rules
- **Formatting:** Prettier với Shopify config
- **Type Generation:** GraphQL Code Generator
- **Dev Server:** Vite với HMR

## Development Environment Setup
### Prerequisites
```bash
# Node.js version check
node --version  # Should be >= 18.0.0

# Shopify CLI installation
npm install -g @shopify/cli
```

### Local Development
```bash
# Install dependencies
npm install

# Start development server với GraphQL codegen
npm run dev

# Build for production
npm run build

# Run linting
npm run lint

# Type checking
npm run typecheck
```

### Environment Configuration
```bash
# Required environment variables
SHOPIFY_STORE_DOMAIN=your-store.myshopify.com
SHOPIFY_STOREFRONT_ACCESS_TOKEN=your-token
SHOPIFY_CUSTOMER_ACCOUNT_API_CLIENT_ID=your-client-id
```

## Architecture Constraints
### React Router Migration Notes
**CRITICAL:** Project đã migrate từ Remix sang React Router v7

```typescript
// INCORRECT (Remix style)
import { useLoaderData } from '@remix-run/react';

// CORRECT (React Router style)  
import { useLoaderData } from 'react-router';
```

### Import Rules
- NEVER sử dụng `react-router-dom` imports
- Sử dụng `react-router` cho tất cả routing hooks
- Sử dụng `@react-router/dev` cho development tools

### File Structure Constraints
```
app/
├── routes/              # React Router file-based routing
│   ├── _index.tsx       # Homepage route
│   ├── ($locale).tsx    # Locale wrapper
│   └── *.tsx           # Other routes
├── entry.client.tsx     # Client-side entry point
├── entry.server.tsx     # Server-side entry point
└── root.tsx            # Root layout component
```

## Performance Constraints
### Bundle Size Limits
- Main bundle: < 300KB gzipped
- Route chunks: < 100KB each
- Image assets: WebP format preferred
- Font loading: Self-hosted fonts only

### Runtime Performance
- First Contentful Paint: < 1.5s
- Largest Contentful Paint: < 2.5s  
- Cumulative Layout Shift: < 0.1
- Time to Interactive: < 3s

### Animation Performance
- 60fps target cho tất cả animations
- GPU acceleration cho GSAP transforms
- Debounced scroll events
- Cleanup animation timelines on unmount

## Browser Support
### Target Browsers
```json
"browserslist": [
  "defaults",
  "not ie 11",
  "not op_mini all"
]
```

### Feature Support
- ES2020+ features
- CSS Grid và Flexbox
- WebP image format
- CSS Custom Properties
- Intersection Observer API

## API Constraints
### GraphQL Limitations
- Shopify Storefront API rate limits
- Query complexity limits
- Fragment reuse requirements
- Type generation dependencies

### Customer Account API
- OAuth 2.0 authentication flow
- Domain restrictions cho development
- Token refresh mechanisms
- Privacy compliance requirements

## Build System Configuration
### Vite Configuration
```typescript
// vite.config.ts highlights
export default defineConfig({
  plugins: [
    hydrogen(),
    tsconfigPaths(),
    tailwindcss()
  ],
  server: {
    port: 3000
  }
});
```

### TypeScript Configuration
```json
// tsconfig.json highlights
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["DOM", "DOM.Iterable", "ES6"],
    "module": "ESNext",
    "moduleResolution": "node",
    "strict": true
  }
}
```

## Deployment Constraints
### Shopify Oxygen
- Serverless deployment platform
- Edge computing capabilities
- Automatic scaling
- Regional optimization

### Build Requirements
- Static asset optimization
- Server-side rendering support
- Environment variable management
- Error monitoring integration

## Security Considerations
### API Security
- Shopify API tokens management
- CORS configuration
- XSS protection
- Input sanitization

### Content Security Policy
- Inline script restrictions
- Image source policies
- Font loading policies
- Third-party script controls

## Monitoring & Analytics
### Performance Monitoring
- Core Web Vitals tracking
- Error boundary implementation
- Performance budgets
- Lighthouse CI integration

### Development Tools
- React Developer Tools
- GSAP Developer Tools
- Network throttling testing
- Accessibility auditing tools

## Known Technical Debt
### Current Issues
1. **Constants file:** Mixed .js/.tsx extensions
2. **Animation cleanup:** Some GSAP timelines need proper cleanup
3. **Type coverage:** Some any types need proper typing
4. **Bundle optimization:** Code splitting could be improved

### Planned Improvements
1. Migrate all JS files to TypeScript
2. Implement comprehensive error boundaries
3. Add performance monitoring
4. Optimize animation performance
5. Improve accessibility compliance
</file>

<file path=".cursor/rules/hydrogen-react-router.mdc">
---
description: 
globs: 
alwaysApply: true
---

# React Router Import Rule for Hydrogen

## Overview

This Hydrogen project is based on React Router, not Remix. When working with documentation or code examples, you should always use imports from the appropriate React Router packages instead of Remix packages.

## Import Replacements

When you see imports from Remix packages, replace them with their equivalent React Router v7 packages. Here are the common replacements:

| Remix v2 Package | React Router v7 Package |
|------------------|-------------------------|
| `@remix-run/react` | `react-router` |
| `@remix-run/dev` | `@react-router/dev` |
| `@remix-run/architect` | `@react-router/architect` |
| `@remix-run/cloudflare` | `@react-router/cloudflare` |
| `@remix-run/express` | `@react-router/express` |
| `@remix-run/fs-routes` | `@react-router/fs-routes` |
| `@remix-run/node` | `@react-router/node` |
| `@remix-run/route-config` | `@react-router/dev` |
| `@remix-run/routes-option-adapter` | `@react-router/remix-routes-option-adapter` |
| `@remix-run/serve` | `@react-router/serve` |
| `@remix-run/server-runtime` | `react-router` |
| `@remix-run/testing` | `react-router` |

NEVER USE 'react-router-dom' imports!

## Common Import Examples

```js
// INCORRECT (Remix style)
import { useLoaderData, Link, Form, useActionData, useNavigation, useSubmit } from '@remix-run/react';

// CORRECT (React Router style)
import { useLoaderData, Link, Form, useActionData, useNavigation, useSubmit } from 'react-router';
```

## Development Guidelines

1. Always check existing code in the project to understand which specific React Router hooks and components are being used
2. When generating new code or modifying existing code, ensure all routing-related imports come from the correct React Router packages
3. If following documentation or examples based on Remix, adapt the code to use React Router equivalents

When working in this codebase, always follow the React Router patterns that are already established in the existing code.

For more information, consult the official Remix to React Router upgrade guide: https://reactrouter.com/upgrading/remix
</file>

<file path=".github/workflows/oxygen-deployment-1000037769.yml">
name: Storefront 1000037769
on: [push]

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Deploy to Oxygen
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build and Publish to Oxygen
        run: npx shopify hydrogen deploy
        env:
          SHOPIFY_HYDROGEN_DEPLOYMENT_TOKEN: ${{ secrets.OXYGEN_DEPLOYMENT_TOKEN_1000037769 }}
</file>

<file path=".gitignore">
node_modules
/.cache
/build
/dist
/public/build
/.mf
.env
.shopify
.react-router
</file>

<file path=".graphqlrc.ts">
import type {IGraphQLConfig} from 'graphql-config';
import {getSchema} from '@shopify/hydrogen-codegen';

/**
 * GraphQL Config
 * @see https://the-guild.dev/graphql/config/docs/user/usage
 * @type {IGraphQLConfig}
 */
export default {
  projects: {
    default: {
      schema: getSchema('storefront'),
      documents: [
        './*.{ts,tsx,js,jsx}',
        './app/**/*.{ts,tsx,js,jsx}',
        '!./app/graphql/**/*.{ts,tsx,js,jsx}',
      ],
    },

    customer: {
      schema: getSchema('customer-account'),
      documents: ['./app/graphql/customer-account/*.{ts,tsx,js,jsx}'],
    },

    // Add your own GraphQL projects here for CMS, Shopify Admin API, etc.
  },
} as IGraphQLConfig;
</file>

<file path="app/assets/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none">
  <style>
    .stroke {
      stroke: #000;
    }
    .fill {
      fill: #000;
    }
    @media (prefers-color-scheme: dark) {
      .stroke {
        stroke: #fff;
      }
      .fill {
        fill: #fff;
      }
    }
  </style>
  <path
    class="stroke"
    fill-rule="evenodd"
    d="M16.1 16.04 1 8.02 6.16 5.3l5.82 3.09 4.88-2.57-5.82-3.1L16.21 0l15.1 8.02-5.17 2.72-5.5-2.91-4.88 2.57 5.5 2.92-5.16 2.72Z"
  />
  <path
    class="fill"
    fill-rule="evenodd"
    d="M16.1 32 1 23.98l5.16-2.72 5.82 3.08 4.88-2.57-5.82-3.08 5.17-2.73 15.1 8.02-5.17 2.72-5.5-2.92-4.88 2.58 5.5 2.92L16.1 32Z"
  />
</svg>
</file>

<file path="app/components/CartMain.tsx">
import {useOptimisticCart} from '@shopify/hydrogen';
import {Link} from 'react-router';
import type {CartApiQueryFragment} from 'storefrontapi.generated';
import {useAside} from '~/components/Aside';
import {CartLineItem} from '~/components/CartLineItem';
import {CartSummary} from './CartSummary';

export type CartLayout = 'page' | 'aside';

export type CartMainProps = {
  cart: CartApiQueryFragment | null;
  layout: CartLayout;
};

/**
 * The main cart component that displays the cart items and summary.
 * It is used by both the /cart route and the cart aside dialog.
 */
export function CartMain({layout, cart: originalCart}: CartMainProps) {
  // The useOptimisticCart hook applies pending actions to the cart
  // so the user immediately sees feedback when they modify the cart.
  const cart = useOptimisticCart(originalCart);

  const linesCount = Boolean(cart?.lines?.nodes?.length || 0);
  const withDiscount =
    cart &&
    Boolean(cart?.discountCodes?.filter((code) => code.applicable)?.length);
  const className = `cart-main ${withDiscount ? 'with-discount' : ''}`;
  const cartHasItems = cart?.totalQuantity ? cart.totalQuantity > 0 : false;

  return (
    <div className={className}>
      <CartEmpty hidden={linesCount} layout={layout} />
      <div className="cart-details">
        <div aria-labelledby="cart-lines">
          <ul>
            {(cart?.lines?.nodes ?? []).map((line) => (
              <CartLineItem key={line.id} line={line} layout={layout} />
            ))}
          </ul>
        </div>
        {cartHasItems && <CartSummary cart={cart} layout={layout} />}
      </div>
    </div>
  );
}

function CartEmpty({
  hidden = false,
}: {
  hidden: boolean;
  layout?: CartMainProps['layout'];
}) {
  const {close} = useAside();
  return (
    <div hidden={hidden}>
      <br />
      <p>
        Looks like you haven&rsquo;t added anything yet, let&rsquo;s get you
        started!
      </p>
      <br />
      <Link to="/collections" onClick={close} prefetch="viewport">
        Continue shopping →
      </Link>
    </div>
  );
}
</file>

<file path="app/components/Footer.tsx">
import {Suspense} from 'react';
import {Await, NavLink} from 'react-router';
import type {FooterQuery, HeaderQuery} from 'storefrontapi.generated';

interface FooterProps {
  footer: Promise<FooterQuery | null>;
  header: HeaderQuery;
  publicStoreDomain: string;
}

export function Footer({
  footer: footerPromise,
  header,
  publicStoreDomain,
}: FooterProps) {
  return (
    <Suspense>
      <Await resolve={footerPromise}>
        {(footer) => (
          <footer className="footer">
            {footer?.menu && header.shop.primaryDomain?.url && (
              <FooterMenu
                menu={footer.menu}
                primaryDomainUrl={header.shop.primaryDomain.url}
                publicStoreDomain={publicStoreDomain}
              />
            )}
          </footer>
        )}
      </Await>
    </Suspense>
  );
}

function FooterMenu({
  menu,
  primaryDomainUrl,
  publicStoreDomain,
}: {
  menu: FooterQuery['menu'];
  primaryDomainUrl: FooterProps['header']['shop']['primaryDomain']['url'];
  publicStoreDomain: string;
}) {
  return (
    <nav className="footer-menu" role="navigation">
      {(menu || FALLBACK_FOOTER_MENU).items.map((item) => {
        if (!item.url) return null;
        // if the url is internal, we strip the domain
        const url =
          item.url.includes('myshopify.com') ||
          item.url.includes(publicStoreDomain) ||
          item.url.includes(primaryDomainUrl)
            ? new URL(item.url).pathname
            : item.url;
        const isExternal = !url.startsWith('/');
        return isExternal ? (
          <a href={url} key={item.id} rel="noopener noreferrer" target="_blank">
            {item.title}
          </a>
        ) : (
          <NavLink
            end
            key={item.id}
            prefetch="intent"
            style={activeLinkStyle}
            to={url}
          >
            {item.title}
          </NavLink>
        );
      })}
    </nav>
  );
}

const FALLBACK_FOOTER_MENU = {
  id: 'gid://shopify/Menu/199655620664',
  items: [
    {
      id: 'gid://shopify/MenuItem/461633060920',
      resourceId: 'gid://shopify/ShopPolicy/23358046264',
      tags: [],
      title: 'Privacy Policy',
      type: 'SHOP_POLICY',
      url: '/policies/privacy-policy',
      items: [],
    },
    {
      id: 'gid://shopify/MenuItem/461633093688',
      resourceId: 'gid://shopify/ShopPolicy/23358013496',
      tags: [],
      title: 'Refund Policy',
      type: 'SHOP_POLICY',
      url: '/policies/refund-policy',
      items: [],
    },
    {
      id: 'gid://shopify/MenuItem/461633126456',
      resourceId: 'gid://shopify/ShopPolicy/23358111800',
      tags: [],
      title: 'Shipping Policy',
      type: 'SHOP_POLICY',
      url: '/policies/shipping-policy',
      items: [],
    },
    {
      id: 'gid://shopify/MenuItem/461633159224',
      resourceId: 'gid://shopify/ShopPolicy/23358079032',
      tags: [],
      title: 'Terms of Service',
      type: 'SHOP_POLICY',
      url: '/policies/terms-of-service',
      items: [],
    },
  ],
};

function activeLinkStyle({
  isActive,
  isPending,
}: {
  isActive: boolean;
  isPending: boolean;
}) {
  return {
    fontWeight: isActive ? 'bold' : undefined,
    color: isPending ? 'grey' : 'white',
  };
}
</file>

<file path="app/components/GradientText.tsx">
import React from 'react';

interface GradientTextProps {
  children: React.ReactNode;
  variant?: 'default' | 'primary' | 'accent' | 'white' | 'cyber' | 'neon';
  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span';
  animate?: boolean;
  className?: string;
}

export function GradientText({
  children,
  variant = 'default',
  as: Component = 'span',
  animate = false,
  className = '',
}: GradientTextProps) {
  const getGradientClass = () => {
    const baseClass = Component.startsWith('h') ? 'heading-gradient' : 'text-gradient';
    
    switch (variant) {
      case 'primary':
        return `${baseClass}-primary`;
      case 'accent':
        return `${baseClass}-accent`;
      case 'white':
        return `${baseClass}-white`;
      case 'cyber':
        return `${baseClass}-cyber`;
      case 'neon':
        return `${baseClass}-neon`;
      default:
        return baseClass;
    }
  };

  const gradientClass = getGradientClass();
  const animateClass = animate ? 'text-gradient-animate' : '';
  const combinedClassName = `${gradientClass} ${animateClass} ${className}`.trim();

  return <Component className={combinedClassName}>{children}</Component>;
}

// Convenience components for common use cases
export function GradientHeading({
  children,
  level = 1,
  variant = 'default',
  animate = false,
  className = '',
}: {
  children: React.ReactNode;
  level?: 1 | 2 | 3 | 4 | 5 | 6;
  variant?: 'default' | 'primary' | 'accent' | 'white' | 'cyber' | 'neon';
  animate?: boolean;
  className?: string;
}) {
  const HeadingComponent = `h${level}` as 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
  
  return (
    <GradientText
      as={HeadingComponent}
      variant={variant}
      animate={animate}
      className={className}
    >
      {children}
    </GradientText>
  );
}
</file>

<file path="app/components/KprButton.tsx">
import React from 'react';

export interface KprButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  as?: React.ElementType;
  href?: string;
  children: React.ReactNode;
}

export function KprButton({
  variant = 'primary',
  size = 'md',
  fullWidth = false,
  as: Component = 'button',
  className = '',
  children,
  ...props
}: KprButtonProps) {
  const baseClasses = 'kpr-button relative overflow-hidden font-oxanium font-bold text-center cursor-pointer transition-all duration-300 ease-in-out uppercase inline-block text-decoration-none';
  
  const variantClasses = {
    primary: 'kpr-button-primary bg-zinc-700 text-white hover:text-black border-0',
    secondary: 'kpr-button-secondary bg-transparent text-white border border-white/20 hover:bg-zinc-700 hover:text-white'
  };
  
  const sizeClasses = {
    sm: 'px-4 py-2 text-sm',
    md: 'px-6 py-3 text-base',
    lg: 'px-8 py-4 text-lg'
  };
  
  const combinedClasses = `
    ${baseClasses}
    ${variantClasses[variant]}
    ${sizeClasses[size]}
    ${fullWidth ? 'w-full block' : ''}
    ${className}
  `.trim();

  return (
    <Component
      className={combinedClasses}
      {...props}
    >
      <span className="relative z-10 transition-all duration-300 ease-in-out">
        {children}
      </span>
    </Component>
  );
}
</file>

<file path="app/components/KprHeader.tsx">
import {Suspense, useState, useEffect, useRef} from 'react';
import {Await, NavLink, useAsyncValue} from 'react-router';
import {
  type CartViewPayload,
  useAnalytics,
  useOptimisticCart,
} from '@shopify/hydrogen';
import type {HeaderQuery, CartApiQueryFragment} from 'storefrontapi.generated';
import {useAside} from '~/components/Aside';
import {Menu, Search as SearchIcon, Skull, Hexagon} from 'lucide-react';
import {MatrixNavLink} from './MatrixNavLink';
import {MobileMenu} from './MobileMenu';

interface HeaderProps {
  header: HeaderQuery;
  cart: Promise<CartApiQueryFragment | null>;
  isLoggedIn: Promise<boolean>;
  publicStoreDomain: string;
}

type Viewport = 'desktop' | 'mobile';

export function KprHeader({
  header,
  isLoggedIn,
  cart,
  publicStoreDomain,
}: HeaderProps) {
  const {shop, menu} = header;
  const headerRef = useRef<HTMLDivElement>(null);
  const [isSticky, setIsSticky] = useState(false);
  const [isHidden, setIsHidden] = useState(false);
  const [currentScrollTop, setCurrentScrollTop] = useState(0);
  const [headerBounds, setHeaderBounds] = useState<DOMRect | null>(null);
  const {type: asideType, open} = useAside();
  const predictiveSearchIsOpen = false; // You can implement this based on your search state

  // Set fixed header height once - no dynamic calculation
  useEffect(() => {
    // Set a fixed header height that covers announcement + header in all states
    // 32px (announcement) + 104px (header) = 136px
    document.documentElement.style.setProperty('--header-height', '136px');
  }, []);

  useEffect(() => {
    // Create intersection observer for header bounds
    const observer = new IntersectionObserver((entries) => {
      setHeaderBounds(entries[0].intersectionRect);
      observer.disconnect();
    });

    if (headerRef.current) {
      observer.observe(headerRef.current);
    }

    // Scroll handler
    const onScroll = () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      // Skip if predictive search is open
      if (predictiveSearchIsOpen) return;

      if (headerBounds) {
        if (scrollTop > currentScrollTop && scrollTop > headerBounds.bottom) {
          // Scrolling down and past header
          setIsSticky(true);
          setIsHidden(true);
        } else if (scrollTop < currentScrollTop && scrollTop > headerBounds.bottom) {
          // Scrolling up and past header
          setIsSticky(true);
          setIsHidden(false);
        } else if (scrollTop <= headerBounds.top) {
          // At top
          setIsSticky(false);
          setIsHidden(false);
        }
      }

      setCurrentScrollTop(scrollTop);
    };

    window.addEventListener('scroll', onScroll, {passive: true});

    return () => {
      window.removeEventListener('scroll', onScroll);
      observer.disconnect();
    };
  }, [currentScrollTop, headerBounds, predictiveSearchIsOpen]);

  return (
    <div ref={headerRef}>
      <div
        className={`fixed top-0 z-40 w-full bg-black transition-transform duration-500 ease-in-out
        ${isHidden ? '-translate-y-full' : 'translate-y-0'}`}
      >
        {/* Announcement */}
        <div
          className={`announcement-bar overflow-hidden transition-all duration-300 ease-in-out bg-black text-white border-b border-white/10 
          ${isSticky ? 'h-0 py-0 border-opacity-0' : 'h-8 py-1 border-opacity-100'}`}
        >
          <div className="container mx-auto text-center px-4 text-sm">
            <p className="font-oxanium text-[14px] leading-tight sm:text-[16px] font-light tracking-wider">
              Free shipping on orders over $100
            </p>
          </div>
        </div>

        {/* Main Header */}
        <header
          className={`h-auto transition-all duration-500 ease-in-out 
          ${isSticky ? 'bg-black/80 backdrop-blur-lg shadow-md border-transparent' : 'bg-black border-b border-neutral-800'}
          ${isSticky ? 'shopify-section-header-sticky' : ''}`}
        >
          <div className="container mx-auto">
            {/* Header Content */}
            <div
              className={`relative flex items-center justify-between px-4 sm:px-6 transition-all duration-300 ease-in-out max-lg:py-6 lg:py-2`}
            >
              {/* Mobile Menu Toggle */}
              <div className="lg:hidden">
                <button
                  onClick={() => open('mobile-menu')}
                  className="p-2 -ml-2 text-white hover:text-neutral-400 transition-colors"
                >
                  <Menu className="w-6 h-6" />
                </button>
              </div>

              {/* Desktop Navigation */}
              <div className="hidden lg:flex lg:w-1/3">
                <HeaderMenu
                  menu={menu}
                  viewport="desktop"
                  primaryDomainUrl={header.shop.primaryDomain.url}
                  publicStoreDomain={publicStoreDomain}
                />
              </div>

              {/* Logo - Responsive for both mobile and desktop */}
              <div className="max-lg:absolute max-lg:left-1/2 max-lg:-translate-x-1/2 lg:w-1/3 lg:flex lg:items-center lg:justify-center">
                <NavLink
                  prefetch="intent"
                  to="/"
                  className="block"
                >
                  <img 
                    src="/images/logo_kyperus_w.png" 
                    alt={shop.name}
                    className={`h-auto transition-all duration-300 ease-in-out ${isSticky ? 'w-24' : 'w-[120px]'}`}
                  />
                </NavLink>
              </div>

              {/* Right actions - Search and Cart */}
              <div className="lg:w-1/3 lg:flex lg:items-center lg:justify-end">
                <HeaderCtas isLoggedIn={isLoggedIn} cart={cart} />
              </div>
            </div>
          </div>
        </header>
      </div>

      {/* Mobile Menu */}
      <MobileMenu
        menu={menu}
        publicStoreDomain={publicStoreDomain}
        primaryDomainUrl={header.shop.primaryDomain.url}
      />
    </div>
  );
}

// Reuse existing components
export function HeaderMenu({
  menu,
  primaryDomainUrl,
  viewport,
  publicStoreDomain,
}: {
  menu: HeaderProps['header']['menu'];
  primaryDomainUrl: HeaderProps['header']['shop']['primaryDomain']['url'];
  viewport: Viewport;
  publicStoreDomain: HeaderProps['publicStoreDomain'];
}) {
  const {close} = useAside();

  const desktopClassName =
    'flex items-center gap-6 text-sm uppercase justify-center text-white';
  const mobileClassName =
    'flex flex-col items-center justify-center space-y-4 text-sm uppercase';

  return (
    <nav
      className={viewport === 'desktop' ? desktopClassName : mobileClassName}
      role="navigation"
    >
      {viewport === 'mobile' && (
        <div className="w-full text-center">
          <MatrixNavLink to="/" onClick={() => close()}>
            Home
          </MatrixNavLink>
        </div>
      )}
      {viewport === 'desktop' &&
        menu?.items.map((item) => {
          if (!item.url) return null;
          const url =
            item.url.includes('myshopify.com') ||
            item.url.includes(publicStoreDomain) ||
            item.url.includes(primaryDomainUrl)
              ? new URL(item.url).pathname
              : item.url;
          return (
            <MatrixNavLink
              key={item.id}
              to={url}
              onClick={() => close()}
            >
              {item.title}
            </MatrixNavLink>
          );
        })}
    </nav>
  );
}

function HeaderCtas({
  isLoggedIn,
  cart,
}: Pick<HeaderProps, 'isLoggedIn' | 'cart'>) {
  return (
    <nav className="flex items-center gap-4 text-white" role="navigation">
      <SearchToggle />
      <CartToggle cart={cart} />
    </nav>
  );
}

function SearchToggle() {
  const {open} = useAside();
  return (
    <button 
      className="relative group header-icon-button" 
      onClick={() => open('search')}
      aria-label="Search"
    >
      <Hexagon className="w-12 h-12 text-white/20 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 group-hover:text-white/30 transition-colors" strokeWidth={1} />
      <SearchIcon className="w-6 h-6 relative z-10 group-hover:text-neutral-400 transition-colors" strokeWidth={1.5} />
    </button>
  );
}

function CartBadge({count}: {count: number | null}) {
  const {open} = useAside();
  const {publish, shop, cart, prevCart} = useAnalytics();

  return (
    <button
      className="relative group header-icon-button"
      onClick={() => {
        open('cart');
        publish('cart_viewed', {
          cart,
          prevCart,
          shop,
          url: window.location.href || '',
        } as CartViewPayload);
      }}
      aria-label="Cart"
    >
      <Hexagon className="w-12 h-12 text-white/20 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 group-hover:text-white/30 transition-colors" strokeWidth={1} />
      <Skull className="w-6 h-6 relative z-10 group-hover:text-neutral-400 transition-colors" strokeWidth={1.5} />
      {count !== null && count > 0 && (
        <span className="absolute -top-2 -right-2 bg-white text-black text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold z-20">
          {count}
        </span>
      )}
    </button>
  );
}

function CartToggle({cart}: Pick<HeaderProps, 'cart'>) {
  return (
    <Suspense fallback={<CartBadge count={null} />}>
      <Await resolve={cart}>
        <CartBanner />
      </Await>
    </Suspense>
  );
}

function CartBanner() {
  const originalCart = useAsyncValue() as CartApiQueryFragment | null;
  const cart = useOptimisticCart(originalCart);
  return <CartBadge count={cart?.totalQuantity ?? 0} />;
}
</file>

<file path="app/components/MatrixNavLink.tsx">
import {useState, useEffect, useCallback} from 'react';
import {NavLink} from 'react-router';

interface MatrixNavLinkProps {
  to: string;
  children: string;
  onClick?: () => void;
  className?: string;
}

const GLITCH_CHARS = "!@#$%^&*()_+-=[]{}|;:,.<>?`~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
const GLITCH_DURATION = 500;
const GLITCH_INTERVAL = 50;

export function MatrixNavLink({to, children, onClick, className = ''}: MatrixNavLinkProps) {
  const [isHovering, setIsHovering] = useState(false);
  const [displayText, setDisplayText] = useState(children);

  const getRandomChar = useCallback(() => {
    return GLITCH_CHARS[Math.floor(Math.random() * GLITCH_CHARS.length)];
  }, []);

  const startGlitchEffect = useCallback(() => {
    let iterations = 0;
    const maxIterations = GLITCH_DURATION / GLITCH_INTERVAL;
    const originalText = children;
    
    const interval = setInterval(() => {
      iterations++;
      
      if (iterations >= maxIterations) {
        clearInterval(interval);
        setDisplayText(originalText);
        return;
      }

      const progress = iterations / maxIterations;
      let newText = '';
      
      for (let i = 0; i < originalText.length; i++) {
        if (Math.random() < progress) {
          newText += originalText[i];
        } else {
          newText += getRandomChar();
        }
      }
      
      setDisplayText(newText);
    }, GLITCH_INTERVAL);

    return () => clearInterval(interval);
  }, [children, getRandomChar]);

  useEffect(() => {
    if (isHovering) {
      const cleanup = startGlitchEffect();
      return cleanup;
    }
  }, [isHovering, startGlitchEffect]);

  return (
    <NavLink
      to={to}
      onClick={onClick}
      onMouseEnter={() => setIsHovering(true)}
      onMouseLeave={() => {
        setIsHovering(false);
        setDisplayText(children);
      }}
      className={({isActive}) => `
        relative
        font-oxanium
        font-semibold
        uppercase
        tracking-wider
        py-2
        px-4
        transition-all
        duration-400
        ease-in-out
        ${isActive ? 'matrix-active text-white before:absolute before:inset-0 before:bg-white/10 before:clip-path-active' : 'text-neutral-400'}
        group
        inline-flex
        items-center
        min-w-[100px]
        ${className}
      `}
    >
      {/* Active state indicator */}
      <span className="absolute left-[-8px] top-1/2 -translate-y-1/2 w-1.5 h-1.5 bg-white opacity-0 transition-opacity duration-300 matrix-active-indicator" />
      
      {/* Background effect container */}
      <span className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Main background - light gray */}
        <span 
          className="
            absolute 
            inset-0 
            bg-neutral-100
            transform 
            origin-left 
            scale-x-0 
            transition-transform 
            duration-400 
            ease-in-out 
            group-hover:scale-x-100
          "
        />
        
        {/* Moving highlight */}
        <span 
          className="
            absolute 
            inset-0 
            bg-white/50
            transform 
            -translate-x-full 
            group-hover:translate-x-full 
            transition-transform 
            duration-700 
            ease-in-out
          "
        />
      </span>
      
      {/* Text content */}
      <span className="relative z-10 group-hover:text-black transition-colors duration-300">
        {displayText}
      </span>
    </NavLink>
  );
}
</file>

<file path="app/components/MobileMenu.tsx">
import {useAside} from './Aside';
import {MatrixNavLink} from './MatrixNavLink';
import {X} from 'lucide-react';
import type {HeaderQuery} from 'storefrontapi.generated';
import {Aside} from './Aside';

interface MobileMenuProps {
  menu: HeaderQuery['menu'];
  publicStoreDomain: string;
  primaryDomainUrl: string;
}

export function MobileMenu({menu, publicStoreDomain, primaryDomainUrl}: MobileMenuProps) {
  const {close} = useAside();

  // Function to process URL
  const processUrl = (url: string) => {
    if (!url) return '';
    return url.includes('myshopify.com') ||
      url.includes(publicStoreDomain) ||
      url.includes(primaryDomainUrl)
      ? new URL(url).pathname
      : url;
  };

  return (
    <Aside
      type="mobile-menu"
      heading={
        <span className="text-white font-oxanium text-2xl uppercase tracking-wider">
          Menu
        </span>
      }
    >
      <nav className="p-6 flex flex-col space-y-6">
        {menu?.items.map((item) => {
          if (!item.url) return null;
          const url = processUrl(item.url);
          
          return (
            <div key={item.id} className="block">
              <MatrixNavLink 
                to={url} 
                onClick={close}
                className="text-xl w-full justify-start"
              >
                {item.title.toUpperCase()}
              </MatrixNavLink>
            </div>
          );
        })}
      </nav>
    </Aside>
  );
}
</file>

<file path="app/components/PaginatedResourceSection.tsx">
import * as React from 'react';
import {Pagination} from '@shopify/hydrogen';

/**
 * <PaginatedResourceSection > is a component that encapsulate how the previous and next behaviors throughout your application.
 */
export function PaginatedResourceSection<NodesType>({
  connection,
  children,
  resourcesClassName,
}: {
  connection: React.ComponentProps<typeof Pagination<NodesType>>['connection'];
  children: React.FunctionComponent<{node: NodesType; index: number}>;
  resourcesClassName?: string;
}) {
  return (
    <Pagination connection={connection}>
      {({nodes, isLoading, PreviousLink, NextLink}) => {
        const resourcesMarkup = nodes.map((node, index) =>
          children({node, index}),
        );

        return (
          <div>
            <PreviousLink>
              {isLoading ? 'Loading...' : <span>↑ Load previous</span>}
            </PreviousLink>
            {resourcesClassName ? (
              <div className={resourcesClassName}>{resourcesMarkup}</div>
            ) : (
              resourcesMarkup
            )}
            <NextLink>
              {isLoading ? 'Loading...' : <span>Load more ↓</span>}
            </NextLink>
          </div>
        );
      }}
    </Pagination>
  );
}
</file>

<file path="app/components/ProductForm.tsx">
import { Link, useNavigate } from 'react-router';
import {type MappedProductOptions} from '@shopify/hydrogen';
import type {
  Maybe,
  ProductOptionValueSwatch,
} from '@shopify/hydrogen/storefront-api-types';
import {AddToCartButton} from './AddToCartButton';
import {useAside} from './Aside';
import type {ProductFragment} from 'storefrontapi.generated';

export function ProductForm({
  productOptions,
  selectedVariant,
}: {
  productOptions: MappedProductOptions[];
  selectedVariant: ProductFragment['selectedOrFirstAvailableVariant'];
}) {
  const navigate = useNavigate();
  const {open} = useAside();
  return (
    <div className="product-form">
      {productOptions.map((option) => {
        // If there is only a single value in the option values, don't display the option
        if (option.optionValues.length === 1) return null;

        return (
          <div className="product-options" key={option.name}>
            <h5>{option.name}</h5>
            <div className="product-options-grid">
              {option.optionValues.map((value) => {
                const {
                  name,
                  handle,
                  variantUriQuery,
                  selected,
                  available,
                  exists,
                  isDifferentProduct,
                  swatch,
                } = value;

                if (isDifferentProduct) {
                  // SEO
                  // When the variant is a combined listing child product
                  // that leads to a different url, we need to render it
                  // as an anchor tag
                  return (
                    <Link
                      className="product-options-item"
                      key={option.name + name}
                      prefetch="intent"
                      preventScrollReset
                      replace
                      to={`/products/${handle}?${variantUriQuery}`}
                      style={{
                        border: selected
                          ? '1px solid black'
                          : '1px solid transparent',
                        opacity: available ? 1 : 0.3,
                      }}
                    >
                      <ProductOptionSwatch swatch={swatch} name={name} />
                    </Link>
                  );
                } else {
                  // SEO
                  // When the variant is an update to the search param,
                  // render it as a button with javascript navigating to
                  // the variant so that SEO bots do not index these as
                  // duplicated links
                  return (
                    <button
                      type="button"
                      className={`product-options-item${
                        exists && !selected ? ' link' : ''
                      }`}
                      key={option.name + name}
                      style={{
                        border: selected
                          ? '1px solid black'
                          : '1px solid transparent',
                        opacity: available ? 1 : 0.3,
                      }}
                      disabled={!exists}
                      onClick={() => {
                        if (!selected) {
                          navigate(`?${variantUriQuery}`, {
                            replace: true,
                            preventScrollReset: true,
                          });
                        }
                      }}
                    >
                      <ProductOptionSwatch swatch={swatch} name={name} />
                    </button>
                  );
                }
              })}
            </div>
            <br />
          </div>
        );
      })}
      <AddToCartButton
        disabled={!selectedVariant || !selectedVariant.availableForSale}
        onClick={() => {
          open('cart');
        }}
        lines={
          selectedVariant
            ? [
                {
                  merchandiseId: selectedVariant.id,
                  quantity: 1,
                  selectedVariant,
                },
              ]
            : []
        }
      >
        {selectedVariant?.availableForSale ? 'Add to cart' : 'Sold out'}
      </AddToCartButton>
    </div>
  );
}

function ProductOptionSwatch({
  swatch,
  name,
}: {
  swatch?: Maybe<ProductOptionValueSwatch> | undefined;
  name: string;
}) {
  const image = swatch?.image?.previewImage?.url;
  const color = swatch?.color;

  if (!image && !color) return name;

  return (
    <div
      aria-label={name}
      className="product-option-label-swatch"
      style={{
        backgroundColor: color || 'transparent',
      }}
    >
      {!!image && <img src={image} alt={name} />}
    </div>
  );
}
</file>

<file path="app/components/ProductImage.tsx">
import type {ProductVariantFragment} from 'storefrontapi.generated';
import {Image} from '@shopify/hydrogen';

export function ProductImage({
  image,
}: {
  image: ProductVariantFragment['image'];
}) {
  if (!image) {
    return <div className="product-image" />;
  }
  return (
    <div className="product-image">
      <Image
        alt={image.altText || 'Product Image'}
        aspectRatio="1/1"
        data={image}
        key={image.id}
        sizes="(min-width: 45em) 50vw, 100vw"
      />
    </div>
  );
}
</file>

<file path="app/components/ProductItem.tsx">
import {Link} from 'react-router';
import {Image, Money} from '@shopify/hydrogen';
import type {
  ProductItemFragment,
  CollectionItemFragment,
  RecommendedProductFragment,
} from 'storefrontapi.generated';
import {useVariantUrl} from '~/lib/variants';

export function ProductItem({
  product,
  loading,
}: {
  product:
    | CollectionItemFragment
    | ProductItemFragment
    | RecommendedProductFragment;
  loading?: 'eager' | 'lazy';
}) {
  const variantUrl = useVariantUrl(product.handle);
  const image = product.featuredImage;
  return (
    <Link
      className="product-item"
      key={product.id}
      prefetch="intent"
      to={variantUrl}
    >
      {image && (
        <Image
          alt={image.altText || product.title}
          aspectRatio="1/1"
          data={image}
          loading={loading}
          sizes="(min-width: 45em) 400px, 100vw"
        />
      )}
      <h4>{product.title}</h4>
      <small>
        <Money data={product.priceRange.minVariantPrice} />
      </small>
    </Link>
  );
}
</file>

<file path="app/components/ProductPrice.tsx">
import {Money} from '@shopify/hydrogen';
import type {MoneyV2} from '@shopify/hydrogen/storefront-api-types';

export function ProductPrice({
  price,
  compareAtPrice,
}: {
  price?: MoneyV2;
  compareAtPrice?: MoneyV2 | null;
}) {
  return (
    <div className="product-price">
      {compareAtPrice ? (
        <div className="product-price-on-sale">
          {price ? <Money data={price} /> : null}
          <s>
            <Money data={compareAtPrice} />
          </s>
        </div>
      ) : price ? (
        <Money data={price} />
      ) : (
        <span>&nbsp;</span>
      )}
    </div>
  );
}
</file>

<file path="app/components/SearchForm.tsx">
import {useRef, useEffect} from 'react';
import { Form, type FormProps } from 'react-router';

type SearchFormProps = Omit<FormProps, 'children'> & {
  children: (args: {
    inputRef: React.RefObject<HTMLInputElement>;
  }) => React.ReactNode;
};

/**
 * Search form component that sends search requests to the `/search` route.
 * @example
 * ```tsx
 * <SearchForm>
 *  {({inputRef}) => (
 *    <>
 *      <input
 *        ref={inputRef}
 *        type="search"
 *        defaultValue={term}
 *        name="q"
 *        placeholder="Search…"
 *      />
 *      <button type="submit">Search</button>
 *   </>
 *  )}
 *  </SearchForm>
 */
export function SearchForm({children, ...props}: SearchFormProps) {
  const inputRef = useRef<HTMLInputElement | null>(null);

  useFocusOnCmdK(inputRef);

  if (typeof children !== 'function') {
    return null;
  }

  return (
    <Form method="get" {...props}>
      {children({inputRef})}
    </Form>
  );
}

/**
 * Focuses the input when cmd+k is pressed
 */
function useFocusOnCmdK(inputRef: React.RefObject<HTMLInputElement>) {
  // focus the input when cmd+k is pressed
  useEffect(() => {
    function handleKeyDown(event: KeyboardEvent) {
      if (event.key === 'k' && event.metaKey) {
        event.preventDefault();
        inputRef.current?.focus();
      }

      if (event.key === 'Escape') {
        inputRef.current?.blur();
      }
    }

    document.addEventListener('keydown', handleKeyDown);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [inputRef]);
}
</file>

<file path="app/components/SearchFormPredictive.tsx">
import {
  useFetcher,
  useNavigate,
  type FormProps,
  type Fetcher,
} from 'react-router';
import React, {useRef, useEffect} from 'react';
import type {PredictiveSearchReturn} from '~/lib/search';
import {useAside} from './Aside';

type SearchFormPredictiveChildren = (args: {
  fetchResults: (event: React.ChangeEvent<HTMLInputElement>) => void;
  goToSearch: () => void;
  inputRef: React.MutableRefObject<HTMLInputElement | null>;
  fetcher: Fetcher<PredictiveSearchReturn>;
}) => React.ReactNode;

type SearchFormPredictiveProps = Omit<FormProps, 'children'> & {
  children: SearchFormPredictiveChildren | null;
};

export const SEARCH_ENDPOINT = '/search';

/**
 *  Search form component that sends search requests to the `/search` route
 **/
export function SearchFormPredictive({
  children,
  className = 'predictive-search-form',
  ...props
}: SearchFormPredictiveProps) {
  const fetcher = useFetcher<PredictiveSearchReturn>({key: 'search'});
  const inputRef = useRef<HTMLInputElement | null>(null);
  const navigate = useNavigate();
  const aside = useAside();

  /** Reset the input value and blur the input */
  function resetInput(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    event.stopPropagation();
    if (inputRef?.current?.value) {
      inputRef.current.blur();
    }
  }

  /** Navigate to the search page with the current input value */
  function goToSearch() {
    const term = inputRef?.current?.value;
    navigate(SEARCH_ENDPOINT + (term ? `?q=${term}` : ''));
    aside.close();
  }

  /** Fetch search results based on the input value */
  function fetchResults(event: React.ChangeEvent<HTMLInputElement>) {
    fetcher.submit(
      {q: event.target.value || '', limit: 5, predictive: true},
      {method: 'GET', action: SEARCH_ENDPOINT},
    );
  }

  // ensure the passed input has a type of search, because SearchResults
  // will select the element based on the input
  useEffect(() => {
    inputRef?.current?.setAttribute('type', 'search');
  }, []);

  if (typeof children !== 'function') {
    return null;
  }

  return (
    <fetcher.Form {...props} className={className} onSubmit={resetInput}>
      {children({inputRef, fetcher, fetchResults, goToSearch})}
    </fetcher.Form>
  );
}
</file>

<file path="app/components/SearchResults.tsx">
import { Link } from 'react-router';
import {Image, Money, Pagination} from '@shopify/hydrogen';
import {urlWithTrackingParams, type RegularSearchReturn} from '~/lib/search';

type SearchItems = RegularSearchReturn['result']['items'];
type PartialSearchResult<ItemType extends keyof SearchItems> = Pick<
  SearchItems,
  ItemType
> &
  Pick<RegularSearchReturn, 'term'>;

type SearchResultsProps = RegularSearchReturn & {
  children: (args: SearchItems & {term: string}) => React.ReactNode;
};

export function SearchResults({
  term,
  result,
  children,
}: Omit<SearchResultsProps, 'error' | 'type'>) {
  if (!result?.total) {
    return null;
  }

  return children({...result.items, term});
}

SearchResults.Articles = SearchResultsArticles;
SearchResults.Pages = SearchResultsPages;
SearchResults.Products = SearchResultsProducts;
SearchResults.Empty = SearchResultsEmpty;

function SearchResultsArticles({
  term,
  articles,
}: PartialSearchResult<'articles'>) {
  if (!articles?.nodes.length) {
    return null;
  }

  return (
    <div className="search-result">
      <h2>Articles</h2>
      <div>
        {articles?.nodes?.map((article) => {
          const articleUrl = urlWithTrackingParams({
            baseUrl: `/blogs/${article.handle}`,
            trackingParams: article.trackingParameters,
            term,
          });

          return (
            <div className="search-results-item" key={article.id}>
              <Link prefetch="intent" to={articleUrl}>
                {article.title}
              </Link>
            </div>
          );
        })}
      </div>
      <br />
    </div>
  );
}

function SearchResultsPages({term, pages}: PartialSearchResult<'pages'>) {
  if (!pages?.nodes.length) {
    return null;
  }

  return (
    <div className="search-result">
      <h2>Pages</h2>
      <div>
        {pages?.nodes?.map((page) => {
          const pageUrl = urlWithTrackingParams({
            baseUrl: `/pages/${page.handle}`,
            trackingParams: page.trackingParameters,
            term,
          });

          return (
            <div className="search-results-item" key={page.id}>
              <Link prefetch="intent" to={pageUrl}>
                {page.title}
              </Link>
            </div>
          );
        })}
      </div>
      <br />
    </div>
  );
}

function SearchResultsProducts({
  term,
  products,
}: PartialSearchResult<'products'>) {
  if (!products?.nodes.length) {
    return null;
  }

  return (
    <div className="search-result">
      <h2>Products</h2>
      <Pagination connection={products}>
        {({nodes, isLoading, NextLink, PreviousLink}) => {
          const ItemsMarkup = nodes.map((product) => {
            const productUrl = urlWithTrackingParams({
              baseUrl: `/products/${product.handle}`,
              trackingParams: product.trackingParameters,
              term,
            });

            const price = product?.selectedOrFirstAvailableVariant?.price;
            const image = product?.selectedOrFirstAvailableVariant?.image;

            return (
              <div className="search-results-item" key={product.id}>
                <Link prefetch="intent" to={productUrl}>
                  {image && (
                    <Image
                      data={image}
                      alt={product.title}
                      width={50}
                    />
                  )}
                  <div>
                    <p>{product.title}</p>
                    <small>
                      {price &&
                        <Money data={price} />
                      }
                    </small>
                  </div>
                </Link>
              </div>
            );
          });

          return (
            <div>
              <div>
                <PreviousLink>
                  {isLoading ? 'Loading...' : <span>↑ Load previous</span>}
                </PreviousLink>
              </div>
              <div>
                {ItemsMarkup}
                <br />
              </div>
              <div>
                <NextLink>
                  {isLoading ? 'Loading...' : <span>Load more ↓</span>}
                </NextLink>
              </div>
            </div>
          );
        }}
      </Pagination>
      <br />
    </div>
  );
}

function SearchResultsEmpty() {
  return <p>No results, try a different search.</p>;
}
</file>

<file path="app/components/SearchResultsPredictive.tsx">
import {Link, useFetcher, type Fetcher} from 'react-router';
import {Image, Money} from '@shopify/hydrogen';
import React, {useRef, useEffect} from 'react';
import {
  getEmptyPredictiveSearchResult,
  urlWithTrackingParams,
  type PredictiveSearchReturn,
} from '~/lib/search';
import {useAside} from './Aside';

type PredictiveSearchItems = PredictiveSearchReturn['result']['items'];

type UsePredictiveSearchReturn = {
  term: React.MutableRefObject<string>;
  total: number;
  inputRef: React.MutableRefObject<HTMLInputElement | null>;
  items: PredictiveSearchItems;
  fetcher: Fetcher<PredictiveSearchReturn>;
};

type SearchResultsPredictiveArgs = Pick<
  UsePredictiveSearchReturn,
  'term' | 'total' | 'inputRef' | 'items'
> & {
  state: Fetcher['state'];
  closeSearch: () => void;
};

type PartialPredictiveSearchResult<
  ItemType extends keyof PredictiveSearchItems,
  ExtraProps extends keyof SearchResultsPredictiveArgs = 'term' | 'closeSearch',
> = Pick<PredictiveSearchItems, ItemType> &
  Pick<SearchResultsPredictiveArgs, ExtraProps>;

type SearchResultsPredictiveProps = {
  children: (args: SearchResultsPredictiveArgs) => React.ReactNode;
};

/**
 * Component that renders predictive search results
 */
export function SearchResultsPredictive({
  children,
}: SearchResultsPredictiveProps) {
  const aside = useAside();
  const {term, inputRef, fetcher, total, items} = usePredictiveSearch();

  /*
   * Utility that resets the search input
   */
  function resetInput() {
    if (inputRef.current) {
      inputRef.current.blur();
      inputRef.current.value = '';
    }
  }

  /**
   * Utility that resets the search input and closes the search aside
   */
  function closeSearch() {
    resetInput();
    aside.close();
  }

  return children({
    items,
    closeSearch,
    inputRef,
    state: fetcher.state,
    term,
    total,
  });
}

SearchResultsPredictive.Articles = SearchResultsPredictiveArticles;
SearchResultsPredictive.Collections = SearchResultsPredictiveCollections;
SearchResultsPredictive.Pages = SearchResultsPredictivePages;
SearchResultsPredictive.Products = SearchResultsPredictiveProducts;
SearchResultsPredictive.Queries = SearchResultsPredictiveQueries;
SearchResultsPredictive.Empty = SearchResultsPredictiveEmpty;

function SearchResultsPredictiveArticles({
  term,
  articles,
  closeSearch,
}: PartialPredictiveSearchResult<'articles'>) {
  if (!articles.length) return null;

  return (
    <div className="predictive-search-result" key="articles">
      <h5>Articles</h5>
      <ul>
        {articles.map((article) => {
          const articleUrl = urlWithTrackingParams({
            baseUrl: `/blogs/${article.blog.handle}/${article.handle}`,
            trackingParams: article.trackingParameters,
            term: term.current ?? '',
          });

          return (
            <li className="predictive-search-result-item" key={article.id}>
              <Link onClick={closeSearch} to={articleUrl}>
                {article.image?.url && (
                  <Image
                    alt={article.image.altText ?? ''}
                    src={article.image.url}
                    width={50}
                    height={50}
                  />
                )}
                <div>
                  <span>{article.title}</span>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

function SearchResultsPredictiveCollections({
  term,
  collections,
  closeSearch,
}: PartialPredictiveSearchResult<'collections'>) {
  if (!collections.length) return null;

  return (
    <div className="predictive-search-result" key="collections">
      <h5>Collections</h5>
      <ul>
        {collections.map((collection) => {
          const collectionUrl = urlWithTrackingParams({
            baseUrl: `/collections/${collection.handle}`,
            trackingParams: collection.trackingParameters,
            term: term.current,
          });

          return (
            <li className="predictive-search-result-item" key={collection.id}>
              <Link onClick={closeSearch} to={collectionUrl}>
                {collection.image?.url && (
                  <Image
                    alt={collection.image.altText ?? ''}
                    src={collection.image.url}
                    width={50}
                    height={50}
                  />
                )}
                <div>
                  <span>{collection.title}</span>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

function SearchResultsPredictivePages({
  term,
  pages,
  closeSearch,
}: PartialPredictiveSearchResult<'pages'>) {
  if (!pages.length) return null;

  return (
    <div className="predictive-search-result" key="pages">
      <h5>Pages</h5>
      <ul>
        {pages.map((page) => {
          const pageUrl = urlWithTrackingParams({
            baseUrl: `/pages/${page.handle}`,
            trackingParams: page.trackingParameters,
            term: term.current,
          });

          return (
            <li className="predictive-search-result-item" key={page.id}>
              <Link onClick={closeSearch} to={pageUrl}>
                <div>
                  <span>{page.title}</span>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

function SearchResultsPredictiveProducts({
  term,
  products,
  closeSearch,
}: PartialPredictiveSearchResult<'products'>) {
  if (!products.length) return null;

  return (
    <div className="predictive-search-result" key="products">
      <h5>Products</h5>
      <ul>
        {products.map((product) => {
          const productUrl = urlWithTrackingParams({
            baseUrl: `/products/${product.handle}`,
            trackingParams: product.trackingParameters,
            term: term.current,
          });

          const price = product?.selectedOrFirstAvailableVariant?.price;
          const image = product?.selectedOrFirstAvailableVariant?.image;
          return (
            <li className="predictive-search-result-item" key={product.id}>
              <Link to={productUrl} onClick={closeSearch}>
                {image && (
                  <Image
                    alt={image.altText ?? ''}
                    src={image.url}
                    width={50}
                    height={50}
                  />
                )}
                <div>
                  <p>{product.title}</p>
                  <small>{price && <Money data={price} />}</small>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  );
}

function SearchResultsPredictiveQueries({
  queries,
  queriesDatalistId,
}: PartialPredictiveSearchResult<'queries', never> & {
  queriesDatalistId: string;
}) {
  if (!queries.length) return null;

  return (
    <datalist id={queriesDatalistId}>
      {queries.map((suggestion) => {
        if (!suggestion) return null;

        return <option key={suggestion.text} value={suggestion.text} />;
      })}
    </datalist>
  );
}

function SearchResultsPredictiveEmpty({
  term,
}: {
  term: React.MutableRefObject<string>;
}) {
  if (!term.current) {
    return null;
  }

  return (
    <p>
      No results found for <q>{term.current}</q>
    </p>
  );
}

/**
 * Hook that returns the predictive search results and fetcher and input ref.
 * @example
 * '''ts
 * const { items, total, inputRef, term, fetcher } = usePredictiveSearch();
 * '''
 **/
function usePredictiveSearch(): UsePredictiveSearchReturn {
  const fetcher = useFetcher<PredictiveSearchReturn>({key: 'search'});
  const term = useRef<string>('');
  const inputRef = useRef<HTMLInputElement | null>(null);

  if (fetcher?.state === 'loading') {
    term.current = String(fetcher.formData?.get('q') || '');
  }

  // capture the search input element as a ref
  useEffect(() => {
    if (!inputRef.current) {
      inputRef.current = document.querySelector('input[type="search"]');
    }
  }, []);

  const {items, total} =
    fetcher?.data?.result ?? getEmptyPredictiveSearchResult();

  return {items, total, inputRef, term, fetcher};
}
</file>

<file path="app/components/sections/Intro.tsx">
import { KprButton } from "../KprButton";

const Intro = () => {
    return (
        <section className="entrance-message">
            <div className="h-full col-center gap-10">
                <img src="/images/kpr-logo.png" alt="logo" className="entrance-logo"/>
                <div className="text-wrapper">
                    <h3 className="gradient-title">
                    THE EVOLUTION OF MODERN BILLIARDS
                    </h3>
                </div>
                <div className="flex-center gap-10">
                    {/* <KprButton variant="primary">Traditional</KprButton>
                    <KprButton variant="secondary">Hybrid</KprButton>
                    <KprButton variant="primary">Modern</KprButton> */}
                    <img src="/images/ps-logo.svg" alt="ps" className="md:w-32 w-20" />
                    <img src="/images/x-logo.svg" alt="ps" className="md:w-58 w-40" />
                    
                </div>
            </div>
        </section>
    )
}

export default Intro;
</file>

<file path="app/components/sections/TraditionalConcept.tsx">
import gsap from "gsap"
import { useGSAP } from "@gsap/react"
import { ScrollTrigger } from "gsap/ScrollTrigger"

// Register ScrollTrigger plugin
gsap.registerPlugin(ScrollTrigger);

const TraditionalConcept = () => {
  useGSAP(() => {
    gsap.set('.traditional-concept', { marginTop: '-80vh' });

    gsap.timeline({
      scrollTrigger: {
        trigger: '.traditional-concept',
        start: 'top 90%',
        end: '10% center',
        scrub: 2,
      }
    }).to('.traditional-video', { opacity: 0, duration: 1, ease: 'power1.inOut' });

    gsap.to('.traditional-concept .img-box', {
      scrollTrigger: {
        trigger: '.traditional-concept',
        start: 'top center',
        end: '80% center',
        scrub: 2
      }, y: -300, duration: 1, ease: 'power1.inOut'
    }, '<')
  }) 

  return (
    <section className="traditional-concept">   
      <div className="max-w-lg traditional-concept-content">
        <h1 className="font-bold text-size-10 bg-gradient-to-r from-white/20 via-white/80 to-white/20 bg-clip-text text-transparent">TRADITIONAL CUES</h1>
        {/* <h2>Jason wants an easy life, but things just keep getting harder.</h2> */}
        <p>Jason grew up around grifters and crooks. After a stint in the Army trying to shake off his troubled teens, he found himself in the Keys doing what he knows best, working for local drug runners. It might be time to try something new.</p>

        <div className="traditional-concept-2">
          <img src="/images/kpr-tradition-2.png" alt="traditional-concept-2" />
        </div>
      </div>

      <div className="space-y-5 mt-96 img-box">
        <div className="traditional-concept-1">
          <img src="/images/kpr-tradition-3.jpg" alt="traditional-concept-1" />
        </div>
        <div className="traditional-concept-3">
          <img src="/images/kpr-tradition-1.jpg" alt="traditional-concept-3" />
        </div>
      </div>
    </section>
  )
}

export default TraditionalConcept
</file>

<file path="app/constants/index.js">
import { useMediaQuery } from "react-responsive";

export const useMaskSettings = () => {
  const isMobile = useMediaQuery({ maxWidth: 768 });
  const isTablet = useMediaQuery({ minWidth: 769, maxWidth: 1024 });

  if (isMobile) {
    return {
      initialMaskPos: "50% -1500vh",
      initialMaskSize: "3100% 3100%",
      maskPos: "50% 7vh",
      maskSize: "50% 50%",
    };
  }

  if (isTablet) {
    return {
      initialMaskPos: "50% -1700vh",
      initialMaskSize: "3500% 3500%",
      maskPos: "50% 17vh",
      maskSize: "30% 30%",
    };
  }

  return {
    initialMaskPos: "50% 22.3%",
    initialMaskSize: "4000% 4000%",
    maskPos: "50% 22.3%", // Đo từ khoảng cách 50% theo chiều ngang và 22% theo chiều dọc của container
    maskSize: "17% 17%",
  };
};
</file>

<file path="app/entry.client.tsx">
import {HydratedRouter} from 'react-router/dom';
import {startTransition, StrictMode} from 'react';
import {hydrateRoot} from 'react-dom/client';

if (!window.location.origin.includes('webcache.googleusercontent.com')) {
  startTransition(() => {
    hydrateRoot(
      document,
      <StrictMode>
        <HydratedRouter />
      </StrictMode>,
    );
  });
}
</file>

<file path="app/entry.server.tsx">
import type {AppLoadContext} from '@shopify/remix-oxygen';
import {ServerRouter} from 'react-router';
import {isbot} from 'isbot';
import {renderToReadableStream} from 'react-dom/server';
import {createContentSecurityPolicy} from '@shopify/hydrogen';
import type {EntryContext} from 'react-router';

export default async function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  reactRouterContext: EntryContext,
  context: AppLoadContext,
) {
  const {nonce, header, NonceProvider} = createContentSecurityPolicy({
    shop: {
      checkoutDomain: context.env.PUBLIC_CHECKOUT_DOMAIN,
      storeDomain: context.env.PUBLIC_STORE_DOMAIN,
    },
  });

  const body = await renderToReadableStream(
    <NonceProvider>
      <ServerRouter
        context={reactRouterContext}
        url={request.url}
        nonce={nonce}
      />
    </NonceProvider>,
    {
      nonce,
      signal: request.signal,
      onError(error) {
        console.error(error);
        responseStatusCode = 500;
      },
    },
  );

  if (isbot(request.headers.get('user-agent'))) {
    await body.allReady;
  }

  responseHeaders.set('Content-Type', 'text/html');
  responseHeaders.set('Content-Security-Policy', header);

  return new Response(body, {
    headers: responseHeaders,
    status: responseStatusCode,
  });
}
</file>

<file path="app/graphql/customer-account/CustomerAddressMutations.ts">
// NOTE: https://shopify.dev/docs/api/customer/latest/mutations/customerAddressUpdate
export const UPDATE_ADDRESS_MUTATION = `#graphql
  mutation customerAddressUpdate(
    $address: CustomerAddressInput!
    $addressId: ID!
    $defaultAddress: Boolean
 ) {
    customerAddressUpdate(
      address: $address
      addressId: $addressId
      defaultAddress: $defaultAddress
    ) {
      customerAddress {
        id
      }
      userErrors {
        code
        field
        message
      }
    }
  }
` as const;

// NOTE: https://shopify.dev/docs/api/customer/latest/mutations/customerAddressDelete
export const DELETE_ADDRESS_MUTATION = `#graphql
  mutation customerAddressDelete(
    $addressId: ID!,
  ) {
    customerAddressDelete(addressId: $addressId) {
      deletedAddressId
      userErrors {
        code
        field
        message
      }
    }
  }
` as const;

// NOTE: https://shopify.dev/docs/api/customer/latest/mutations/customerAddressCreate
export const CREATE_ADDRESS_MUTATION = `#graphql
  mutation customerAddressCreate(
    $address: CustomerAddressInput!
    $defaultAddress: Boolean
  ) {
    customerAddressCreate(
      address: $address
      defaultAddress: $defaultAddress
    ) {
      customerAddress {
        id
      }
      userErrors {
        code
        field
        message
      }
    }
  }
` as const;
</file>

<file path="app/graphql/customer-account/CustomerDetailsQuery.ts">
// NOTE: https://shopify.dev/docs/api/customer/latest/objects/Customer
export const CUSTOMER_FRAGMENT = `#graphql
  fragment Customer on Customer {
    id
    firstName
    lastName
    defaultAddress {
      ...Address
    }
    addresses(first: 6) {
      nodes {
        ...Address
      }
    }
  }
  fragment Address on CustomerAddress {
    id
    formatted
    firstName
    lastName
    company
    address1
    address2
    territoryCode
    zoneCode
    city
    zip
    phoneNumber
  }
` as const;

// NOTE: https://shopify.dev/docs/api/customer/latest/queries/customer
export const CUSTOMER_DETAILS_QUERY = `#graphql
  query CustomerDetails {
    customer {
      ...Customer
    }
  }
  ${CUSTOMER_FRAGMENT}
` as const;
</file>

<file path="app/graphql/customer-account/CustomerOrderQuery.ts">
// NOTE: https://shopify.dev/docs/api/customer/latest/queries/order
export const CUSTOMER_ORDER_QUERY = `#graphql
  fragment OrderMoney on MoneyV2 {
    amount
    currencyCode
  }
  fragment DiscountApplication on DiscountApplication {
    value {
      __typename
      ... on MoneyV2 {
        ...OrderMoney
      }
      ... on PricingPercentageValue {
        percentage
      }
    }
  }
  fragment OrderLineItemFull on LineItem {
    id
    title
    quantity
    price {
      ...OrderMoney
    }
    discountAllocations {
      allocatedAmount {
        ...OrderMoney
      }
      discountApplication {
        ...DiscountApplication
      }
    }
    totalDiscount {
      ...OrderMoney
    }
    image {
      altText
      height
      url
      id
      width
    }
    variantTitle
  }
  fragment Order on Order {
    id
    name
    statusPageUrl
    processedAt
    fulfillments(first: 1) {
      nodes {
        status
      }
    }
    totalTax {
      ...OrderMoney
    }
    totalPrice {
      ...OrderMoney
    }
    subtotal {
      ...OrderMoney
    }
    shippingAddress {
      name
      formatted(withName: true)
      formattedArea
    }
    discountApplications(first: 100) {
      nodes {
        ...DiscountApplication
      }
    }
    lineItems(first: 100) {
      nodes {
        ...OrderLineItemFull
      }
    }
  }
  query Order($orderId: ID!) {
    order(id: $orderId) {
      ... on Order {
        ...Order
      }
    }
  }
` as const;
</file>

<file path="app/graphql/customer-account/CustomerOrdersQuery.ts">
// https://shopify.dev/docs/api/customer/latest/objects/Order
export const ORDER_ITEM_FRAGMENT = `#graphql
  fragment OrderItem on Order {
    totalPrice {
      amount
      currencyCode
    }
    financialStatus
    fulfillments(first: 1) {
      nodes {
        status
      }
    }
    id
    number
    processedAt
  }
` as const;

// https://shopify.dev/docs/api/customer/latest/objects/Customer
export const CUSTOMER_ORDERS_FRAGMENT = `#graphql
  fragment CustomerOrders on Customer {
    orders(
      sortKey: PROCESSED_AT,
      reverse: true,
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor
    ) {
      nodes {
        ...OrderItem
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
        endCursor
        startCursor
      }
    }
  }
  ${ORDER_ITEM_FRAGMENT}
` as const;

// https://shopify.dev/docs/api/customer/latest/queries/customer
export const CUSTOMER_ORDERS_QUERY = `#graphql
  ${CUSTOMER_ORDERS_FRAGMENT}
  query CustomerOrders(
    $endCursor: String
    $first: Int
    $last: Int
    $startCursor: String
  ) {
    customer {
      ...CustomerOrders
    }
  }
` as const;
</file>

<file path="app/graphql/customer-account/CustomerUpdateMutation.ts">
export const CUSTOMER_UPDATE_MUTATION = `#graphql
  # https://shopify.dev/docs/api/customer/latest/mutations/customerUpdate
  mutation customerUpdate(
    $customer: CustomerUpdateInput!
  ){
    customerUpdate(input: $customer) {
      customer {
        firstName
        lastName
        emailAddress {
          emailAddress
        }
        phoneNumber {
          phoneNumber
        }
      }
      userErrors {
        code
        field
        message
      }
    }
  }
` as const;
</file>

<file path="app/lib/context.ts">
import {createHydrogenContext} from '@shopify/hydrogen';
import {AppSession} from '~/lib/session';
import {CART_QUERY_FRAGMENT} from '~/lib/fragments';
import {getLocaleFromRequest} from '~/lib/i18n';

/**
 * The context implementation is separate from server.ts
 * so that type can be extracted for AppLoadContext
 * */
export async function createAppLoadContext(
  request: Request,
  env: Env,
  executionContext: ExecutionContext,
) {
  /**
   * Open a cache instance in the worker and a custom session instance.
   */
  if (!env?.SESSION_SECRET) {
    throw new Error('SESSION_SECRET environment variable is not set');
  }

  const waitUntil = executionContext.waitUntil.bind(executionContext);
  const [cache, session] = await Promise.all([
    caches.open('hydrogen'),
    AppSession.init(request, [env.SESSION_SECRET]),
  ]);

  const hydrogenContext = createHydrogenContext({
    env,
    request,
    cache,
    waitUntil,
    session,
    i18n: getLocaleFromRequest(request),
    cart: {
      queryFragment: CART_QUERY_FRAGMENT,
    },
  });

  return {
    ...hydrogenContext,
    // declare additional Remix loader context
  };
}
</file>

<file path="app/lib/fragments.ts">
// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/cart
export const CART_QUERY_FRAGMENT = `#graphql
  fragment Money on MoneyV2 {
    currencyCode
    amount
  }
  fragment CartLine on CartLine {
    id
    quantity
    attributes {
      key
      value
    }
    cost {
      totalAmount {
        ...Money
      }
      amountPerQuantity {
        ...Money
      }
      compareAtAmountPerQuantity {
        ...Money
      }
    }
    merchandise {
      ... on ProductVariant {
        id
        availableForSale
        compareAtPrice {
          ...Money
        }
        price {
          ...Money
        }
        requiresShipping
        title
        image {
          id
          url
          altText
          width
          height

        }
        product {
          handle
          title
          id
          vendor
        }
        selectedOptions {
          name
          value
        }
      }
    }
  }
  fragment CartLineComponent on ComponentizableCartLine {
    id
    quantity
    attributes {
      key
      value
    }
    cost {
      totalAmount {
        ...Money
      }
      amountPerQuantity {
        ...Money
      }
      compareAtAmountPerQuantity {
        ...Money
      }
    }
    merchandise {
      ... on ProductVariant {
        id
        availableForSale
        compareAtPrice {
          ...Money
        }
        price {
          ...Money
        }
        requiresShipping
        title
        image {
          id
          url
          altText
          width
          height
        }
        product {
          handle
          title
          id
          vendor
        }
        selectedOptions {
          name
          value
        }
      }
    }
  }
  fragment CartApiQuery on Cart {
    updatedAt
    id
    appliedGiftCards {
      lastCharacters
      amountUsed {
        ...Money
      }
    }
    checkoutUrl
    totalQuantity
    buyerIdentity {
      countryCode
      customer {
        id
        email
        firstName
        lastName
        displayName
      }
      email
      phone
    }
    lines(first: $numCartLines) {
      nodes {
        ...CartLine
      }
      nodes {
        ...CartLineComponent
      }
    }
    cost {
      subtotalAmount {
        ...Money
      }
      totalAmount {
        ...Money
      }
      totalDutyAmount {
        ...Money
      }
      totalTaxAmount {
        ...Money
      }
    }
    note
    attributes {
      key
      value
    }
    discountCodes {
      code
      applicable
    }
  }
` as const;

const MENU_FRAGMENT = `#graphql
  fragment MenuItem on MenuItem {
    id
    resourceId
    tags
    title
    type
    url
  }
  fragment ChildMenuItem on MenuItem {
    ...MenuItem
  }
  fragment ParentMenuItem on MenuItem {
    ...MenuItem
    items {
      ...ChildMenuItem
    }
  }
  fragment Menu on Menu {
    id
    items {
      ...ParentMenuItem
    }
  }
` as const;

export const HEADER_QUERY = `#graphql
  fragment Shop on Shop {
    id
    name
    description
    primaryDomain {
      url
    }
    brand {
      logo {
        image {
          url
        }
      }
    }
  }
  query Header(
    $country: CountryCode
    $headerMenuHandle: String!
    $language: LanguageCode
  ) @inContext(language: $language, country: $country) {
    shop {
      ...Shop
    }
    menu(handle: $headerMenuHandle) {
      ...Menu
    }
  }
  ${MENU_FRAGMENT}
` as const;

export const FOOTER_QUERY = `#graphql
  query Footer(
    $country: CountryCode
    $footerMenuHandle: String!
    $language: LanguageCode
  ) @inContext(language: $language, country: $country) {
    menu(handle: $footerMenuHandle) {
      ...Menu
    }
  }
  ${MENU_FRAGMENT}
` as const;
</file>

<file path="app/lib/i18n.ts">
import type {I18nBase} from '@shopify/hydrogen';

export interface I18nLocale extends I18nBase {
  pathPrefix: string;
}

export function getLocaleFromRequest(request: Request): I18nLocale {
  const url = new URL(request.url);
  const firstPathPart = url.pathname.split('/')[1]?.toUpperCase() ?? '';

  type I18nFromUrl = [I18nLocale['language'], I18nLocale['country']];

  let pathPrefix = '';
  let [language, country]: I18nFromUrl = ['EN', 'US'];

  if (/^[A-Z]{2}-[A-Z]{2}$/i.test(firstPathPart)) {
    pathPrefix = '/' + firstPathPart;
    [language, country] = firstPathPart.split('-') as I18nFromUrl;
  }

  return {language, country, pathPrefix};
}
</file>

<file path="app/lib/redirect.ts">
import {redirect} from '@shopify/remix-oxygen';

export function redirectIfHandleIsLocalized(
  request: Request,
  ...localizedResources: Array<{
    handle: string;
    data: {handle: string} & unknown;
  }>
) {
  const url = new URL(request.url);
  let shouldRedirect = false;

  localizedResources.forEach(({handle, data}) => {
    if (handle !== data.handle) {
      url.pathname = url.pathname.replace(handle, data.handle);
      shouldRedirect = true;
    }
  });

  if (shouldRedirect) {
    throw redirect(url.toString());
  }
}
</file>

<file path="app/lib/search.ts">
import type {
  PredictiveSearchQuery,
  RegularSearchQuery,
} from 'storefrontapi.generated';

type ResultWithItems<Type extends 'predictive' | 'regular', Items> = {
  type: Type;
  term: string;
  error?: string;
  result: {total: number; items: Items};
};

export type RegularSearchReturn = ResultWithItems<
  'regular',
  RegularSearchQuery
>;
export type PredictiveSearchReturn = ResultWithItems<
  'predictive',
  NonNullable<PredictiveSearchQuery['predictiveSearch']>
>;

/**
 * Returns the empty state of a predictive search result to reset the search state.
 */
export function getEmptyPredictiveSearchResult(): PredictiveSearchReturn['result'] {
  return {
    total: 0,
    items: {
      articles: [],
      collections: [],
      products: [],
      pages: [],
      queries: [],
    },
  };
}

interface UrlWithTrackingParams {
  /** The base URL to which the tracking parameters will be appended. */
  baseUrl: string;
  /** The trackingParams returned by the Storefront API. */
  trackingParams?: string | null;
  /** Any additional query parameters to be appended to the URL. */
  params?: Record<string, string>;
  /** The search term to be appended to the URL. */
  term: string;
}

/**
 * A utility function that appends tracking parameters to a URL. Tracking parameters are
 * used internally by Shopify to enhance search results and admin dashboards.
 * @example
 * ```ts
 * const baseUrl = 'www.example.com';
 * const trackingParams = 'utm_source=shopify&utm_medium=shopify_app&utm_campaign=storefront';
 * const params = { foo: 'bar' };
 * const term = 'search term';
 * const url = urlWithTrackingParams({ baseUrl, trackingParams, params, term });
 * console.log(url);
 * // Output: 'https://www.example.com?foo=bar&q=search%20term&utm_source=shopify&utm_medium=shopify_app&utm_campaign=storefront'
 * ```
 */
export function urlWithTrackingParams({
  baseUrl,
  trackingParams,
  params: extraParams,
  term,
}: UrlWithTrackingParams) {
  let search = new URLSearchParams({
    ...extraParams,
    q: encodeURIComponent(term),
  }).toString();

  if (trackingParams) {
    search = `${search}&${trackingParams}`;
  }

  return `${baseUrl}?${search}`;
}
</file>

<file path="app/lib/session.ts">
import type {HydrogenSession} from '@shopify/hydrogen';
import {
  createCookieSessionStorage,
  type SessionStorage,
  type Session,
} from '@shopify/remix-oxygen';

/**
 * This is a custom session implementation for your Hydrogen shop.
 * Feel free to customize it to your needs, add helper methods, or
 * swap out the cookie-based implementation with something else!
 */
export class AppSession implements HydrogenSession {
  public isPending = false;

  #sessionStorage;
  #session;

  constructor(sessionStorage: SessionStorage, session: Session) {
    this.#sessionStorage = sessionStorage;
    this.#session = session;
  }

  static async init(request: Request, secrets: string[]) {
    const storage = createCookieSessionStorage({
      cookie: {
        name: 'session',
        httpOnly: true,
        path: '/',
        sameSite: 'lax',
        secrets,
      },
    });

    const session = await storage
      .getSession(request.headers.get('Cookie'))
      .catch(() => storage.getSession());

    return new this(storage, session);
  }

  get has() {
    return this.#session.has;
  }

  get get() {
    return this.#session.get;
  }

  get flash() {
    return this.#session.flash;
  }

  get unset() {
    this.isPending = true;
    return this.#session.unset;
  }

  get set() {
    this.isPending = true;
    return this.#session.set;
  }

  destroy() {
    return this.#sessionStorage.destroySession(this.#session);
  }

  commit() {
    this.isPending = false;
    return this.#sessionStorage.commitSession(this.#session);
  }
}
</file>

<file path="app/lib/variants.ts">
import {useLocation} from 'react-router';
import type {SelectedOption} from '@shopify/hydrogen/storefront-api-types';
import {useMemo} from 'react';

export function useVariantUrl(
  handle: string,
  selectedOptions?: SelectedOption[],
) {
  const {pathname} = useLocation();

  return useMemo(() => {
    return getVariantUrl({
      handle,
      pathname,
      searchParams: new URLSearchParams(),
      selectedOptions,
    });
  }, [handle, selectedOptions, pathname]);
}

export function getVariantUrl({
  handle,
  pathname,
  searchParams,
  selectedOptions,
}: {
  handle: string;
  pathname: string;
  searchParams: URLSearchParams;
  selectedOptions?: SelectedOption[];
}) {
  const match = /(\/[a-zA-Z]{2}-[a-zA-Z]{2}\/)/g.exec(pathname);
  const isLocalePathname = match && match.length > 0;

  const path = isLocalePathname
    ? `${match![0]}products/${handle}`
    : `/products/${handle}`;

  selectedOptions?.forEach((option) => {
    searchParams.set(option.name, option.value);
  });

  const searchString = searchParams.toString();

  return path + (searchString ? '?' + searchParams.toString() : '');
}
</file>

<file path="app/routes.ts">
import {flatRoutes} from '@react-router/fs-routes';
import {type RouteConfig} from '@react-router/dev/routes';
import {hydrogenRoutes} from '@shopify/hydrogen';

export default hydrogenRoutes([
  ...(await flatRoutes()),
  // Manual route definitions can be added to this array, in addition to or instead of using the `flatRoutes` file-based routing convention.
  // See https://remix.run/docs/en/main/guides/routing for more details
]) satisfies RouteConfig;
</file>

<file path="app/routes/($locale).[sitemap.xml].tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {getSitemapIndex} from '@shopify/hydrogen';

export async function loader({
  request,
  context: {storefront},
}: LoaderFunctionArgs) {
  const response = await getSitemapIndex({
    storefront,
    request,
  });

  response.headers.set('Cache-Control', `max-age=${60 * 60 * 24}`);

  return response;
}
</file>

<file path="app/routes/($locale).$.tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({request}: LoaderFunctionArgs) {
  throw new Response(`${new URL(request.url).pathname} not found`, {
    status: 404,
  });
}

export default function CatchAllPage() {
  return null;
}
</file>

<file path="app/routes/($locale).account_.authorize.tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({context}: LoaderFunctionArgs) {
  return context.customerAccount.authorize();
}
</file>

<file path="app/routes/($locale).account_.login.tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({request, context}: LoaderFunctionArgs) {
  return context.customerAccount.login();
}
</file>

<file path="app/routes/($locale).account_.logout.tsx">
import {redirect, type ActionFunctionArgs} from '@shopify/remix-oxygen';

// if we don't implement this, /account/logout will get caught by account.$.tsx to do login
export async function loader() {
  return redirect('/');
}

export async function action({context}: ActionFunctionArgs) {
  return context.customerAccount.logout();
}
</file>

<file path="app/routes/($locale).account._index.tsx">
import {redirect} from '@shopify/remix-oxygen';

export async function loader() {
  return redirect('/account/orders');
}
</file>

<file path="app/routes/($locale).account.$.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

// fallback wild card for all unauthenticated routes in account section
export async function loader({context}: LoaderFunctionArgs) {
  await context.customerAccount.handleAuthStatus();

  return redirect('/account');
}
</file>

<file path="app/routes/($locale).account.addresses.tsx">
import type {CustomerAddressInput} from '@shopify/hydrogen/customer-account-api-types';
import type {
  AddressFragment,
  CustomerFragment,
} from 'customer-accountapi.generated';
import {
  data,
  type ActionFunctionArgs,
  type LoaderFunctionArgs,
} from '@shopify/remix-oxygen';
import {
  Form,
  useActionData,
  useNavigation,
  useOutletContext,
  type MetaFunction,
  type Fetcher,
} from 'react-router';
import {
  UPDATE_ADDRESS_MUTATION,
  DELETE_ADDRESS_MUTATION,
  CREATE_ADDRESS_MUTATION,
} from '~/graphql/customer-account/CustomerAddressMutations';

export type ActionResponse = {
  addressId?: string | null;
  createdAddress?: AddressFragment;
  defaultAddress?: string | null;
  deletedAddress?: string | null;
  error: Record<AddressFragment['id'], string> | null;
  updatedAddress?: AddressFragment;
};

export const meta: MetaFunction = () => {
  return [{title: 'Addresses'}];
};

export async function loader({context}: LoaderFunctionArgs) {
  await context.customerAccount.handleAuthStatus();

  return {};
}

export async function action({request, context}: ActionFunctionArgs) {
  const {customerAccount} = context;

  try {
    const form = await request.formData();

    const addressId = form.has('addressId')
      ? String(form.get('addressId'))
      : null;
    if (!addressId) {
      throw new Error('You must provide an address id.');
    }

    // this will ensure redirecting to login never happen for mutatation
    const isLoggedIn = await customerAccount.isLoggedIn();
    if (!isLoggedIn) {
      return data(
        {error: {[addressId]: 'Unauthorized'}},
        {
          status: 401,
        },
      );
    }

    const defaultAddress = form.has('defaultAddress')
      ? String(form.get('defaultAddress')) === 'on'
      : false;
    const address: CustomerAddressInput = {};
    const keys: (keyof CustomerAddressInput)[] = [
      'address1',
      'address2',
      'city',
      'company',
      'territoryCode',
      'firstName',
      'lastName',
      'phoneNumber',
      'zoneCode',
      'zip',
    ];

    for (const key of keys) {
      const value = form.get(key);
      if (typeof value === 'string') {
        address[key] = value;
      }
    }

    switch (request.method) {
      case 'POST': {
        // handle new address creation
        try {
          const {data, errors} = await customerAccount.mutate(
            CREATE_ADDRESS_MUTATION,
            {
              variables: {address, defaultAddress},
            },
          );

          if (errors?.length) {
            throw new Error(errors[0].message);
          }

          if (data?.customerAddressCreate?.userErrors?.length) {
            throw new Error(data?.customerAddressCreate?.userErrors[0].message);
          }

          if (!data?.customerAddressCreate?.customerAddress) {
            throw new Error('Customer address create failed.');
          }

          return {
            error: null,
            createdAddress: data?.customerAddressCreate?.customerAddress,
            defaultAddress,
          };
        } catch (error: unknown) {
          if (error instanceof Error) {
            return data(
              {error: {[addressId]: error.message}},
              {
                status: 400,
              },
            );
          }
          return data(
            {error: {[addressId]: error}},
            {
              status: 400,
            },
          );
        }
      }

      case 'PUT': {
        // handle address updates
        try {
          const {data, errors} = await customerAccount.mutate(
            UPDATE_ADDRESS_MUTATION,
            {
              variables: {
                address,
                addressId: decodeURIComponent(addressId),
                defaultAddress,
              },
            },
          );

          if (errors?.length) {
            throw new Error(errors[0].message);
          }

          if (data?.customerAddressUpdate?.userErrors?.length) {
            throw new Error(data?.customerAddressUpdate?.userErrors[0].message);
          }

          if (!data?.customerAddressUpdate?.customerAddress) {
            throw new Error('Customer address update failed.');
          }

          return {
            error: null,
            updatedAddress: address,
            defaultAddress,
          };
        } catch (error: unknown) {
          if (error instanceof Error) {
            return data(
              {error: {[addressId]: error.message}},
              {
                status: 400,
              },
            );
          }
          return data(
            {error: {[addressId]: error}},
            {
              status: 400,
            },
          );
        }
      }

      case 'DELETE': {
        // handles address deletion
        try {
          const {data, errors} = await customerAccount.mutate(
            DELETE_ADDRESS_MUTATION,
            {
              variables: {addressId: decodeURIComponent(addressId)},
            },
          );

          if (errors?.length) {
            throw new Error(errors[0].message);
          }

          if (data?.customerAddressDelete?.userErrors?.length) {
            throw new Error(data?.customerAddressDelete?.userErrors[0].message);
          }

          if (!data?.customerAddressDelete?.deletedAddressId) {
            throw new Error('Customer address delete failed.');
          }

          return {error: null, deletedAddress: addressId};
        } catch (error: unknown) {
          if (error instanceof Error) {
            return data(
              {error: {[addressId]: error.message}},
              {
                status: 400,
              },
            );
          }
          return data(
            {error: {[addressId]: error}},
            {
              status: 400,
            },
          );
        }
      }

      default: {
        return data(
          {error: {[addressId]: 'Method not allowed'}},
          {
            status: 405,
          },
        );
      }
    }
  } catch (error: unknown) {
    if (error instanceof Error) {
      return data(
        {error: error.message},
        {
          status: 400,
        },
      );
    }
    return data(
      {error},
      {
        status: 400,
      },
    );
  }
}

export default function Addresses() {
  const {customer} = useOutletContext<{customer: CustomerFragment}>();
  const {defaultAddress, addresses} = customer;

  return (
    <div className="account-addresses">
      <h2>Addresses</h2>
      <br />
      {!addresses.nodes.length ? (
        <p>You have no addresses saved.</p>
      ) : (
        <div>
          <div>
            <legend>Create address</legend>
            <NewAddressForm />
          </div>
          <br />
          <hr />
          <br />
          <ExistingAddresses
            addresses={addresses}
            defaultAddress={defaultAddress}
          />
        </div>
      )}
    </div>
  );
}

function NewAddressForm() {
  const newAddress = {
    address1: '',
    address2: '',
    city: '',
    company: '',
    territoryCode: '',
    firstName: '',
    id: 'new',
    lastName: '',
    phoneNumber: '',
    zoneCode: '',
    zip: '',
  } as CustomerAddressInput;

  return (
    <AddressForm
      addressId={'NEW_ADDRESS_ID'}
      address={newAddress}
      defaultAddress={null}
    >
      {({stateForMethod}) => (
        <div>
          <button
            disabled={stateForMethod('POST') !== 'idle'}
            formMethod="POST"
            type="submit"
          >
            {stateForMethod('POST') !== 'idle' ? 'Creating' : 'Create'}
          </button>
        </div>
      )}
    </AddressForm>
  );
}

function ExistingAddresses({
  addresses,
  defaultAddress,
}: Pick<CustomerFragment, 'addresses' | 'defaultAddress'>) {
  return (
    <div>
      <legend>Existing addresses</legend>
      {addresses.nodes.map((address) => (
        <AddressForm
          key={address.id}
          addressId={address.id}
          address={address}
          defaultAddress={defaultAddress}
        >
          {({stateForMethod}) => (
            <div>
              <button
                disabled={stateForMethod('PUT') !== 'idle'}
                formMethod="PUT"
                type="submit"
              >
                {stateForMethod('PUT') !== 'idle' ? 'Saving' : 'Save'}
              </button>
              <button
                disabled={stateForMethod('DELETE') !== 'idle'}
                formMethod="DELETE"
                type="submit"
              >
                {stateForMethod('DELETE') !== 'idle' ? 'Deleting' : 'Delete'}
              </button>
            </div>
          )}
        </AddressForm>
      ))}
    </div>
  );
}

export function AddressForm({
  addressId,
  address,
  defaultAddress,
  children,
}: {
  addressId: AddressFragment['id'];
  address: CustomerAddressInput;
  defaultAddress: CustomerFragment['defaultAddress'];
  children: (props: {
    stateForMethod: (method: 'PUT' | 'POST' | 'DELETE') => Fetcher['state'];
  }) => React.ReactNode;
}) {
  const {state, formMethod} = useNavigation();
  const action = useActionData<ActionResponse>();
  const error = action?.error?.[addressId];
  const isDefaultAddress = defaultAddress?.id === addressId;
  return (
    <Form id={addressId}>
      <fieldset>
        <input type="hidden" name="addressId" defaultValue={addressId} />
        <label htmlFor="firstName">First name*</label>
        <input
          aria-label="First name"
          autoComplete="given-name"
          defaultValue={address?.firstName ?? ''}
          id="firstName"
          name="firstName"
          placeholder="First name"
          required
          type="text"
        />
        <label htmlFor="lastName">Last name*</label>
        <input
          aria-label="Last name"
          autoComplete="family-name"
          defaultValue={address?.lastName ?? ''}
          id="lastName"
          name="lastName"
          placeholder="Last name"
          required
          type="text"
        />
        <label htmlFor="company">Company</label>
        <input
          aria-label="Company"
          autoComplete="organization"
          defaultValue={address?.company ?? ''}
          id="company"
          name="company"
          placeholder="Company"
          type="text"
        />
        <label htmlFor="address1">Address line*</label>
        <input
          aria-label="Address line 1"
          autoComplete="address-line1"
          defaultValue={address?.address1 ?? ''}
          id="address1"
          name="address1"
          placeholder="Address line 1*"
          required
          type="text"
        />
        <label htmlFor="address2">Address line 2</label>
        <input
          aria-label="Address line 2"
          autoComplete="address-line2"
          defaultValue={address?.address2 ?? ''}
          id="address2"
          name="address2"
          placeholder="Address line 2"
          type="text"
        />
        <label htmlFor="city">City*</label>
        <input
          aria-label="City"
          autoComplete="address-level2"
          defaultValue={address?.city ?? ''}
          id="city"
          name="city"
          placeholder="City"
          required
          type="text"
        />
        <label htmlFor="zoneCode">State / Province*</label>
        <input
          aria-label="State/Province"
          autoComplete="address-level1"
          defaultValue={address?.zoneCode ?? ''}
          id="zoneCode"
          name="zoneCode"
          placeholder="State / Province"
          required
          type="text"
        />
        <label htmlFor="zip">Zip / Postal Code*</label>
        <input
          aria-label="Zip"
          autoComplete="postal-code"
          defaultValue={address?.zip ?? ''}
          id="zip"
          name="zip"
          placeholder="Zip / Postal Code"
          required
          type="text"
        />
        <label htmlFor="territoryCode">Country Code*</label>
        <input
          aria-label="territoryCode"
          autoComplete="country"
          defaultValue={address?.territoryCode ?? ''}
          id="territoryCode"
          name="territoryCode"
          placeholder="Country"
          required
          type="text"
          maxLength={2}
        />
        <label htmlFor="phoneNumber">Phone</label>
        <input
          aria-label="Phone Number"
          autoComplete="tel"
          defaultValue={address?.phoneNumber ?? ''}
          id="phoneNumber"
          name="phoneNumber"
          placeholder="+16135551111"
          pattern="^\+?[1-9]\d{3,14}$"
          type="tel"
        />
        <div>
          <input
            defaultChecked={isDefaultAddress}
            id="defaultAddress"
            name="defaultAddress"
            type="checkbox"
          />
          <label htmlFor="defaultAddress">Set as default address</label>
        </div>
        {error ? (
          <p>
            <mark>
              <small>{error}</small>
            </mark>
          </p>
        ) : (
          <br />
        )}
        {children({
          stateForMethod: (method) => (formMethod === method ? state : 'idle'),
        })}
      </fieldset>
    </Form>
  );
}
</file>

<file path="app/routes/($locale).account.orders._index.tsx">
import {Link, useLoaderData, type MetaFunction} from 'react-router';
import {
  Money,
  getPaginationVariables,
  flattenConnection,
} from '@shopify/hydrogen';
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {CUSTOMER_ORDERS_QUERY} from '~/graphql/customer-account/CustomerOrdersQuery';
import type {
  CustomerOrdersFragment,
  OrderItemFragment,
} from 'customer-accountapi.generated';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';

export const meta: MetaFunction = () => {
  return [{title: 'Orders'}];
};

export async function loader({request, context}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 20,
  });

  const {data, errors} = await context.customerAccount.query(
    CUSTOMER_ORDERS_QUERY,
    {
      variables: {
        ...paginationVariables,
      },
    },
  );

  if (errors?.length || !data?.customer) {
    throw Error('Customer orders not found');
  }

  return {customer: data.customer};
}

export default function Orders() {
  const {customer} = useLoaderData<{customer: CustomerOrdersFragment}>();
  const {orders} = customer;
  return (
    <div className="orders">
      {orders.nodes.length ? <OrdersTable orders={orders} /> : <EmptyOrders />}
    </div>
  );
}

function OrdersTable({orders}: Pick<CustomerOrdersFragment, 'orders'>) {
  return (
    <div className="acccount-orders">
      {orders?.nodes.length ? (
        <PaginatedResourceSection connection={orders}>
          {({node: order}) => <OrderItem key={order.id} order={order} />}
        </PaginatedResourceSection>
      ) : (
        <EmptyOrders />
      )}
    </div>
  );
}

function EmptyOrders() {
  return (
    <div>
      <p>You haven&apos;t placed any orders yet.</p>
      <br />
      <p>
        <Link to="/collections">Start Shopping →</Link>
      </p>
    </div>
  );
}

function OrderItem({order}: {order: OrderItemFragment}) {
  const fulfillmentStatus = flattenConnection(order.fulfillments)[0]?.status;
  return (
    <>
      <fieldset>
        <Link to={`/account/orders/${btoa(order.id)}`}>
          <strong>#{order.number}</strong>
        </Link>
        <p>{new Date(order.processedAt).toDateString()}</p>
        <p>{order.financialStatus}</p>
        {fulfillmentStatus && <p>{fulfillmentStatus}</p>}
        <Money data={order.totalPrice} />
        <Link to={`/account/orders/${btoa(order.id)}`}>View Order →</Link>
      </fieldset>
      <br />
    </>
  );
}
</file>

<file path="app/routes/($locale).account.orders.$id.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {Money, Image, flattenConnection} from '@shopify/hydrogen';
import type {OrderLineItemFullFragment} from 'customer-accountapi.generated';
import {CUSTOMER_ORDER_QUERY} from '~/graphql/customer-account/CustomerOrderQuery';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Order ${data?.order?.name}`}];
};

export async function loader({params, context}: LoaderFunctionArgs) {
  if (!params.id) {
    return redirect('/account/orders');
  }

  const orderId = atob(params.id);
  const {data, errors} = await context.customerAccount.query(
    CUSTOMER_ORDER_QUERY,
    {
      variables: {orderId},
    },
  );

  if (errors?.length || !data?.order) {
    throw new Error('Order not found');
  }

  const {order} = data;

  const lineItems = flattenConnection(order.lineItems);
  const discountApplications = flattenConnection(order.discountApplications);

  const fulfillmentStatus =
    flattenConnection(order.fulfillments)[0]?.status ?? 'N/A';

  const firstDiscount = discountApplications[0]?.value;

  const discountValue =
    firstDiscount?.__typename === 'MoneyV2' && firstDiscount;

  const discountPercentage =
    firstDiscount?.__typename === 'PricingPercentageValue' &&
    firstDiscount?.percentage;

  return {
    order,
    lineItems,
    discountValue,
    discountPercentage,
    fulfillmentStatus,
  };
}

export default function OrderRoute() {
  const {
    order,
    lineItems,
    discountValue,
    discountPercentage,
    fulfillmentStatus,
  } = useLoaderData<typeof loader>();
  return (
    <div className="account-order">
      <h2>Order {order.name}</h2>
      <p>Placed on {new Date(order.processedAt!).toDateString()}</p>
      <br />
      <div>
        <table>
          <thead>
            <tr>
              <th scope="col">Product</th>
              <th scope="col">Price</th>
              <th scope="col">Quantity</th>
              <th scope="col">Total</th>
            </tr>
          </thead>
          <tbody>
            {lineItems.map((lineItem, lineItemIndex) => (
              // eslint-disable-next-line react/no-array-index-key
              <OrderLineRow key={lineItemIndex} lineItem={lineItem} />
            ))}
          </tbody>
          <tfoot>
            {((discountValue && discountValue.amount) ||
              discountPercentage) && (
              <tr>
                <th scope="row" colSpan={3}>
                  <p>Discounts</p>
                </th>
                <th scope="row">
                  <p>Discounts</p>
                </th>
                <td>
                  {discountPercentage ? (
                    <span>-{discountPercentage}% OFF</span>
                  ) : (
                    discountValue && <Money data={discountValue!} />
                  )}
                </td>
              </tr>
            )}
            <tr>
              <th scope="row" colSpan={3}>
                <p>Subtotal</p>
              </th>
              <th scope="row">
                <p>Subtotal</p>
              </th>
              <td>
                <Money data={order.subtotal!} />
              </td>
            </tr>
            <tr>
              <th scope="row" colSpan={3}>
                Tax
              </th>
              <th scope="row">
                <p>Tax</p>
              </th>
              <td>
                <Money data={order.totalTax!} />
              </td>
            </tr>
            <tr>
              <th scope="row" colSpan={3}>
                Total
              </th>
              <th scope="row">
                <p>Total</p>
              </th>
              <td>
                <Money data={order.totalPrice!} />
              </td>
            </tr>
          </tfoot>
        </table>
        <div>
          <h3>Shipping Address</h3>
          {order?.shippingAddress ? (
            <address>
              <p>{order.shippingAddress.name}</p>
              {order.shippingAddress.formatted ? (
                <p>{order.shippingAddress.formatted}</p>
              ) : (
                ''
              )}
              {order.shippingAddress.formattedArea ? (
                <p>{order.shippingAddress.formattedArea}</p>
              ) : (
                ''
              )}
            </address>
          ) : (
            <p>No shipping address defined</p>
          )}
          <h3>Status</h3>
          <div>
            <p>{fulfillmentStatus}</p>
          </div>
        </div>
      </div>
      <br />
      <p>
        <a target="_blank" href={order.statusPageUrl} rel="noreferrer">
          View Order Status →
        </a>
      </p>
    </div>
  );
}

function OrderLineRow({lineItem}: {lineItem: OrderLineItemFullFragment}) {
  return (
    <tr key={lineItem.id}>
      <td>
        <div>
          {lineItem?.image && (
            <div>
              <Image data={lineItem.image} width={96} height={96} />
            </div>
          )}
          <div>
            <p>{lineItem.title}</p>
            <small>{lineItem.variantTitle}</small>
          </div>
        </div>
      </td>
      <td>
        <Money data={lineItem.price!} />
      </td>
      <td>{lineItem.quantity}</td>
      <td>
        <Money data={lineItem.totalDiscount!} />
      </td>
    </tr>
  );
}
</file>

<file path="app/routes/($locale).account.profile.tsx">
import type {CustomerFragment} from 'customer-accountapi.generated';
import type {CustomerUpdateInput} from '@shopify/hydrogen/customer-account-api-types';
import {CUSTOMER_UPDATE_MUTATION} from '~/graphql/customer-account/CustomerUpdateMutation';
import {
  data,
  type ActionFunctionArgs,
  type LoaderFunctionArgs,
} from '@shopify/remix-oxygen';
import {
  Form,
  useActionData,
  useNavigation,
  useOutletContext,
  type MetaFunction,
} from 'react-router';

export type ActionResponse = {
  error: string | null;
  customer: CustomerFragment | null;
};

export const meta: MetaFunction = () => {
  return [{title: 'Profile'}];
};

export async function loader({context}: LoaderFunctionArgs) {
  await context.customerAccount.handleAuthStatus();

  return {};
}

export async function action({request, context}: ActionFunctionArgs) {
  const {customerAccount} = context;

  if (request.method !== 'PUT') {
    return data({error: 'Method not allowed'}, {status: 405});
  }

  const form = await request.formData();

  try {
    const customer: CustomerUpdateInput = {};
    const validInputKeys = ['firstName', 'lastName'] as const;
    for (const [key, value] of form.entries()) {
      if (!validInputKeys.includes(key as any)) {
        continue;
      }
      if (typeof value === 'string' && value.length) {
        customer[key as (typeof validInputKeys)[number]] = value;
      }
    }

    // update customer and possibly password
    const {data, errors} = await customerAccount.mutate(
      CUSTOMER_UPDATE_MUTATION,
      {
        variables: {
          customer,
        },
      },
    );

    if (errors?.length) {
      throw new Error(errors[0].message);
    }

    if (!data?.customerUpdate?.customer) {
      throw new Error('Customer profile update failed.');
    }

    return {
      error: null,
      customer: data?.customerUpdate?.customer,
    };
  } catch (error: any) {
    return data(
      {error: error.message, customer: null},
      {
        status: 400,
      },
    );
  }
}

export default function AccountProfile() {
  const account = useOutletContext<{customer: CustomerFragment}>();
  const {state} = useNavigation();
  const action = useActionData<ActionResponse>();
  const customer = action?.customer ?? account?.customer;

  return (
    <div className="account-profile">
      <h2>My profile</h2>
      <br />
      <Form method="PUT">
        <legend>Personal information</legend>
        <fieldset>
          <label htmlFor="firstName">First name</label>
          <input
            id="firstName"
            name="firstName"
            type="text"
            autoComplete="given-name"
            placeholder="First name"
            aria-label="First name"
            defaultValue={customer.firstName ?? ''}
            minLength={2}
          />
          <label htmlFor="lastName">Last name</label>
          <input
            id="lastName"
            name="lastName"
            type="text"
            autoComplete="family-name"
            placeholder="Last name"
            aria-label="Last name"
            defaultValue={customer.lastName ?? ''}
            minLength={2}
          />
        </fieldset>
        {action?.error ? (
          <p>
            <mark>
              <small>{action.error}</small>
            </mark>
          </p>
        ) : (
          <br />
        )}
        <button type="submit" disabled={state !== 'idle'}>
          {state !== 'idle' ? 'Updating' : 'Update'}
        </button>
      </Form>
    </div>
  );
}
</file>

<file path="app/routes/($locale).account.tsx">
import {
  data as remixData,
  type LoaderFunctionArgs,
} from '@shopify/remix-oxygen';
import {Form, NavLink, Outlet, useLoaderData} from 'react-router';
import {CUSTOMER_DETAILS_QUERY} from '~/graphql/customer-account/CustomerDetailsQuery';

export function shouldRevalidate() {
  return true;
}

export async function loader({context}: LoaderFunctionArgs) {
  const {data, errors} = await context.customerAccount.query(
    CUSTOMER_DETAILS_QUERY,
  );

  if (errors?.length || !data?.customer) {
    throw new Error('Customer not found');
  }

  return remixData(
    {customer: data.customer},
    {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
      },
    },
  );
}

export default function AccountLayout() {
  const {customer} = useLoaderData<typeof loader>();

  const heading = customer
    ? customer.firstName
      ? `Welcome, ${customer.firstName}`
      : `Welcome to your account.`
    : 'Account Details';

  return (
    <div className="account">
      <h1>{heading}</h1>
      <br />
      <AccountMenu />
      <br />
      <br />
      <Outlet context={{customer}} />
    </div>
  );
}

function AccountMenu() {
  function isActiveStyle({
    isActive,
    isPending,
  }: {
    isActive: boolean;
    isPending: boolean;
  }) {
    return {
      fontWeight: isActive ? 'bold' : undefined,
      color: isPending ? 'grey' : 'black',
    };
  }

  return (
    <nav role="navigation">
      <NavLink to="/account/orders" style={isActiveStyle}>
        Orders &nbsp;
      </NavLink>
      &nbsp;|&nbsp;
      <NavLink to="/account/profile" style={isActiveStyle}>
        &nbsp; Profile &nbsp;
      </NavLink>
      &nbsp;|&nbsp;
      <NavLink to="/account/addresses" style={isActiveStyle}>
        &nbsp; Addresses &nbsp;
      </NavLink>
      &nbsp;|&nbsp;
      <Logout />
    </nav>
  );
}

function Logout() {
  return (
    <Form className="account-logout" method="POST" action="/account/logout">
      &nbsp;<button type="submit">Sign out</button>
    </Form>
  );
}
</file>

<file path="app/routes/($locale).api.$version.[graphql.json].tsx">
import {LoaderFunctionArgs} from 'react-router';

export async function action({params, context, request}: LoaderFunctionArgs) {
  const response = await fetch(
    `https://${context.env.PUBLIC_CHECKOUT_DOMAIN}/api/${params.version}/graphql.json`,
    {
      method: 'POST',
      body: request.body,
      headers: request.headers,
    },
  );

  return new Response(response.body, {headers: new Headers(response.headers)});
}
</file>

<file path="app/routes/($locale).blogs._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {Link, useLoaderData, type MetaFunction} from 'react-router';
import {getPaginationVariables} from '@shopify/hydrogen';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';

export const meta: MetaFunction = () => {
  return [{title: `Hydrogen | Blogs`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context, request}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 10,
  });

  const [{blogs}] = await Promise.all([
    context.storefront.query(BLOGS_QUERY, {
      variables: {
        ...paginationVariables,
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {blogs};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Blogs() {
  const {blogs} = useLoaderData<typeof loader>();

  return (
    <div className="blogs">
      <h1>Blogs</h1>
      <div className="blogs-grid">
        <PaginatedResourceSection connection={blogs}>
          {({node: blog}) => (
            <Link
              className="blog"
              key={blog.handle}
              prefetch="intent"
              to={`/blogs/${blog.handle}`}
            >
              <h2>{blog.title}</h2>
            </Link>
          )}
        </PaginatedResourceSection>
      </div>
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/blog
const BLOGS_QUERY = `#graphql
  query Blogs(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    blogs(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor
    ) {
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      nodes {
        title
        handle
        seo {
          title
          description
        }
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).blogs.$blogHandle._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {Link, useLoaderData, type MetaFunction} from 'react-router';
import {Image, getPaginationVariables} from '@shopify/hydrogen';
import type {ArticleItemFragment} from 'storefrontapi.generated';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.blog.title ?? ''} blog`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  request,
  params,
}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 4,
  });

  if (!params.blogHandle) {
    throw new Response(`blog not found`, {status: 404});
  }

  const [{blog}] = await Promise.all([
    context.storefront.query(BLOGS_QUERY, {
      variables: {
        blogHandle: params.blogHandle,
        ...paginationVariables,
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!blog?.articles) {
    throw new Response('Not found', {status: 404});
  }

  redirectIfHandleIsLocalized(request, {handle: params.blogHandle, data: blog});

  return {blog};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Blog() {
  const {blog} = useLoaderData<typeof loader>();
  const {articles} = blog;

  return (
    <div className="blog">
      <h1>{blog.title}</h1>
      <div className="blog-grid">
        <PaginatedResourceSection connection={articles}>
          {({node: article, index}) => (
            <ArticleItem
              article={article}
              key={article.id}
              loading={index < 2 ? 'eager' : 'lazy'}
            />
          )}
        </PaginatedResourceSection>
      </div>
    </div>
  );
}

function ArticleItem({
  article,
  loading,
}: {
  article: ArticleItemFragment;
  loading?: HTMLImageElement['loading'];
}) {
  const publishedAt = new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(new Date(article.publishedAt!));
  return (
    <div className="blog-article" key={article.id}>
      <Link to={`/blogs/${article.blog.handle}/${article.handle}`}>
        {article.image && (
          <div className="blog-article-image">
            <Image
              alt={article.image.altText || article.title}
              aspectRatio="3/2"
              data={article.image}
              loading={loading}
              sizes="(min-width: 768px) 50vw, 100vw"
            />
          </div>
        )}
        <h3>{article.title}</h3>
        <small>{publishedAt}</small>
      </Link>
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/blog
const BLOGS_QUERY = `#graphql
  query Blog(
    $language: LanguageCode
    $blogHandle: String!
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(language: $language) {
    blog(handle: $blogHandle) {
      title
      handle
      seo {
        title
        description
      }
      articles(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor
      ) {
        nodes {
          ...ArticleItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          hasNextPage
          endCursor
          startCursor
        }

      }
    }
  }
  fragment ArticleItem on Article {
    author: authorV2 {
      name
    }
    contentHtml
    handle
    id
    image {
      id
      altText
      url
      width
      height
    }
    publishedAt
    title
    blog {
      handle
    }
  }
` as const;
</file>

<file path="app/routes/($locale).blogs.$blogHandle.$articleHandle.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {Image} from '@shopify/hydrogen';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.article.title ?? ''} article`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  request,
  params,
}: LoaderFunctionArgs) {
  const {blogHandle, articleHandle} = params;

  if (!articleHandle || !blogHandle) {
    throw new Response('Not found', {status: 404});
  }

  const [{blog}] = await Promise.all([
    context.storefront.query(ARTICLE_QUERY, {
      variables: {blogHandle, articleHandle},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!blog?.articleByHandle) {
    throw new Response(null, {status: 404});
  }

  redirectIfHandleIsLocalized(
    request,
    {
      handle: articleHandle,
      data: blog.articleByHandle,
    },
    {
      handle: blogHandle,
      data: blog,
    },
  );

  const article = blog.articleByHandle;

  return {article};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Article() {
  const {article} = useLoaderData<typeof loader>();
  const {title, image, contentHtml, author} = article;

  const publishedDate = new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(new Date(article.publishedAt));

  return (
    <div className="article">
      <h1>
        {title}
        <div>
          <time dateTime={article.publishedAt}>{publishedDate}</time> &middot;{' '}
          <address>{author?.name}</address>
        </div>
      </h1>

      {image && <Image data={image} sizes="90vw" loading="eager" />}
      <div
        dangerouslySetInnerHTML={{__html: contentHtml}}
        className="article"
      />
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/blog#field-blog-articlebyhandle
const ARTICLE_QUERY = `#graphql
  query Article(
    $articleHandle: String!
    $blogHandle: String!
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(language: $language, country: $country) {
    blog(handle: $blogHandle) {
      handle
      articleByHandle(handle: $articleHandle) {
        handle
        title
        contentHtml
        publishedAt
        author: authorV2 {
          name
        }
        image {
          id
          altText
          url
          width
          height
        }
        seo {
          description
          title
        }
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).cart.$lines.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

/**
 * Automatically creates a new cart based on the URL and redirects straight to checkout.
 * Expected URL structure:
 * ```js
 * /cart/<variant_id>:<quantity>
 *
 * ```
 *
 * More than one `<variant_id>:<quantity>` separated by a comma, can be supplied in the URL, for
 * carts with more than one product variant.
 *
 * @example
 * Example path creating a cart with two product variants, different quantities, and a discount code in the querystring:
 * ```js
 * /cart/41007289663544:1,41007289696312:2?discount=HYDROBOARD
 *
 * ```
 */
export async function loader({request, context, params}: LoaderFunctionArgs) {
  const {cart} = context;
  const {lines} = params;
  if (!lines) return redirect('/cart');
  const linesMap = lines.split(',').map((line) => {
    const lineDetails = line.split(':');
    const variantId = lineDetails[0];
    const quantity = parseInt(lineDetails[1], 10);

    return {
      merchandiseId: `gid://shopify/ProductVariant/${variantId}`,
      quantity,
    };
  });

  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);

  const discount = searchParams.get('discount');
  const discountArray = discount ? [discount] : [];

  // create a cart
  const result = await cart.create({
    lines: linesMap,
    discountCodes: discountArray,
  });

  const cartResult = result.cart;

  if (result.errors?.length || !cartResult) {
    throw new Response('Link may be expired. Try checking the URL.', {
      status: 410,
    });
  }

  // Update cart id in cookie
  const headers = cart.setCartId(cartResult.id);

  // redirect to checkout
  if (cartResult.checkoutUrl) {
    return redirect(cartResult.checkoutUrl, {headers});
  } else {
    throw new Error('No checkout URL found');
  }
}

export default function Component() {
  return null;
}
</file>

<file path="app/routes/($locale).cart.tsx">
import {type MetaFunction, useLoaderData} from 'react-router';
import type {CartQueryDataReturn} from '@shopify/hydrogen';
import {CartForm} from '@shopify/hydrogen';
import {
  data,
  type LoaderFunctionArgs,
  type ActionFunctionArgs,
  type HeadersFunction,
} from '@shopify/remix-oxygen';
import {CartMain} from '~/components/CartMain';

export const meta: MetaFunction = () => {
  return [{title: `Hydrogen | Cart`}];
};

export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;

export async function action({request, context}: ActionFunctionArgs) {
  const {cart} = context;

  const formData = await request.formData();

  const {action, inputs} = CartForm.getFormInput(formData);

  if (!action) {
    throw new Error('No action provided');
  }

  let status = 200;
  let result: CartQueryDataReturn;

  switch (action) {
    case CartForm.ACTIONS.LinesAdd:
      result = await cart.addLines(inputs.lines);
      break;
    case CartForm.ACTIONS.LinesUpdate:
      result = await cart.updateLines(inputs.lines);
      break;
    case CartForm.ACTIONS.LinesRemove:
      result = await cart.removeLines(inputs.lineIds);
      break;
    case CartForm.ACTIONS.DiscountCodesUpdate: {
      const formDiscountCode = inputs.discountCode;

      // User inputted discount code
      const discountCodes = (
        formDiscountCode ? [formDiscountCode] : []
      ) as string[];

      // Combine discount codes already applied on cart
      discountCodes.push(...inputs.discountCodes);

      result = await cart.updateDiscountCodes(discountCodes);
      break;
    }
    case CartForm.ACTIONS.GiftCardCodesUpdate: {
      const formGiftCardCode = inputs.giftCardCode;

      // User inputted gift card code
      const giftCardCodes = (
        formGiftCardCode ? [formGiftCardCode] : []
      ) as string[];

      // Combine gift card codes already applied on cart
      giftCardCodes.push(...inputs.giftCardCodes);

      result = await cart.updateGiftCardCodes(giftCardCodes);
      break;
    }
    case CartForm.ACTIONS.BuyerIdentityUpdate: {
      result = await cart.updateBuyerIdentity({
        ...inputs.buyerIdentity,
      });
      break;
    }
    default:
      throw new Error(`${action} cart action is not defined`);
  }

  const cartId = result?.cart?.id;
  const headers = cartId ? cart.setCartId(result.cart.id) : new Headers();
  const {cart: cartResult, errors, warnings} = result;

  const redirectTo = formData.get('redirectTo') ?? null;
  if (typeof redirectTo === 'string') {
    status = 303;
    headers.set('Location', redirectTo);
  }

  return data(
    {
      cart: cartResult,
      errors,
      warnings,
      analytics: {
        cartId,
      },
    },
    {status, headers},
  );
}

export async function loader({context}: LoaderFunctionArgs) {
  const {cart} = context;
  return await cart.get();
}

export default function Cart() {
  const cart = useLoaderData<typeof loader>();

  return (
    <div className="cart">
      <h1>Cart</h1>
      <CartMain layout="page" cart={cart} />
    </div>
  );
}
</file>

<file path="app/routes/($locale).collections._index.tsx">
import {useLoaderData, Link} from 'react-router';
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {getPaginationVariables, Image} from '@shopify/hydrogen';
import type {CollectionFragment} from 'storefrontapi.generated';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context, request}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 4,
  });

  const [{collections}] = await Promise.all([
    context.storefront.query(COLLECTIONS_QUERY, {
      variables: paginationVariables,
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {collections};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Collections() {
  const {collections} = useLoaderData<typeof loader>();

  return (
    <div className="collections">
      <h1>Collections</h1>
      <PaginatedResourceSection
        connection={collections}
        resourcesClassName="collections-grid"
      >
        {({node: collection, index}) => (
          <CollectionItem
            key={collection.id}
            collection={collection}
            index={index}
          />
        )}
      </PaginatedResourceSection>
    </div>
  );
}

function CollectionItem({
  collection,
  index,
}: {
  collection: CollectionFragment;
  index: number;
}) {
  return (
    <Link
      className="collection-item"
      key={collection.id}
      to={`/collections/${collection.handle}`}
      prefetch="intent"
    >
      {collection?.image && (
        <Image
          alt={collection.image.altText || collection.title}
          aspectRatio="1/1"
          data={collection.image}
          loading={index < 3 ? 'eager' : undefined}
          sizes="(min-width: 45em) 400px, 100vw"
        />
      )}
      <h5>{collection.title}</h5>
    </Link>
  );
}

const COLLECTIONS_QUERY = `#graphql
  fragment Collection on Collection {
    id
    title
    handle
    image {
      id
      url
      altText
      width
      height
    }
  }
  query StoreCollections(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    collections(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor
    ) {
      nodes {
        ...Collection
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).collections.$handle.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {getPaginationVariables, Analytics} from '@shopify/hydrogen';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';
import {ProductItem} from '~/components/ProductItem';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.collection.title ?? ''} Collection`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  params,
  request,
}: LoaderFunctionArgs) {
  const {handle} = params;
  const {storefront} = context;
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 8,
  });

  if (!handle) {
    throw redirect('/collections');
  }

  const [{collection}] = await Promise.all([
    storefront.query(COLLECTION_QUERY, {
      variables: {handle, ...paginationVariables},
      // Add other queries here, so that they are loaded in parallel
    }),
  ]);

  if (!collection) {
    throw new Response(`Collection ${handle} not found`, {
      status: 404,
    });
  }

  // The API handle might be localized, so redirect to the localized handle
  redirectIfHandleIsLocalized(request, {handle, data: collection});

  return {
    collection,
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Collection() {
  const {collection} = useLoaderData<typeof loader>();

  return (
    <div className="collection">
      <h1>{collection.title}</h1>
      <p className="collection-description">{collection.description}</p>
      <PaginatedResourceSection
        connection={collection.products}
        resourcesClassName="products-grid"
      >
        {({node: product, index}) => (
          <ProductItem
            key={product.id}
            product={product}
            loading={index < 8 ? 'eager' : undefined}
          />
        )}
      </PaginatedResourceSection>
      <Analytics.CollectionView
        data={{
          collection: {
            id: collection.id,
            handle: collection.handle,
          },
        }}
      />
    </div>
  );
}

const PRODUCT_ITEM_FRAGMENT = `#graphql
  fragment MoneyProductItem on MoneyV2 {
    amount
    currencyCode
  }
  fragment ProductItem on Product {
    id
    handle
    title
    featuredImage {
      id
      altText
      url
      width
      height
    }
    priceRange {
      minVariantPrice {
        ...MoneyProductItem
      }
      maxVariantPrice {
        ...MoneyProductItem
      }
    }
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/2022-04/objects/collection
const COLLECTION_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query Collection(
    $handle: String!
    $country: CountryCode
    $language: LanguageCode
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(country: $country, language: $language) {
    collection(handle: $handle) {
      id
      handle
      title
      description
      products(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor
      ) {
        nodes {
          ...ProductItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          endCursor
          startCursor
        }
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).collections.all.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {getPaginationVariables, Image, Money} from '@shopify/hydrogen';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';
import {ProductItem} from '~/components/ProductItem';

export const meta: MetaFunction<typeof loader> = () => {
  return [{title: `Hydrogen | Products`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context, request}: LoaderFunctionArgs) {
  const {storefront} = context;
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 8,
  });

  const [{products}] = await Promise.all([
    storefront.query(CATALOG_QUERY, {
      variables: {...paginationVariables},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);
  return {products};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Collection() {
  const {products} = useLoaderData<typeof loader>();

  return (
    <div className="collection">
      <h1>Products</h1>
      <PaginatedResourceSection
        connection={products}
        resourcesClassName="products-grid"
      >
        {({node: product, index}) => (
          <ProductItem
            key={product.id}
            product={product}
            loading={index < 8 ? 'eager' : undefined}
          />
        )}
      </PaginatedResourceSection>
    </div>
  );
}

const COLLECTION_ITEM_FRAGMENT = `#graphql
  fragment MoneyCollectionItem on MoneyV2 {
    amount
    currencyCode
  }
  fragment CollectionItem on Product {
    id
    handle
    title
    featuredImage {
      id
      altText
      url
      width
      height
    }
    priceRange {
      minVariantPrice {
        ...MoneyCollectionItem
      }
      maxVariantPrice {
        ...MoneyCollectionItem
      }
    }
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/product
const CATALOG_QUERY = `#graphql
  query Catalog(
    $country: CountryCode
    $language: LanguageCode
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(country: $country, language: $language) {
    products(first: $first, last: $last, before: $startCursor, after: $endCursor) {
      nodes {
        ...CollectionItem
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
    }
  }
  ${COLLECTION_ITEM_FRAGMENT}
` as const;
</file>

<file path="app/routes/($locale).discount.$code.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

/**
 * Automatically applies a discount found on the url
 * If a cart exists it's updated with the discount, otherwise a cart is created with the discount already applied
 *
 * @example
 * Example path applying a discount and optional redirecting (defaults to the home page)
 * ```js
 * /discount/FREESHIPPING?redirect=/products
 *
 * ```
 */
export async function loader({request, context, params}: LoaderFunctionArgs) {
  const {cart} = context;
  const {code} = params;

  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);
  let redirectParam =
    searchParams.get('redirect') || searchParams.get('return_to') || '/';

  if (redirectParam.includes('//')) {
    // Avoid redirecting to external URLs to prevent phishing attacks
    redirectParam = '/';
  }

  searchParams.delete('redirect');
  searchParams.delete('return_to');

  const redirectUrl = `${redirectParam}?${searchParams}`;

  if (!code) {
    return redirect(redirectUrl);
  }

  const result = await cart.updateDiscountCodes([code]);
  const headers = cart.setCartId(result.cart.id);

  // Using set-cookie on a 303 redirect will not work if the domain origin have port number (:3000)
  // If there is no cart id and a new cart id is created in the progress, it will not be set in the cookie
  // on localhost:3000
  return redirect(redirectUrl, {
    status: 303,
    headers,
  });
}
</file>

<file path="app/routes/($locale).pages.$handle.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.page.title ?? ''}`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  request,
  params,
}: LoaderFunctionArgs) {
  if (!params.handle) {
    throw new Error('Missing page handle');
  }

  const [{page}] = await Promise.all([
    context.storefront.query(PAGE_QUERY, {
      variables: {
        handle: params.handle,
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!page) {
    throw new Response('Not Found', {status: 404});
  }

  redirectIfHandleIsLocalized(request, {handle: params.handle, data: page});

  return {
    page,
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Page() {
  const {page} = useLoaderData<typeof loader>();

  return (
    <div className="page">
      <header>
        <h1>{page.title}</h1>
      </header>
      <main dangerouslySetInnerHTML={{__html: page.body}} />
    </div>
  );
}

const PAGE_QUERY = `#graphql
  query Page(
    $language: LanguageCode,
    $country: CountryCode,
    $handle: String!
  )
  @inContext(language: $language, country: $country) {
    page(handle: $handle) {
      handle
      id
      title
      body
      seo {
        description
        title
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).policies._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, Link} from 'react-router';

export async function loader({context}: LoaderFunctionArgs) {
  const data = await context.storefront.query(POLICIES_QUERY);
  const policies = Object.values(data.shop || {});

  if (!policies.length) {
    throw new Response('No policies found', {status: 404});
  }

  return {policies};
}

export default function Policies() {
  const {policies} = useLoaderData<typeof loader>();

  return (
    <div className="policies">
      <h1>Policies</h1>
      <div>
        {policies.map((policy) => {
          if (!policy) return null;
          return (
            <fieldset key={policy.id}>
              <Link to={`/policies/${policy.handle}`}>{policy.title}</Link>
            </fieldset>
          );
        })}
      </div>
    </div>
  );
}

const POLICIES_QUERY = `#graphql
  fragment PolicyItem on ShopPolicy {
    id
    title
    handle
  }
  query Policies ($country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    shop {
      privacyPolicy {
        ...PolicyItem
      }
      shippingPolicy {
        ...PolicyItem
      }
      termsOfService {
        ...PolicyItem
      }
      refundPolicy {
        ...PolicyItem
      }
      subscriptionPolicy {
        id
        title
        handle
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).policies.$handle.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {Link, useLoaderData, type MetaFunction} from 'react-router';
import {type Shop} from '@shopify/hydrogen/storefront-api-types';

type SelectedPolicies = keyof Pick<
  Shop,
  'privacyPolicy' | 'shippingPolicy' | 'termsOfService' | 'refundPolicy'
>;

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.policy.title ?? ''}`}];
};

export async function loader({params, context}: LoaderFunctionArgs) {
  if (!params.handle) {
    throw new Response('No handle was passed in', {status: 404});
  }

  const policyName = params.handle.replace(
    /-([a-z])/g,
    (_: unknown, m1: string) => m1.toUpperCase(),
  ) as SelectedPolicies;

  const data = await context.storefront.query(POLICY_CONTENT_QUERY, {
    variables: {
      privacyPolicy: false,
      shippingPolicy: false,
      termsOfService: false,
      refundPolicy: false,
      [policyName]: true,
      language: context.storefront.i18n?.language,
    },
  });

  const policy = data.shop?.[policyName];

  if (!policy) {
    throw new Response('Could not find the policy', {status: 404});
  }

  return {policy};
}

export default function Policy() {
  const {policy} = useLoaderData<typeof loader>();

  return (
    <div className="policy">
      <br />
      <br />
      <div>
        <Link to="/policies">← Back to Policies</Link>
      </div>
      <br />
      <h1>{policy.title}</h1>
      <div dangerouslySetInnerHTML={{__html: policy.body}} />
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/Shop
const POLICY_CONTENT_QUERY = `#graphql
  fragment Policy on ShopPolicy {
    body
    handle
    id
    title
    url
  }
  query Policy(
    $country: CountryCode
    $language: LanguageCode
    $privacyPolicy: Boolean!
    $refundPolicy: Boolean!
    $shippingPolicy: Boolean!
    $termsOfService: Boolean!
  ) @inContext(language: $language, country: $country) {
    shop {
      privacyPolicy @include(if: $privacyPolicy) {
        ...Policy
      }
      shippingPolicy @include(if: $shippingPolicy) {
        ...Policy
      }
      termsOfService @include(if: $termsOfService) {
        ...Policy
      }
      refundPolicy @include(if: $refundPolicy) {
        ...Policy
      }
    }
  }
` as const;
</file>

<file path="app/routes/($locale).products.$handle.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {
  getSelectedProductOptions,
  Analytics,
  useOptimisticVariant,
  getProductOptions,
  getAdjacentAndFirstAvailableVariants,
  useSelectedOptionInUrlParam,
} from '@shopify/hydrogen';
import {ProductPrice} from '~/components/ProductPrice';
import {ProductImage} from '~/components/ProductImage';
import {ProductForm} from '~/components/ProductForm';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [
    {title: `Hydrogen | ${data?.product.title ?? ''}`},
    {
      rel: 'canonical',
      href: `/products/${data?.product.handle}`,
    },
  ];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  params,
  request,
}: LoaderFunctionArgs) {
  const {handle} = params;
  const {storefront} = context;

  if (!handle) {
    throw new Error('Expected product handle to be defined');
  }

  const [{product}] = await Promise.all([
    storefront.query(PRODUCT_QUERY, {
      variables: {handle, selectedOptions: getSelectedProductOptions(request)},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!product?.id) {
    throw new Response(null, {status: 404});
  }

  // The API handle might be localized, so redirect to the localized handle
  redirectIfHandleIsLocalized(request, {handle, data: product});

  return {
    product,
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context, params}: LoaderFunctionArgs) {
  // Put any API calls that is not critical to be available on first page render
  // For example: product reviews, product recommendations, social feeds.

  return {};
}

export default function Product() {
  const {product} = useLoaderData<typeof loader>();

  // Optimistically selects a variant with given available variant information
  const selectedVariant = useOptimisticVariant(
    product.selectedOrFirstAvailableVariant,
    getAdjacentAndFirstAvailableVariants(product),
  );

  // Sets the search param to the selected variant without navigation
  // only when no search params are set in the url
  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);

  // Get the product options array
  const productOptions = getProductOptions({
    ...product,
    selectedOrFirstAvailableVariant: selectedVariant,
  });

  const {title, descriptionHtml} = product;

  return (
    <div className="product">
      <ProductImage image={selectedVariant?.image} />
      <div className="product-main">
        <h1>{title}</h1>
        <ProductPrice
          price={selectedVariant?.price}
          compareAtPrice={selectedVariant?.compareAtPrice}
        />
        <br />
        <ProductForm
          productOptions={productOptions}
          selectedVariant={selectedVariant}
        />
        <br />
        <br />
        <p>
          <strong>Description</strong>
        </p>
        <br />
        <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />
        <br />
      </div>
      <Analytics.ProductView
        data={{
          products: [
            {
              id: product.id,
              title: product.title,
              price: selectedVariant?.price.amount || '0',
              vendor: product.vendor,
              variantId: selectedVariant?.id || '',
              variantTitle: selectedVariant?.title || '',
              quantity: 1,
            },
          ],
        }}
      />
    </div>
  );
}

const PRODUCT_VARIANT_FRAGMENT = `#graphql
  fragment ProductVariant on ProductVariant {
    availableForSale
    compareAtPrice {
      amount
      currencyCode
    }
    id
    image {
      __typename
      id
      url
      altText
      width
      height
    }
    price {
      amount
      currencyCode
    }
    product {
      title
      handle
    }
    selectedOptions {
      name
      value
    }
    sku
    title
    unitPrice {
      amount
      currencyCode
    }
  }
` as const;

const PRODUCT_FRAGMENT = `#graphql
  fragment Product on Product {
    id
    title
    vendor
    handle
    descriptionHtml
    description
    encodedVariantExistence
    encodedVariantAvailability
    options {
      name
      optionValues {
        name
        firstSelectableVariant {
          ...ProductVariant
        }
        swatch {
          color
          image {
            previewImage {
              url
            }
          }
        }
      }
    }
    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
      ...ProductVariant
    }
    adjacentVariants (selectedOptions: $selectedOptions) {
      ...ProductVariant
    }
    seo {
      description
      title
    }
  }
  ${PRODUCT_VARIANT_FRAGMENT}
` as const;

const PRODUCT_QUERY = `#graphql
  query Product(
    $country: CountryCode
    $handle: String!
    $language: LanguageCode
    $selectedOptions: [SelectedOptionInput!]!
  ) @inContext(country: $country, language: $language) {
    product(handle: $handle) {
      ...Product
    }
  }
  ${PRODUCT_FRAGMENT}
` as const;
</file>

<file path="app/routes/($locale).search.tsx">
import {
  type LoaderFunctionArgs,
  type ActionFunctionArgs,
} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {getPaginationVariables, Analytics} from '@shopify/hydrogen';
import {SearchForm} from '~/components/SearchForm';
import {SearchResults} from '~/components/SearchResults';
import {
  type RegularSearchReturn,
  type PredictiveSearchReturn,
  getEmptyPredictiveSearchResult,
} from '~/lib/search';

export const meta: MetaFunction = () => {
  return [{title: `Hydrogen | Search`}];
};

export async function loader({request, context}: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const isPredictive = url.searchParams.has('predictive');
  const searchPromise: Promise<PredictiveSearchReturn | RegularSearchReturn> =
    isPredictive
      ? predictiveSearch({request, context})
      : regularSearch({request, context});

  searchPromise.catch((error: Error) => {
    console.error(error);
    return {term: '', result: null, error: error.message};
  });

  return await searchPromise;
}

/**
 * Renders the /search route
 */
export default function SearchPage() {
  const {type, term, result, error} = useLoaderData<typeof loader>();
  if (type === 'predictive') return null;

  return (
    <div className="search">
      <h1>Search</h1>
      <SearchForm>
        {({inputRef}) => (
          <>
            <input
              defaultValue={term}
              name="q"
              placeholder="Search…"
              ref={inputRef}
              type="search"
            />
            &nbsp;
            <button type="submit">Search</button>
          </>
        )}
      </SearchForm>
      {error && <p style={{color: 'red'}}>{error}</p>}
      {!term || !result?.total ? (
        <SearchResults.Empty />
      ) : (
        <SearchResults result={result} term={term}>
          {({articles, pages, products, term}) => (
            <div>
              <SearchResults.Products products={products} term={term} />
              <SearchResults.Pages pages={pages} term={term} />
              <SearchResults.Articles articles={articles} term={term} />
            </div>
          )}
        </SearchResults>
      )}
      <Analytics.SearchView data={{searchTerm: term, searchResults: result}} />
    </div>
  );
}

/**
 * Regular search query and fragments
 * (adjust as needed)
 */
const SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment SearchProduct on Product {
    __typename
    handle
    id
    publishedAt
    title
    trackingParameters
    vendor
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
      compareAtPrice {
        amount
        currencyCode
      }
      selectedOptions {
        name
        value
      }
      product {
        handle
        title
      }
    }
  }
` as const;

const SEARCH_PAGE_FRAGMENT = `#graphql
  fragment SearchPage on Page {
     __typename
     handle
    id
    title
    trackingParameters
  }
` as const;

const SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment SearchArticle on Article {
    __typename
    handle
    id
    title
    trackingParameters
  }
` as const;

const PAGE_INFO_FRAGMENT = `#graphql
  fragment PageInfoFragment on PageInfo {
    hasNextPage
    hasPreviousPage
    startCursor
    endCursor
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/search
export const SEARCH_QUERY = `#graphql
  query RegularSearch(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $term: String!
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    articles: search(
      query: $term,
      types: [ARTICLE],
      first: $first,
    ) {
      nodes {
        ...on Article {
          ...SearchArticle
        }
      }
    }
    pages: search(
      query: $term,
      types: [PAGE],
      first: $first,
    ) {
      nodes {
        ...on Page {
          ...SearchPage
        }
      }
    }
    products: search(
      after: $endCursor,
      before: $startCursor,
      first: $first,
      last: $last,
      query: $term,
      sortKey: RELEVANCE,
      types: [PRODUCT],
      unavailableProducts: HIDE,
    ) {
      nodes {
        ...on Product {
          ...SearchProduct
        }
      }
      pageInfo {
        ...PageInfoFragment
      }
    }
  }
  ${SEARCH_PRODUCT_FRAGMENT}
  ${SEARCH_PAGE_FRAGMENT}
  ${SEARCH_ARTICLE_FRAGMENT}
  ${PAGE_INFO_FRAGMENT}
` as const;

/**
 * Regular search fetcher
 */
async function regularSearch({
  request,
  context,
}: Pick<
  LoaderFunctionArgs,
  'request' | 'context'
>): Promise<RegularSearchReturn> {
  const {storefront} = context;
  const url = new URL(request.url);
  const variables = getPaginationVariables(request, {pageBy: 8});
  const term = String(url.searchParams.get('q') || '');

  // Search articles, pages, and products for the `q` term
  const {errors, ...items} = await storefront.query(SEARCH_QUERY, {
    variables: {...variables, term},
  });

  if (!items) {
    throw new Error('No search data returned from Shopify API');
  }

  const total = Object.values(items).reduce(
    (acc, {nodes}) => acc + nodes.length,
    0,
  );

  const error = errors
    ? errors.map(({message}) => message).join(', ')
    : undefined;

  return {type: 'regular', term, error, result: {total, items}};
}

/**
 * Predictive search query and fragments
 * (adjust as needed)
 */
const PREDICTIVE_SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment PredictiveArticle on Article {
    __typename
    id
    title
    handle
    blog {
      handle
    }
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_COLLECTION_FRAGMENT = `#graphql
  fragment PredictiveCollection on Collection {
    __typename
    id
    title
    handle
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PAGE_FRAGMENT = `#graphql
  fragment PredictivePage on Page {
    __typename
    id
    title
    handle
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment PredictiveProduct on Product {
    __typename
    id
    title
    handle
    trackingParameters
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
    }
  }
` as const;

const PREDICTIVE_SEARCH_QUERY_FRAGMENT = `#graphql
  fragment PredictiveQuery on SearchQuerySuggestion {
    __typename
    text
    styledText
    trackingParameters
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/predictiveSearch
const PREDICTIVE_SEARCH_QUERY = `#graphql
  query PredictiveSearch(
    $country: CountryCode
    $language: LanguageCode
    $limit: Int!
    $limitScope: PredictiveSearchLimitScope!
    $term: String!
    $types: [PredictiveSearchType!]
  ) @inContext(country: $country, language: $language) {
    predictiveSearch(
      limit: $limit,
      limitScope: $limitScope,
      query: $term,
      types: $types,
    ) {
      articles {
        ...PredictiveArticle
      }
      collections {
        ...PredictiveCollection
      }
      pages {
        ...PredictivePage
      }
      products {
        ...PredictiveProduct
      }
      queries {
        ...PredictiveQuery
      }
    }
  }
  ${PREDICTIVE_SEARCH_ARTICLE_FRAGMENT}
  ${PREDICTIVE_SEARCH_COLLECTION_FRAGMENT}
  ${PREDICTIVE_SEARCH_PAGE_FRAGMENT}
  ${PREDICTIVE_SEARCH_PRODUCT_FRAGMENT}
  ${PREDICTIVE_SEARCH_QUERY_FRAGMENT}
` as const;

/**
 * Predictive search fetcher
 */
async function predictiveSearch({
  request,
  context,
}: Pick<
  ActionFunctionArgs,
  'request' | 'context'
>): Promise<PredictiveSearchReturn> {
  const {storefront} = context;
  const url = new URL(request.url);
  const term = String(url.searchParams.get('q') || '').trim();
  const limit = Number(url.searchParams.get('limit') || 10);
  const type = 'predictive';

  if (!term) return {type, term, result: getEmptyPredictiveSearchResult()};

  // Predictively search articles, collections, pages, products, and queries (suggestions)
  const {predictiveSearch: items, errors} = await storefront.query(
    PREDICTIVE_SEARCH_QUERY,
    {
      variables: {
        // customize search options as needed
        limit,
        limitScope: 'EACH',
        term,
      },
    },
  );

  if (errors) {
    throw new Error(
      `Shopify API errors: ${errors.map(({message}) => message).join(', ')}`,
    );
  }

  if (!items) {
    throw new Error('No predictive search data returned from Shopify API');
  }

  const total = Object.values(items).reduce(
    (acc, item) => acc + item.length,
    0,
  );

  return {type, term, result: {items, total}};
}
</file>

<file path="app/routes/($locale).sitemap.$type.$page[.xml].tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {getSitemap} from '@shopify/hydrogen';

export async function loader({
  request,
  params,
  context: {storefront},
}: LoaderFunctionArgs) {
  const response = await getSitemap({
    storefront,
    request,
    params,
    locales: ['EN-US', 'EN-CA', 'FR-CA'],
    getLink: ({type, baseUrl, handle, locale}) => {
      if (!locale) return `${baseUrl}/${type}/${handle}`;
      return `${baseUrl}/${locale}/${type}/${handle}`;
    },
  });

  response.headers.set('Cache-Control', `max-age=${60 * 60 * 24}`);

  return response;
}
</file>

<file path="app/routes/($locale).tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({params, context}: LoaderFunctionArgs) {
  const {language, country} = context.storefront.i18n;

  if (
    params.locale &&
    params.locale.toLowerCase() !== `${language}-${country}`.toLowerCase()
  ) {
    // If the locale URL param is defined, yet we still are still at the default locale
    // then the the locale param must be invalid, send to the 404 page
    throw new Response(null, {status: 404});
  }

  return null;
}
</file>

<file path="app/routes/[robots.txt].tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {parseGid} from '@shopify/hydrogen';

export async function loader({request, context}: LoaderFunctionArgs) {
  const url = new URL(request.url);

  const {shop} = await context.storefront.query(ROBOTS_QUERY);

  const shopId = parseGid(shop.id).id;
  const body = robotsTxtData({url: url.origin, shopId});

  return new Response(body, {
    status: 200,
    headers: {
      'Content-Type': 'text/plain',

      'Cache-Control': `max-age=${60 * 60 * 24}`,
    },
  });
}

function robotsTxtData({url, shopId}: {shopId?: string; url?: string}) {
  const sitemapUrl = url ? `${url}/sitemap.xml` : undefined;

  return `
User-agent: *
${generalDisallowRules({sitemapUrl, shopId})}

# Google adsbot ignores robots.txt unless specifically named!
User-agent: adsbot-google
Disallow: /checkouts/
Disallow: /checkout
Disallow: /carts
Disallow: /orders
${shopId ? `Disallow: /${shopId}/checkouts` : ''}
${shopId ? `Disallow: /${shopId}/orders` : ''}
Disallow: /*?*oseid=*
Disallow: /*preview_theme_id*
Disallow: /*preview_script_id*

User-agent: Nutch
Disallow: /

User-agent: AhrefsBot
Crawl-delay: 10
${generalDisallowRules({sitemapUrl, shopId})}

User-agent: AhrefsSiteAudit
Crawl-delay: 10
${generalDisallowRules({sitemapUrl, shopId})}

User-agent: MJ12bot
Crawl-Delay: 10

User-agent: Pinterest
Crawl-delay: 1
`.trim();
}

/**
 * This function generates disallow rules that generally follow what Shopify's
 * Online Store has as defaults for their robots.txt
 */
function generalDisallowRules({
  shopId,
  sitemapUrl,
}: {
  shopId?: string;
  sitemapUrl?: string;
}) {
  return `Disallow: /admin
Disallow: /cart
Disallow: /orders
Disallow: /checkouts/
Disallow: /checkout
${shopId ? `Disallow: /${shopId}/checkouts` : ''}
${shopId ? `Disallow: /${shopId}/orders` : ''}
Disallow: /carts
Disallow: /account
Disallow: /collections/*sort_by*
Disallow: /*/collections/*sort_by*
Disallow: /collections/*+*
Disallow: /collections/*%2B*
Disallow: /collections/*%2b*
Disallow: /*/collections/*+*
Disallow: /*/collections/*%2B*
Disallow: /*/collections/*%2b*
Disallow: */collections/*filter*&*filter*
Disallow: /blogs/*+*
Disallow: /blogs/*%2B*
Disallow: /blogs/*%2b*
Disallow: /*/blogs/*+*
Disallow: /*/blogs/*%2B*
Disallow: /*/blogs/*%2b*
Disallow: /*?*oseid=*
Disallow: /*preview_theme_id*
Disallow: /*preview_script_id*
Disallow: /policies/
Disallow: /*/*?*ls=*&ls=*
Disallow: /*/*?*ls%3D*%3Fls%3D*
Disallow: /*/*?*ls%3d*%3fls%3d*
Disallow: /search
Allow: /search/
Disallow: /search/?*
Disallow: /apple-app-site-association
Disallow: /.well-known/shopify/monorail
${sitemapUrl ? `Sitemap: ${sitemapUrl}` : ''}`;
}

const ROBOTS_QUERY = `#graphql
  query StoreRobots($country: CountryCode, $language: LanguageCode)
   @inContext(country: $country, language: $language) {
    shop {
      id
    }
  }
` as const;
</file>

<file path="app/routes/[sitemap.xml].tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {getSitemapIndex} from '@shopify/hydrogen';

export async function loader({
  request,
  context: {storefront},
}: LoaderFunctionArgs) {
  const response = await getSitemapIndex({
    storefront,
    request,
  });

  response.headers.set('Cache-Control', `max-age=${60 * 60 * 24}`);

  return response;
}
</file>

<file path="app/routes/$.tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({request}: LoaderFunctionArgs) {
  throw new Response(`${new URL(request.url).pathname} not found`, {
    status: 404,
  });
}

export default function CatchAllPage() {
  return null;
}
</file>

<file path="app/routes/account_.authorize.tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({context}: LoaderFunctionArgs) {
  return context.customerAccount.authorize();
}
</file>

<file path="app/routes/account_.login.tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';

export async function loader({request, context}: LoaderFunctionArgs) {
  return context.customerAccount.login();
}
</file>

<file path="app/routes/account_.logout.tsx">
import {redirect, type ActionFunctionArgs} from '@shopify/remix-oxygen';

// if we don't implement this, /account/logout will get caught by account.$.tsx to do login
export async function loader() {
  return redirect('/');
}

export async function action({context}: ActionFunctionArgs) {
  return context.customerAccount.logout();
}
</file>

<file path="app/routes/account._index.tsx">
import {redirect} from '@shopify/remix-oxygen';

export async function loader() {
  return redirect('/account/orders');
}
</file>

<file path="app/routes/account.$.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

// fallback wild card for all unauthenticated routes in account section
export async function loader({context}: LoaderFunctionArgs) {
  await context.customerAccount.handleAuthStatus();

  return redirect('/account');
}
</file>

<file path="app/routes/account.addresses.tsx">
import type {CustomerAddressInput} from '@shopify/hydrogen/customer-account-api-types';
import type {
  AddressFragment,
  CustomerFragment,
} from 'customer-accountapi.generated';
import {
  data,
  type ActionFunctionArgs,
  type LoaderFunctionArgs,
} from '@shopify/remix-oxygen';
import {
  Form,
  useActionData,
  useNavigation,
  useOutletContext,
  type MetaFunction,
  type Fetcher,
} from 'react-router';
import {
  UPDATE_ADDRESS_MUTATION,
  DELETE_ADDRESS_MUTATION,
  CREATE_ADDRESS_MUTATION,
} from '~/graphql/customer-account/CustomerAddressMutations';

export type ActionResponse = {
  addressId?: string | null;
  createdAddress?: AddressFragment;
  defaultAddress?: string | null;
  deletedAddress?: string | null;
  error: Record<AddressFragment['id'], string> | null;
  updatedAddress?: AddressFragment;
};

export const meta: MetaFunction = () => {
  return [{title: 'Addresses'}];
};

export async function loader({context}: LoaderFunctionArgs) {
  await context.customerAccount.handleAuthStatus();

  return {};
}

export async function action({request, context}: ActionFunctionArgs) {
  const {customerAccount} = context;

  try {
    const form = await request.formData();

    const addressId = form.has('addressId')
      ? String(form.get('addressId'))
      : null;
    if (!addressId) {
      throw new Error('You must provide an address id.');
    }

    // this will ensure redirecting to login never happen for mutatation
    const isLoggedIn = await customerAccount.isLoggedIn();
    if (!isLoggedIn) {
      return data(
        {error: {[addressId]: 'Unauthorized'}},
        {
          status: 401,
        },
      );
    }

    const defaultAddress = form.has('defaultAddress')
      ? String(form.get('defaultAddress')) === 'on'
      : false;
    const address: CustomerAddressInput = {};
    const keys: (keyof CustomerAddressInput)[] = [
      'address1',
      'address2',
      'city',
      'company',
      'territoryCode',
      'firstName',
      'lastName',
      'phoneNumber',
      'zoneCode',
      'zip',
    ];

    for (const key of keys) {
      const value = form.get(key);
      if (typeof value === 'string') {
        address[key] = value;
      }
    }

    switch (request.method) {
      case 'POST': {
        // handle new address creation
        try {
          const {data, errors} = await customerAccount.mutate(
            CREATE_ADDRESS_MUTATION,
            {
              variables: {address, defaultAddress},
            },
          );

          if (errors?.length) {
            throw new Error(errors[0].message);
          }

          if (data?.customerAddressCreate?.userErrors?.length) {
            throw new Error(data?.customerAddressCreate?.userErrors[0].message);
          }

          if (!data?.customerAddressCreate?.customerAddress) {
            throw new Error('Customer address create failed.');
          }

          return {
            error: null,
            createdAddress: data?.customerAddressCreate?.customerAddress,
            defaultAddress,
          };
        } catch (error: unknown) {
          if (error instanceof Error) {
            return data(
              {error: {[addressId]: error.message}},
              {
                status: 400,
              },
            );
          }
          return data(
            {error: {[addressId]: error}},
            {
              status: 400,
            },
          );
        }
      }

      case 'PUT': {
        // handle address updates
        try {
          const {data, errors} = await customerAccount.mutate(
            UPDATE_ADDRESS_MUTATION,
            {
              variables: {
                address,
                addressId: decodeURIComponent(addressId),
                defaultAddress,
              },
            },
          );

          if (errors?.length) {
            throw new Error(errors[0].message);
          }

          if (data?.customerAddressUpdate?.userErrors?.length) {
            throw new Error(data?.customerAddressUpdate?.userErrors[0].message);
          }

          if (!data?.customerAddressUpdate?.customerAddress) {
            throw new Error('Customer address update failed.');
          }

          return {
            error: null,
            updatedAddress: address,
            defaultAddress,
          };
        } catch (error: unknown) {
          if (error instanceof Error) {
            return data(
              {error: {[addressId]: error.message}},
              {
                status: 400,
              },
            );
          }
          return data(
            {error: {[addressId]: error}},
            {
              status: 400,
            },
          );
        }
      }

      case 'DELETE': {
        // handles address deletion
        try {
          const {data, errors} = await customerAccount.mutate(
            DELETE_ADDRESS_MUTATION,
            {
              variables: {addressId: decodeURIComponent(addressId)},
            },
          );

          if (errors?.length) {
            throw new Error(errors[0].message);
          }

          if (data?.customerAddressDelete?.userErrors?.length) {
            throw new Error(data?.customerAddressDelete?.userErrors[0].message);
          }

          if (!data?.customerAddressDelete?.deletedAddressId) {
            throw new Error('Customer address delete failed.');
          }

          return {error: null, deletedAddress: addressId};
        } catch (error: unknown) {
          if (error instanceof Error) {
            return data(
              {error: {[addressId]: error.message}},
              {
                status: 400,
              },
            );
          }
          return data(
            {error: {[addressId]: error}},
            {
              status: 400,
            },
          );
        }
      }

      default: {
        return data(
          {error: {[addressId]: 'Method not allowed'}},
          {
            status: 405,
          },
        );
      }
    }
  } catch (error: unknown) {
    if (error instanceof Error) {
      return data(
        {error: error.message},
        {
          status: 400,
        },
      );
    }
    return data(
      {error},
      {
        status: 400,
      },
    );
  }
}

export default function Addresses() {
  const {customer} = useOutletContext<{customer: CustomerFragment}>();
  const {defaultAddress, addresses} = customer;

  return (
    <div className="account-addresses">
      <h2>Addresses</h2>
      <br />
      {!addresses.nodes.length ? (
        <p>You have no addresses saved.</p>
      ) : (
        <div>
          <div>
            <legend>Create address</legend>
            <NewAddressForm />
          </div>
          <br />
          <hr />
          <br />
          <ExistingAddresses
            addresses={addresses}
            defaultAddress={defaultAddress}
          />
        </div>
      )}
    </div>
  );
}

function NewAddressForm() {
  const newAddress = {
    address1: '',
    address2: '',
    city: '',
    company: '',
    territoryCode: '',
    firstName: '',
    id: 'new',
    lastName: '',
    phoneNumber: '',
    zoneCode: '',
    zip: '',
  } as CustomerAddressInput;

  return (
    <AddressForm
      addressId={'NEW_ADDRESS_ID'}
      address={newAddress}
      defaultAddress={null}
    >
      {({stateForMethod}) => (
        <div>
          <button
            disabled={stateForMethod('POST') !== 'idle'}
            formMethod="POST"
            type="submit"
          >
            {stateForMethod('POST') !== 'idle' ? 'Creating' : 'Create'}
          </button>
        </div>
      )}
    </AddressForm>
  );
}

function ExistingAddresses({
  addresses,
  defaultAddress,
}: Pick<CustomerFragment, 'addresses' | 'defaultAddress'>) {
  return (
    <div>
      <legend>Existing addresses</legend>
      {addresses.nodes.map((address) => (
        <AddressForm
          key={address.id}
          addressId={address.id}
          address={address}
          defaultAddress={defaultAddress}
        >
          {({stateForMethod}) => (
            <div>
              <button
                disabled={stateForMethod('PUT') !== 'idle'}
                formMethod="PUT"
                type="submit"
              >
                {stateForMethod('PUT') !== 'idle' ? 'Saving' : 'Save'}
              </button>
              <button
                disabled={stateForMethod('DELETE') !== 'idle'}
                formMethod="DELETE"
                type="submit"
              >
                {stateForMethod('DELETE') !== 'idle' ? 'Deleting' : 'Delete'}
              </button>
            </div>
          )}
        </AddressForm>
      ))}
    </div>
  );
}

export function AddressForm({
  addressId,
  address,
  defaultAddress,
  children,
}: {
  addressId: AddressFragment['id'];
  address: CustomerAddressInput;
  defaultAddress: CustomerFragment['defaultAddress'];
  children: (props: {
    stateForMethod: (method: 'PUT' | 'POST' | 'DELETE') => Fetcher['state'];
  }) => React.ReactNode;
}) {
  const {state, formMethod} = useNavigation();
  const action = useActionData<ActionResponse>();
  const error = action?.error?.[addressId];
  const isDefaultAddress = defaultAddress?.id === addressId;
  return (
    <Form id={addressId}>
      <fieldset>
        <input type="hidden" name="addressId" defaultValue={addressId} />
        <label htmlFor="firstName">First name*</label>
        <input
          aria-label="First name"
          autoComplete="given-name"
          defaultValue={address?.firstName ?? ''}
          id="firstName"
          name="firstName"
          placeholder="First name"
          required
          type="text"
        />
        <label htmlFor="lastName">Last name*</label>
        <input
          aria-label="Last name"
          autoComplete="family-name"
          defaultValue={address?.lastName ?? ''}
          id="lastName"
          name="lastName"
          placeholder="Last name"
          required
          type="text"
        />
        <label htmlFor="company">Company</label>
        <input
          aria-label="Company"
          autoComplete="organization"
          defaultValue={address?.company ?? ''}
          id="company"
          name="company"
          placeholder="Company"
          type="text"
        />
        <label htmlFor="address1">Address line*</label>
        <input
          aria-label="Address line 1"
          autoComplete="address-line1"
          defaultValue={address?.address1 ?? ''}
          id="address1"
          name="address1"
          placeholder="Address line 1*"
          required
          type="text"
        />
        <label htmlFor="address2">Address line 2</label>
        <input
          aria-label="Address line 2"
          autoComplete="address-line2"
          defaultValue={address?.address2 ?? ''}
          id="address2"
          name="address2"
          placeholder="Address line 2"
          type="text"
        />
        <label htmlFor="city">City*</label>
        <input
          aria-label="City"
          autoComplete="address-level2"
          defaultValue={address?.city ?? ''}
          id="city"
          name="city"
          placeholder="City"
          required
          type="text"
        />
        <label htmlFor="zoneCode">State / Province*</label>
        <input
          aria-label="State/Province"
          autoComplete="address-level1"
          defaultValue={address?.zoneCode ?? ''}
          id="zoneCode"
          name="zoneCode"
          placeholder="State / Province"
          required
          type="text"
        />
        <label htmlFor="zip">Zip / Postal Code*</label>
        <input
          aria-label="Zip"
          autoComplete="postal-code"
          defaultValue={address?.zip ?? ''}
          id="zip"
          name="zip"
          placeholder="Zip / Postal Code"
          required
          type="text"
        />
        <label htmlFor="territoryCode">Country Code*</label>
        <input
          aria-label="territoryCode"
          autoComplete="country"
          defaultValue={address?.territoryCode ?? ''}
          id="territoryCode"
          name="territoryCode"
          placeholder="Country"
          required
          type="text"
          maxLength={2}
        />
        <label htmlFor="phoneNumber">Phone</label>
        <input
          aria-label="Phone Number"
          autoComplete="tel"
          defaultValue={address?.phoneNumber ?? ''}
          id="phoneNumber"
          name="phoneNumber"
          placeholder="+16135551111"
          pattern="^\+?[1-9]\d{3,14}$"
          type="tel"
        />
        <div>
          <input
            defaultChecked={isDefaultAddress}
            id="defaultAddress"
            name="defaultAddress"
            type="checkbox"
          />
          <label htmlFor="defaultAddress">Set as default address</label>
        </div>
        {error ? (
          <p>
            <mark>
              <small>{error}</small>
            </mark>
          </p>
        ) : (
          <br />
        )}
        {children({
          stateForMethod: (method) => (formMethod === method ? state : 'idle'),
        })}
      </fieldset>
    </Form>
  );
}
</file>

<file path="app/routes/account.orders._index.tsx">
import { Link, useLoaderData, type MetaFunction } from 'react-router';
import {
  Money,
  getPaginationVariables,
  flattenConnection,
} from '@shopify/hydrogen';
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {CUSTOMER_ORDERS_QUERY} from '~/graphql/customer-account/CustomerOrdersQuery';
import type {
  CustomerOrdersFragment,
  OrderItemFragment,
} from 'customer-accountapi.generated';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';

export const meta: MetaFunction = () => {
  return [{title: 'Orders'}];
};

export async function loader({request, context}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 20,
  });

  const {data, errors} = await context.customerAccount.query(
    CUSTOMER_ORDERS_QUERY,
    {
      variables: {
        ...paginationVariables,
      },
    },
  );

  if (errors?.length || !data?.customer) {
    throw Error('Customer orders not found');
  }

  return {customer: data.customer};
}

export default function Orders() {
  const {customer} = useLoaderData<{customer: CustomerOrdersFragment}>();
  const {orders} = customer;
  return (
    <div className="orders">
      {orders.nodes.length ? <OrdersTable orders={orders} /> : <EmptyOrders />}
    </div>
  );
}

function OrdersTable({orders}: Pick<CustomerOrdersFragment, 'orders'>) {
  return (
    <div className="acccount-orders">
      {orders?.nodes.length ? (
        <PaginatedResourceSection connection={orders}>
          {({node: order}) => <OrderItem key={order.id} order={order} />}
        </PaginatedResourceSection>
      ) : (
        <EmptyOrders />
      )}
    </div>
  );
}

function EmptyOrders() {
  return (
    <div>
      <p>You haven&apos;t placed any orders yet.</p>
      <br />
      <p>
        <Link to="/collections">Start Shopping →</Link>
      </p>
    </div>
  );
}

function OrderItem({order}: {order: OrderItemFragment}) {
  const fulfillmentStatus = flattenConnection(order.fulfillments)[0]?.status;
  return (
    <>
      <fieldset>
        <Link to={`/account/orders/${btoa(order.id)}`}>
          <strong>#{order.number}</strong>
        </Link>
        <p>{new Date(order.processedAt).toDateString()}</p>
        <p>{order.financialStatus}</p>
        {fulfillmentStatus && <p>{fulfillmentStatus}</p>}
        <Money data={order.totalPrice} />
        <Link to={`/account/orders/${btoa(order.id)}`}>View Order →</Link>
      </fieldset>
      <br />
    </>
  );
}
</file>

<file path="app/routes/account.orders.$id.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { useLoaderData, type MetaFunction } from 'react-router';
import {Money, Image, flattenConnection} from '@shopify/hydrogen';
import type {OrderLineItemFullFragment} from 'customer-accountapi.generated';
import {CUSTOMER_ORDER_QUERY} from '~/graphql/customer-account/CustomerOrderQuery';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Order ${data?.order?.name}`}];
};

export async function loader({params, context}: LoaderFunctionArgs) {
  if (!params.id) {
    return redirect('/account/orders');
  }

  const orderId = atob(params.id);
  const {data, errors} = await context.customerAccount.query(
    CUSTOMER_ORDER_QUERY,
    {
      variables: {orderId},
    },
  );

  if (errors?.length || !data?.order) {
    throw new Error('Order not found');
  }

  const {order} = data;

  const lineItems = flattenConnection(order.lineItems);
  const discountApplications = flattenConnection(order.discountApplications);

  const fulfillmentStatus =
    flattenConnection(order.fulfillments)[0]?.status ?? 'N/A';

  const firstDiscount = discountApplications[0]?.value;

  const discountValue =
    firstDiscount?.__typename === 'MoneyV2' && firstDiscount;

  const discountPercentage =
    firstDiscount?.__typename === 'PricingPercentageValue' &&
    firstDiscount?.percentage;

  return {
    order,
    lineItems,
    discountValue,
    discountPercentage,
    fulfillmentStatus,
  };
}

export default function OrderRoute() {
  const {
    order,
    lineItems,
    discountValue,
    discountPercentage,
    fulfillmentStatus,
  } = useLoaderData<typeof loader>();
  return (
    (<div className="account-order">
      <h2>Order {order.name}</h2>
      <p>Placed on {new Date(order.processedAt!).toDateString()}</p>
      <br />
      <div>
        <table>
          <thead>
            <tr>
              <th scope="col">Product</th>
              <th scope="col">Price</th>
              <th scope="col">Quantity</th>
              <th scope="col">Total</th>
            </tr>
          </thead>
          <tbody>
            {lineItems.map((lineItem, lineItemIndex) => (
              // eslint-disable-next-line react/no-array-index-key
              (<OrderLineRow key={lineItemIndex} lineItem={lineItem} />)
            ))}
          </tbody>
          <tfoot>
            {((discountValue && discountValue.amount) ||
              discountPercentage) && (
              <tr>
                <th scope="row" colSpan={3}>
                  <p>Discounts</p>
                </th>
                <th scope="row">
                  <p>Discounts</p>
                </th>
                <td>
                  {discountPercentage ? (
                    <span>-{discountPercentage}% OFF</span>
                  ) : (
                    discountValue && <Money data={discountValue!} />
                  )}
                </td>
              </tr>
            )}
            <tr>
              <th scope="row" colSpan={3}>
                <p>Subtotal</p>
              </th>
              <th scope="row">
                <p>Subtotal</p>
              </th>
              <td>
                <Money data={order.subtotal!} />
              </td>
            </tr>
            <tr>
              <th scope="row" colSpan={3}>
                Tax
              </th>
              <th scope="row">
                <p>Tax</p>
              </th>
              <td>
                <Money data={order.totalTax!} />
              </td>
            </tr>
            <tr>
              <th scope="row" colSpan={3}>
                Total
              </th>
              <th scope="row">
                <p>Total</p>
              </th>
              <td>
                <Money data={order.totalPrice!} />
              </td>
            </tr>
          </tfoot>
        </table>
        <div>
          <h3>Shipping Address</h3>
          {order?.shippingAddress ? (
            <address>
              <p>{order.shippingAddress.name}</p>
              {order.shippingAddress.formatted ? (
                <p>{order.shippingAddress.formatted}</p>
              ) : (
                ''
              )}
              {order.shippingAddress.formattedArea ? (
                <p>{order.shippingAddress.formattedArea}</p>
              ) : (
                ''
              )}
            </address>
          ) : (
            <p>No shipping address defined</p>
          )}
          <h3>Status</h3>
          <div>
            <p>{fulfillmentStatus}</p>
          </div>
        </div>
      </div>
      <br />
      <p>
        <a target="_blank" href={order.statusPageUrl} rel="noreferrer">
          View Order Status →
        </a>
      </p>
    </div>)
  );
}

function OrderLineRow({lineItem}: {lineItem: OrderLineItemFullFragment}) {
  return (
    <tr key={lineItem.id}>
      <td>
        <div>
          {lineItem?.image && (
            <div>
              <Image data={lineItem.image} width={96} height={96} />
            </div>
          )}
          <div>
            <p>{lineItem.title}</p>
            <small>{lineItem.variantTitle}</small>
          </div>
        </div>
      </td>
      <td>
        <Money data={lineItem.price!} />
      </td>
      <td>{lineItem.quantity}</td>
      <td>
        <Money data={lineItem.totalDiscount!} />
      </td>
    </tr>
  );
}
</file>

<file path="app/routes/account.profile.tsx">
import type {CustomerFragment} from 'customer-accountapi.generated';
import type {CustomerUpdateInput} from '@shopify/hydrogen/customer-account-api-types';
import {CUSTOMER_UPDATE_MUTATION} from '~/graphql/customer-account/CustomerUpdateMutation';
import {
  data,
  type ActionFunctionArgs,
  type LoaderFunctionArgs,
} from '@shopify/remix-oxygen';
import { Form, useActionData, useNavigation, useOutletContext, type MetaFunction } from 'react-router';

export type ActionResponse = {
  error: string | null;
  customer: CustomerFragment | null;
};

export const meta: MetaFunction = () => {
  return [{title: 'Profile'}];
};

export async function loader({context}: LoaderFunctionArgs) {
  await context.customerAccount.handleAuthStatus();

  return {};
}

export async function action({request, context}: ActionFunctionArgs) {
  const {customerAccount} = context;

  if (request.method !== 'PUT') {
    return data({error: 'Method not allowed'}, {status: 405});
  }

  const form = await request.formData();

  try {
    const customer: CustomerUpdateInput = {};
    const validInputKeys = ['firstName', 'lastName'] as const;
    for (const [key, value] of form.entries()) {
      if (!validInputKeys.includes(key as any)) {
        continue;
      }
      if (typeof value === 'string' && value.length) {
        customer[key as (typeof validInputKeys)[number]] = value;
      }
    }

    // update customer and possibly password
    const {data, errors} = await customerAccount.mutate(
      CUSTOMER_UPDATE_MUTATION,
      {
        variables: {
          customer,
        },
      },
    );

    if (errors?.length) {
      throw new Error(errors[0].message);
    }

    if (!data?.customerUpdate?.customer) {
      throw new Error('Customer profile update failed.');
    }

    return {
      error: null,
      customer: data?.customerUpdate?.customer,
    };
  } catch (error: any) {
    return data(
      {error: error.message, customer: null},
      {
        status: 400,
      },
    );
  }
}

export default function AccountProfile() {
  const account = useOutletContext<{customer: CustomerFragment}>();
  const {state} = useNavigation();
  const action = useActionData<ActionResponse>();
  const customer = action?.customer ?? account?.customer;

  return (
    <div className="account-profile">
      <h2>My profile</h2>
      <br />
      <Form method="PUT">
        <legend>Personal information</legend>
        <fieldset>
          <label htmlFor="firstName">First name</label>
          <input
            id="firstName"
            name="firstName"
            type="text"
            autoComplete="given-name"
            placeholder="First name"
            aria-label="First name"
            defaultValue={customer.firstName ?? ''}
            minLength={2}
          />
          <label htmlFor="lastName">Last name</label>
          <input
            id="lastName"
            name="lastName"
            type="text"
            autoComplete="family-name"
            placeholder="Last name"
            aria-label="Last name"
            defaultValue={customer.lastName ?? ''}
            minLength={2}
          />
        </fieldset>
        {action?.error ? (
          <p>
            <mark>
              <small>{action.error}</small>
            </mark>
          </p>
        ) : (
          <br />
        )}
        <button type="submit" disabled={state !== 'idle'}>
          {state !== 'idle' ? 'Updating' : 'Update'}
        </button>
      </Form>
    </div>
  );
}
</file>

<file path="app/routes/account.tsx">
import {data as remixData, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { Form, NavLink, Outlet, useLoaderData } from 'react-router';
import {CUSTOMER_DETAILS_QUERY} from '~/graphql/customer-account/CustomerDetailsQuery';

export function shouldRevalidate() {
  return true;
}

export async function loader({context}: LoaderFunctionArgs) {
  const {data, errors} = await context.customerAccount.query(
    CUSTOMER_DETAILS_QUERY,
  );

  if (errors?.length || !data?.customer) {
    throw new Error('Customer not found');
  }

  return remixData(
    {customer: data.customer},
    {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
      },
    },
  );
}

export default function AccountLayout() {
  const {customer} = useLoaderData<typeof loader>();

  const heading = customer
    ? customer.firstName
      ? `Welcome, ${customer.firstName}`
      : `Welcome to your account.`
    : 'Account Details';

  return (
    <div className="account">
      <h1>{heading}</h1>
      <br />
      <AccountMenu />
      <br />
      <br />
      <Outlet context={{customer}} />
    </div>
  );
}

function AccountMenu() {
  function isActiveStyle({
    isActive,
    isPending,
  }: {
    isActive: boolean;
    isPending: boolean;
  }) {
    return {
      fontWeight: isActive ? 'bold' : undefined,
      color: isPending ? 'grey' : 'black',
    };
  }

  return (
    <nav role="navigation">
      <NavLink to="/account/orders" style={isActiveStyle}>
        Orders &nbsp;
      </NavLink>
      &nbsp;|&nbsp;
      <NavLink to="/account/profile" style={isActiveStyle}>
        &nbsp; Profile &nbsp;
      </NavLink>
      &nbsp;|&nbsp;
      <NavLink to="/account/addresses" style={isActiveStyle}>
        &nbsp; Addresses &nbsp;
      </NavLink>
      &nbsp;|&nbsp;
      <Logout />
    </nav>
  );
}

function Logout() {
  return (
    <Form className="account-logout" method="POST" action="/account/logout">
      &nbsp;<button type="submit">Sign out</button>
    </Form>
  );
}
</file>

<file path="app/routes/api.$version.[graphql.json].tsx">
import {LoaderFunctionArgs} from 'react-router';

export async function action({params, context, request}: LoaderFunctionArgs) {
  const response = await fetch(
    `https://${context.env.PUBLIC_CHECKOUT_DOMAIN}/api/${params.version}/graphql.json`,
    {
      method: 'POST',
      body: request.body,
      headers: request.headers,
    },
  );

  return new Response(response.body, {headers: new Headers(response.headers)});
}
</file>

<file path="app/routes/blogs._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { Link, useLoaderData, type MetaFunction } from 'react-router';
import {getPaginationVariables} from '@shopify/hydrogen';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';

export const meta: MetaFunction = () => {
  return [{title: `Hydrogen | Blogs`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context, request}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 10,
  });

  const [{blogs}] = await Promise.all([
    context.storefront.query(BLOGS_QUERY, {
      variables: {
        ...paginationVariables,
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {blogs};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Blogs() {
  const {blogs} = useLoaderData<typeof loader>();

  return (
    <div className="blogs">
      <h1>Blogs</h1>
      <div className="blogs-grid">
        <PaginatedResourceSection connection={blogs}>
          {({node: blog}) => (
            <Link
              className="blog"
              key={blog.handle}
              prefetch="intent"
              to={`/blogs/${blog.handle}`}
            >
              <h2>{blog.title}</h2>
            </Link>
          )}
        </PaginatedResourceSection>
      </div>
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/blog
const BLOGS_QUERY = `#graphql
  query Blogs(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    blogs(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor
    ) {
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      nodes {
        title
        handle
        seo {
          title
          description
        }
      }
    }
  }
` as const;
</file>

<file path="app/routes/blogs.$blogHandle._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { Link, useLoaderData, type MetaFunction } from 'react-router';
import {Image, getPaginationVariables} from '@shopify/hydrogen';
import type {ArticleItemFragment} from 'storefrontapi.generated';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.blog.title ?? ''} blog`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  request,
  params,
}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 4,
  });

  if (!params.blogHandle) {
    throw new Response(`blog not found`, {status: 404});
  }

  const [{blog}] = await Promise.all([
    context.storefront.query(BLOGS_QUERY, {
      variables: {
        blogHandle: params.blogHandle,
        ...paginationVariables,
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!blog?.articles) {
    throw new Response('Not found', {status: 404});
  }

  redirectIfHandleIsLocalized(request, {handle: params.blogHandle, data: blog});

  return {blog};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Blog() {
  const {blog} = useLoaderData<typeof loader>();
  const {articles} = blog;

  return (
    <div className="blog">
      <h1>{blog.title}</h1>
      <div className="blog-grid">
        <PaginatedResourceSection connection={articles}>
          {({node: article, index}) => (
            <ArticleItem
              article={article}
              key={article.id}
              loading={index < 2 ? 'eager' : 'lazy'}
            />
          )}
        </PaginatedResourceSection>
      </div>
    </div>
  );
}

function ArticleItem({
  article,
  loading,
}: {
  article: ArticleItemFragment;
  loading?: HTMLImageElement['loading'];
}) {
  const publishedAt = new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(new Date(article.publishedAt!));
  return (
    <div className="blog-article" key={article.id}>
      <Link to={`/blogs/${article.blog.handle}/${article.handle}`}>
        {article.image && (
          <div className="blog-article-image">
            <Image
              alt={article.image.altText || article.title}
              aspectRatio="3/2"
              data={article.image}
              loading={loading}
              sizes="(min-width: 768px) 50vw, 100vw"
            />
          </div>
        )}
        <h3>{article.title}</h3>
        <small>{publishedAt}</small>
      </Link>
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/blog
const BLOGS_QUERY = `#graphql
  query Blog(
    $language: LanguageCode
    $blogHandle: String!
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(language: $language) {
    blog(handle: $blogHandle) {
      title
      handle
      seo {
        title
        description
      }
      articles(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor
      ) {
        nodes {
          ...ArticleItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          hasNextPage
          endCursor
          startCursor
        }

      }
    }
  }
  fragment ArticleItem on Article {
    author: authorV2 {
      name
    }
    contentHtml
    handle
    id
    image {
      id
      altText
      url
      width
      height
    }
    publishedAt
    title
    blog {
      handle
    }
  }
` as const;
</file>

<file path="app/routes/blogs.$blogHandle.$articleHandle.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { useLoaderData, type MetaFunction } from 'react-router';
import {Image} from '@shopify/hydrogen';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.article.title ?? ''} article`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  request,
  params,
}: LoaderFunctionArgs) {
  const {blogHandle, articleHandle} = params;

  if (!articleHandle || !blogHandle) {
    throw new Response('Not found', {status: 404});
  }

  const [{blog}] = await Promise.all([
    context.storefront.query(ARTICLE_QUERY, {
      variables: {blogHandle, articleHandle},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!blog?.articleByHandle) {
    throw new Response(null, {status: 404});
  }

  redirectIfHandleIsLocalized(
    request,
    {
      handle: articleHandle,
      data: blog.articleByHandle,
    },
    {
      handle: blogHandle,
      data: blog,
    },
  );

  const article = blog.articleByHandle;

  return {article};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Article() {
  const {article} = useLoaderData<typeof loader>();
  const {title, image, contentHtml, author} = article;

  const publishedDate = new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(new Date(article.publishedAt));

  return (
    <div className="article">
      <h1>
        {title}
        <div>
          <time dateTime={article.publishedAt}>{publishedDate}</time> &middot;{' '}
          <address>{author?.name}</address>
        </div>
      </h1>

      {image && <Image data={image} sizes="90vw" loading="eager" />}
      <div
        dangerouslySetInnerHTML={{__html: contentHtml}}
        className="article"
      />
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/blog#field-blog-articlebyhandle
const ARTICLE_QUERY = `#graphql
  query Article(
    $articleHandle: String!
    $blogHandle: String!
    $country: CountryCode
    $language: LanguageCode
  ) @inContext(language: $language, country: $country) {
    blog(handle: $blogHandle) {
      handle
      articleByHandle(handle: $articleHandle) {
        handle
        title
        contentHtml
        publishedAt
        author: authorV2 {
          name
        }
        image {
          id
          altText
          url
          width
          height
        }
        seo {
          description
          title
        }
      }
    }
  }
` as const;
</file>

<file path="app/routes/cart.$lines.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

/**
 * Automatically creates a new cart based on the URL and redirects straight to checkout.
 * Expected URL structure:
 * ```js
 * /cart/<variant_id>:<quantity>
 *
 * ```
 *
 * More than one `<variant_id>:<quantity>` separated by a comma, can be supplied in the URL, for
 * carts with more than one product variant.
 *
 * @example
 * Example path creating a cart with two product variants, different quantities, and a discount code in the querystring:
 * ```js
 * /cart/41007289663544:1,41007289696312:2?discount=HYDROBOARD
 *
 * ```
 */
export async function loader({request, context, params}: LoaderFunctionArgs) {
  const {cart} = context;
  const {lines} = params;
  if (!lines) return redirect('/cart');
  const linesMap = lines.split(',').map((line) => {
    const lineDetails = line.split(':');
    const variantId = lineDetails[0];
    const quantity = parseInt(lineDetails[1], 10);

    return {
      merchandiseId: `gid://shopify/ProductVariant/${variantId}`,
      quantity,
    };
  });

  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);

  const discount = searchParams.get('discount');
  const discountArray = discount ? [discount] : [];

  // create a cart
  const result = await cart.create({
    lines: linesMap,
    discountCodes: discountArray,
  });

  const cartResult = result.cart;

  if (result.errors?.length || !cartResult) {
    throw new Response('Link may be expired. Try checking the URL.', {
      status: 410,
    });
  }

  // Update cart id in cookie
  const headers = cart.setCartId(cartResult.id);

  // redirect to checkout
  if (cartResult.checkoutUrl) {
    return redirect(cartResult.checkoutUrl, {headers});
  } else {
    throw new Error('No checkout URL found');
  }
}

export default function Component() {
  return null;
}
</file>

<file path="app/routes/cart.tsx">
import { type MetaFunction, useLoaderData } from 'react-router';
import type {CartQueryDataReturn} from '@shopify/hydrogen';
import {CartForm} from '@shopify/hydrogen';
import {
  data,
  type LoaderFunctionArgs,
  type ActionFunctionArgs,
  type HeadersFunction,
} from '@shopify/remix-oxygen';
import {CartMain} from '~/components/CartMain';

export const meta: MetaFunction = () => {
  return [{title: `Hydrogen | Cart`}];
};

export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;

export async function action({request, context}: ActionFunctionArgs) {
  const {cart} = context;

  const formData = await request.formData();

  const {action, inputs} = CartForm.getFormInput(formData);

  if (!action) {
    throw new Error('No action provided');
  }

  let status = 200;
  let result: CartQueryDataReturn;

  switch (action) {
    case CartForm.ACTIONS.LinesAdd:
      result = await cart.addLines(inputs.lines);
      break;
    case CartForm.ACTIONS.LinesUpdate:
      result = await cart.updateLines(inputs.lines);
      break;
    case CartForm.ACTIONS.LinesRemove:
      result = await cart.removeLines(inputs.lineIds);
      break;
    case CartForm.ACTIONS.DiscountCodesUpdate: {
      const formDiscountCode = inputs.discountCode;

      // User inputted discount code
      const discountCodes = (
        formDiscountCode ? [formDiscountCode] : []
      ) as string[];

      // Combine discount codes already applied on cart
      discountCodes.push(...inputs.discountCodes);

      result = await cart.updateDiscountCodes(discountCodes);
      break;
    }
    case CartForm.ACTIONS.GiftCardCodesUpdate: {
      const formGiftCardCode = inputs.giftCardCode;

      // User inputted gift card code
      const giftCardCodes = (
        formGiftCardCode ? [formGiftCardCode] : []
      ) as string[];

      // Combine gift card codes already applied on cart
      giftCardCodes.push(...inputs.giftCardCodes);

      result = await cart.updateGiftCardCodes(giftCardCodes);
      break;
    }
    case CartForm.ACTIONS.BuyerIdentityUpdate: {
      result = await cart.updateBuyerIdentity({
        ...inputs.buyerIdentity,
      });
      break;
    }
    default:
      throw new Error(`${action} cart action is not defined`);
  }

  const cartId = result?.cart?.id;
  const headers = cartId ? cart.setCartId(result.cart.id) : new Headers();
  const {cart: cartResult, errors, warnings} = result;

  const redirectTo = formData.get('redirectTo') ?? null;
  if (typeof redirectTo === 'string') {
    status = 303;
    headers.set('Location', redirectTo);
  }

  return data(
    {
      cart: cartResult,
      errors,
      warnings,
      analytics: {
        cartId,
      },
    },
    {status, headers},
  );
}

export async function loader({context}: LoaderFunctionArgs) {
  const {cart} = context;
  return await cart.get();
}

export default function Cart() {
  const cart = useLoaderData<typeof loader>();

  return (
    <div className="cart">
      <h1>Cart</h1>
      <CartMain layout="page" cart={cart} />
    </div>
  );
}
</file>

<file path="app/routes/collections._index.tsx">
import { useLoaderData, Link } from 'react-router';
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {getPaginationVariables, Image} from '@shopify/hydrogen';
import type {CollectionFragment} from 'storefrontapi.generated';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context, request}: LoaderFunctionArgs) {
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 4,
  });

  const [{collections}] = await Promise.all([
    context.storefront.query(COLLECTIONS_QUERY, {
      variables: paginationVariables,
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {collections};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Collections() {
  const {collections} = useLoaderData<typeof loader>();

  return (
    <div className="collections">
      <h1>Collections</h1>
      <PaginatedResourceSection
        connection={collections}
        resourcesClassName="collections-grid"
      >
        {({node: collection, index}) => (
          <CollectionItem
            key={collection.id}
            collection={collection}
            index={index}
          />
        )}
      </PaginatedResourceSection>
    </div>
  );
}

function CollectionItem({
  collection,
  index,
}: {
  collection: CollectionFragment;
  index: number;
}) {
  return (
    <Link
      className="collection-item"
      key={collection.id}
      to={`/collections/${collection.handle}`}
      prefetch="intent"
    >
      {collection?.image && (
        <Image
          alt={collection.image.altText || collection.title}
          aspectRatio="1/1"
          data={collection.image}
          loading={index < 3 ? 'eager' : undefined}
          sizes="(min-width: 45em) 400px, 100vw"
        />
      )}
      <h5>{collection.title}</h5>
    </Link>
  );
}

const COLLECTIONS_QUERY = `#graphql
  fragment Collection on Collection {
    id
    title
    handle
    image {
      id
      url
      altText
      width
      height
    }
  }
  query StoreCollections(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    collections(
      first: $first,
      last: $last,
      before: $startCursor,
      after: $endCursor
    ) {
      nodes {
        ...Collection
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
` as const;
</file>

<file path="app/routes/collections.$handle.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {getPaginationVariables, Analytics} from '@shopify/hydrogen';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';
import {ProductItem} from '~/components/ProductItem';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.collection.title ?? ''} Collection`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  params,
  request,
}: LoaderFunctionArgs) {
  const {handle} = params;
  const {storefront} = context;
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 8,
  });

  if (!handle) {
    throw redirect('/collections');
  }

  const [{collection}] = await Promise.all([
    storefront.query(COLLECTION_QUERY, {
      variables: {handle, ...paginationVariables},
      // Add other queries here, so that they are loaded in parallel
    }),
  ]);

  if (!collection) {
    throw new Response(`Collection ${handle} not found`, {
      status: 404,
    });
  }

  // The API handle might be localized, so redirect to the localized handle
  redirectIfHandleIsLocalized(request, {handle, data: collection});

  return {
    collection,
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Collection() {
  const {collection} = useLoaderData<typeof loader>();

  return (
    <div className="collection">
      <h1>{collection.title}</h1>
      <p className="collection-description">{collection.description}</p>
      <PaginatedResourceSection
        connection={collection.products}
        resourcesClassName="products-grid"
      >
        {({node: product, index}) => (
          <ProductItem
            key={product.id}
            product={product}
            loading={index < 8 ? 'eager' : undefined}
          />
        )}
      </PaginatedResourceSection>
      <Analytics.CollectionView
        data={{
          collection: {
            id: collection.id,
            handle: collection.handle,
          },
        }}
      />
    </div>
  );
}

const PRODUCT_ITEM_FRAGMENT = `#graphql
  fragment MoneyProductItem on MoneyV2 {
    amount
    currencyCode
  }
  fragment ProductItem on Product {
    id
    handle
    title
    featuredImage {
      id
      altText
      url
      width
      height
    }
    priceRange {
      minVariantPrice {
        ...MoneyProductItem
      }
      maxVariantPrice {
        ...MoneyProductItem
      }
    }
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/2022-04/objects/collection
const COLLECTION_QUERY = `#graphql
  ${PRODUCT_ITEM_FRAGMENT}
  query Collection(
    $handle: String!
    $country: CountryCode
    $language: LanguageCode
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(country: $country, language: $language) {
    collection(handle: $handle) {
      id
      handle
      title
      description
      products(
        first: $first,
        last: $last,
        before: $startCursor,
        after: $endCursor
      ) {
        nodes {
          ...ProductItem
        }
        pageInfo {
          hasPreviousPage
          hasNextPage
          endCursor
          startCursor
        }
      }
    }
  }
` as const;
</file>

<file path="app/routes/collections.all.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {useLoaderData, type MetaFunction} from 'react-router';
import {getPaginationVariables, Image, Money} from '@shopify/hydrogen';
import {PaginatedResourceSection} from '~/components/PaginatedResourceSection';
import {ProductItem} from '~/components/ProductItem';

export const meta: MetaFunction<typeof loader> = () => {
  return [{title: `Hydrogen | Products`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context, request}: LoaderFunctionArgs) {
  const {storefront} = context;
  const paginationVariables = getPaginationVariables(request, {
    pageBy: 8,
  });

  const [{products}] = await Promise.all([
    storefront.query(CATALOG_QUERY, {
      variables: {...paginationVariables},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);
  return {products};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Collection() {
  const {products} = useLoaderData<typeof loader>();

  return (
    <div className="collection">
      <h1>Products</h1>
      <PaginatedResourceSection
        connection={products}
        resourcesClassName="products-grid"
      >
        {({node: product, index}) => (
          <ProductItem
            key={product.id}
            product={product}
            loading={index < 8 ? 'eager' : undefined}
          />
        )}
      </PaginatedResourceSection>
    </div>
  );
}

const COLLECTION_ITEM_FRAGMENT = `#graphql
  fragment MoneyCollectionItem on MoneyV2 {
    amount
    currencyCode
  }
  fragment CollectionItem on Product {
    id
    handle
    title
    featuredImage {
      id
      altText
      url
      width
      height
    }
    priceRange {
      minVariantPrice {
        ...MoneyCollectionItem
      }
      maxVariantPrice {
        ...MoneyCollectionItem
      }
    }
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/product
const CATALOG_QUERY = `#graphql
  query Catalog(
    $country: CountryCode
    $language: LanguageCode
    $first: Int
    $last: Int
    $startCursor: String
    $endCursor: String
  ) @inContext(country: $country, language: $language) {
    products(first: $first, last: $last, before: $startCursor, after: $endCursor) {
      nodes {
        ...CollectionItem
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
    }
  }
  ${COLLECTION_ITEM_FRAGMENT}
` as const;
</file>

<file path="app/routes/discount.$code.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';

/**
 * Automatically applies a discount found on the url
 * If a cart exists it's updated with the discount, otherwise a cart is created with the discount already applied
 *
 * @example
 * Example path applying a discount and optional redirecting (defaults to the home page)
 * ```js
 * /discount/FREESHIPPING?redirect=/products
 *
 * ```
 */
export async function loader({request, context, params}: LoaderFunctionArgs) {
  const {cart} = context;
  const {code} = params;

  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);
  let redirectParam =
    searchParams.get('redirect') || searchParams.get('return_to') || '/';

  if (redirectParam.includes('//')) {
    // Avoid redirecting to external URLs to prevent phishing attacks
    redirectParam = '/';
  }

  searchParams.delete('redirect');
  searchParams.delete('return_to');

  const redirectUrl = `${redirectParam}?${searchParams}`;

  if (!code) {
    return redirect(redirectUrl);
  }

  const result = await cart.updateDiscountCodes([code]);
  const headers = cart.setCartId(result.cart.id);

  // Using set-cookie on a 303 redirect will not work if the domain origin have port number (:3000)
  // If there is no cart id and a new cart id is created in the progress, it will not be set in the cookie
  // on localhost:3000
  return redirect(redirectUrl, {
    status: 303,
    headers,
  });
}
</file>

<file path="app/routes/pages.$handle.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { useLoaderData, type MetaFunction } from 'react-router';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.page.title ?? ''}`}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  request,
  params,
}: LoaderFunctionArgs) {
  if (!params.handle) {
    throw new Error('Missing page handle');
  }

  const [{page}] = await Promise.all([
    context.storefront.query(PAGE_QUERY, {
      variables: {
        handle: params.handle,
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!page) {
    throw new Response('Not Found', {status: 404});
  }

  redirectIfHandleIsLocalized(request, {handle: params.handle, data: page});

  return {
    page,
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  return {};
}

export default function Page() {
  const {page} = useLoaderData<typeof loader>();

  return (
    <div className="page">
      <header>
        <h1>{page.title}</h1>
      </header>
      <main dangerouslySetInnerHTML={{__html: page.body}} />
    </div>
  );
}

const PAGE_QUERY = `#graphql
  query Page(
    $language: LanguageCode,
    $country: CountryCode,
    $handle: String!
  )
  @inContext(language: $language, country: $country) {
    page(handle: $handle) {
      handle
      id
      title
      body
      seo {
        description
        title
      }
    }
  }
` as const;
</file>

<file path="app/routes/policies._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { useLoaderData, Link } from 'react-router';

export async function loader({context}: LoaderFunctionArgs) {
  const data = await context.storefront.query(POLICIES_QUERY);
  const policies = Object.values(data.shop || {});

  if (!policies.length) {
    throw new Response('No policies found', {status: 404});
  }

  return {policies};
}

export default function Policies() {
  const {policies} = useLoaderData<typeof loader>();

  return (
    <div className="policies">
      <h1>Policies</h1>
      <div>
        {policies.map((policy) => {
          if (!policy) return null;
          return (
            <fieldset key={policy.id}>
              <Link to={`/policies/${policy.handle}`}>{policy.title}</Link>
            </fieldset>
          );
        })}
      </div>
    </div>
  );
}

const POLICIES_QUERY = `#graphql
  fragment PolicyItem on ShopPolicy {
    id
    title
    handle
  }
  query Policies ($country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    shop {
      privacyPolicy {
        ...PolicyItem
      }
      shippingPolicy {
        ...PolicyItem
      }
      termsOfService {
        ...PolicyItem
      }
      refundPolicy {
        ...PolicyItem
      }
      subscriptionPolicy {
        id
        title
        handle
      }
    }
  }
` as const;
</file>

<file path="app/routes/policies.$handle.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { Link, useLoaderData, type MetaFunction } from 'react-router';
import {type Shop} from '@shopify/hydrogen/storefront-api-types';

type SelectedPolicies = keyof Pick<
  Shop,
  'privacyPolicy' | 'shippingPolicy' | 'termsOfService' | 'refundPolicy'
>;

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [{title: `Hydrogen | ${data?.policy.title ?? ''}`}];
};

export async function loader({params, context}: LoaderFunctionArgs) {
  if (!params.handle) {
    throw new Response('No handle was passed in', {status: 404});
  }

  const policyName = params.handle.replace(
    /-([a-z])/g,
    (_: unknown, m1: string) => m1.toUpperCase(),
  ) as SelectedPolicies;

  const data = await context.storefront.query(POLICY_CONTENT_QUERY, {
    variables: {
      privacyPolicy: false,
      shippingPolicy: false,
      termsOfService: false,
      refundPolicy: false,
      [policyName]: true,
      language: context.storefront.i18n?.language,
    },
  });

  const policy = data.shop?.[policyName];

  if (!policy) {
    throw new Response('Could not find the policy', {status: 404});
  }

  return {policy};
}

export default function Policy() {
  const {policy} = useLoaderData<typeof loader>();

  return (
    <div className="policy">
      <br />
      <br />
      <div>
        <Link to="/policies">← Back to Policies</Link>
      </div>
      <br />
      <h1>{policy.title}</h1>
      <div dangerouslySetInnerHTML={{__html: policy.body}} />
    </div>
  );
}

// NOTE: https://shopify.dev/docs/api/storefront/latest/objects/Shop
const POLICY_CONTENT_QUERY = `#graphql
  fragment Policy on ShopPolicy {
    body
    handle
    id
    title
    url
  }
  query Policy(
    $country: CountryCode
    $language: LanguageCode
    $privacyPolicy: Boolean!
    $refundPolicy: Boolean!
    $shippingPolicy: Boolean!
    $termsOfService: Boolean!
  ) @inContext(language: $language, country: $country) {
    shop {
      privacyPolicy @include(if: $privacyPolicy) {
        ...Policy
      }
      shippingPolicy @include(if: $shippingPolicy) {
        ...Policy
      }
      termsOfService @include(if: $termsOfService) {
        ...Policy
      }
      refundPolicy @include(if: $refundPolicy) {
        ...Policy
      }
    }
  }
` as const;
</file>

<file path="app/routes/products.$handle.tsx">
import {redirect, type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { useLoaderData, type MetaFunction } from 'react-router';
import {
  getSelectedProductOptions,
  Analytics,
  useOptimisticVariant,
  getProductOptions,
  getAdjacentAndFirstAvailableVariants,
  useSelectedOptionInUrlParam,
} from '@shopify/hydrogen';
import {ProductPrice} from '~/components/ProductPrice';
import {ProductImage} from '~/components/ProductImage';
import {ProductForm} from '~/components/ProductForm';
import {redirectIfHandleIsLocalized} from '~/lib/redirect';

export const meta: MetaFunction<typeof loader> = ({data}) => {
  return [
    {title: `Hydrogen | ${data?.product.title ?? ''}`},
    {
      rel: 'canonical',
      href: `/products/${data?.product.handle}`,
    },
  ];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({
  context,
  params,
  request,
}: LoaderFunctionArgs) {
  const {handle} = params;
  const {storefront} = context;

  if (!handle) {
    throw new Error('Expected product handle to be defined');
  }

  const [{product}] = await Promise.all([
    storefront.query(PRODUCT_QUERY, {
      variables: {handle, selectedOptions: getSelectedProductOptions(request)},
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  if (!product?.id) {
    throw new Response(null, {status: 404});
  }

  // The API handle might be localized, so redirect to the localized handle
  redirectIfHandleIsLocalized(request, {handle, data: product});

  return {
    product,
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context, params}: LoaderFunctionArgs) {
  // Put any API calls that is not critical to be available on first page render
  // For example: product reviews, product recommendations, social feeds.

  return {};
}

export default function Product() {
  const {product} = useLoaderData<typeof loader>();

  // Optimistically selects a variant with given available variant information
  const selectedVariant = useOptimisticVariant(
    product.selectedOrFirstAvailableVariant,
    getAdjacentAndFirstAvailableVariants(product),
  );

  // Sets the search param to the selected variant without navigation
  // only when no search params are set in the url
  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);

  // Get the product options array
  const productOptions = getProductOptions({
    ...product,
    selectedOrFirstAvailableVariant: selectedVariant,
  });

  const {title, descriptionHtml} = product;

  return (
    <div className="product">
      <ProductImage image={selectedVariant?.image} />
      <div className="product-main">
        <h1>{title}</h1>
        <ProductPrice
          price={selectedVariant?.price}
          compareAtPrice={selectedVariant?.compareAtPrice}
        />
        <br />
        <ProductForm
          productOptions={productOptions}
          selectedVariant={selectedVariant}
        />
        <br />
        <br />
        <p>
          <strong>Description</strong>
        </p>
        <br />
        <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />
        <br />
      </div>
      <Analytics.ProductView
        data={{
          products: [
            {
              id: product.id,
              title: product.title,
              price: selectedVariant?.price.amount || '0',
              vendor: product.vendor,
              variantId: selectedVariant?.id || '',
              variantTitle: selectedVariant?.title || '',
              quantity: 1,
            },
          ],
        }}
      />
    </div>
  );
}

const PRODUCT_VARIANT_FRAGMENT = `#graphql
  fragment ProductVariant on ProductVariant {
    availableForSale
    compareAtPrice {
      amount
      currencyCode
    }
    id
    image {
      __typename
      id
      url
      altText
      width
      height
    }
    price {
      amount
      currencyCode
    }
    product {
      title
      handle
    }
    selectedOptions {
      name
      value
    }
    sku
    title
    unitPrice {
      amount
      currencyCode
    }
  }
` as const;

const PRODUCT_FRAGMENT = `#graphql
  fragment Product on Product {
    id
    title
    vendor
    handle
    descriptionHtml
    description
    encodedVariantExistence
    encodedVariantAvailability
    options {
      name
      optionValues {
        name
        firstSelectableVariant {
          ...ProductVariant
        }
        swatch {
          color
          image {
            previewImage {
              url
            }
          }
        }
      }
    }
    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
      ...ProductVariant
    }
    adjacentVariants (selectedOptions: $selectedOptions) {
      ...ProductVariant
    }
    seo {
      description
      title
    }
  }
  ${PRODUCT_VARIANT_FRAGMENT}
` as const;

const PRODUCT_QUERY = `#graphql
  query Product(
    $country: CountryCode
    $handle: String!
    $language: LanguageCode
    $selectedOptions: [SelectedOptionInput!]!
  ) @inContext(country: $country, language: $language) {
    product(handle: $handle) {
      ...Product
    }
  }
  ${PRODUCT_FRAGMENT}
` as const;
</file>

<file path="app/routes/search.tsx">
import {
  type LoaderFunctionArgs,
  type ActionFunctionArgs,
} from '@shopify/remix-oxygen';
import { useLoaderData, type MetaFunction } from 'react-router';
import {getPaginationVariables, Analytics} from '@shopify/hydrogen';
import {SearchForm} from '~/components/SearchForm';
import {SearchResults} from '~/components/SearchResults';
import {
  type RegularSearchReturn,
  type PredictiveSearchReturn,
  getEmptyPredictiveSearchResult,
} from '~/lib/search';

export const meta: MetaFunction = () => {
  return [{title: `Hydrogen | Search`}];
};

export async function loader({request, context}: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const isPredictive = url.searchParams.has('predictive');
  const searchPromise: Promise<PredictiveSearchReturn | RegularSearchReturn> =
    isPredictive
      ? predictiveSearch({request, context})
      : regularSearch({request, context});

  searchPromise.catch((error: Error) => {
    console.error(error);
    return {term: '', result: null, error: error.message};
  });

  return await searchPromise;
}

/**
 * Renders the /search route
 */
export default function SearchPage() {
  const {type, term, result, error} = useLoaderData<typeof loader>();
  if (type === 'predictive') return null;

  return (
    <div className="search">
      <h1>Search</h1>
      <SearchForm>
        {({inputRef}) => (
          <>
            <input
              defaultValue={term}
              name="q"
              placeholder="Search…"
              ref={inputRef}
              type="search"
            />
            &nbsp;
            <button type="submit">Search</button>
          </>
        )}
      </SearchForm>
      {error && <p style={{color: 'red'}}>{error}</p>}
      {!term || !result?.total ? (
        <SearchResults.Empty />
      ) : (
        <SearchResults result={result} term={term}>
          {({articles, pages, products, term}) => (
            <div>
              <SearchResults.Products products={products} term={term} />
              <SearchResults.Pages pages={pages} term={term} />
              <SearchResults.Articles articles={articles} term={term} />
            </div>
          )}
        </SearchResults>
      )}
      <Analytics.SearchView data={{searchTerm: term, searchResults: result}} />
    </div>
  );
}

/**
 * Regular search query and fragments
 * (adjust as needed)
 */
const SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment SearchProduct on Product {
    __typename
    handle
    id
    publishedAt
    title
    trackingParameters
    vendor
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
      compareAtPrice {
        amount
        currencyCode
      }
      selectedOptions {
        name
        value
      }
      product {
        handle
        title
      }
    }
  }
` as const;

const SEARCH_PAGE_FRAGMENT = `#graphql
  fragment SearchPage on Page {
     __typename
     handle
    id
    title
    trackingParameters
  }
` as const;

const SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment SearchArticle on Article {
    __typename
    handle
    id
    title
    trackingParameters
  }
` as const;

const PAGE_INFO_FRAGMENT = `#graphql
  fragment PageInfoFragment on PageInfo {
    hasNextPage
    hasPreviousPage
    startCursor
    endCursor
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/search
export const SEARCH_QUERY = `#graphql
  query RegularSearch(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $term: String!
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    articles: search(
      query: $term,
      types: [ARTICLE],
      first: $first,
    ) {
      nodes {
        ...on Article {
          ...SearchArticle
        }
      }
    }
    pages: search(
      query: $term,
      types: [PAGE],
      first: $first,
    ) {
      nodes {
        ...on Page {
          ...SearchPage
        }
      }
    }
    products: search(
      after: $endCursor,
      before: $startCursor,
      first: $first,
      last: $last,
      query: $term,
      sortKey: RELEVANCE,
      types: [PRODUCT],
      unavailableProducts: HIDE,
    ) {
      nodes {
        ...on Product {
          ...SearchProduct
        }
      }
      pageInfo {
        ...PageInfoFragment
      }
    }
  }
  ${SEARCH_PRODUCT_FRAGMENT}
  ${SEARCH_PAGE_FRAGMENT}
  ${SEARCH_ARTICLE_FRAGMENT}
  ${PAGE_INFO_FRAGMENT}
` as const;

/**
 * Regular search fetcher
 */
async function regularSearch({
  request,
  context,
}: Pick<
  LoaderFunctionArgs,
  'request' | 'context'
>): Promise<RegularSearchReturn> {
  const {storefront} = context;
  const url = new URL(request.url);
  const variables = getPaginationVariables(request, {pageBy: 8});
  const term = String(url.searchParams.get('q') || '');

  // Search articles, pages, and products for the `q` term
  const {errors, ...items} = await storefront.query(SEARCH_QUERY, {
    variables: {...variables, term},
  });

  if (!items) {
    throw new Error('No search data returned from Shopify API');
  }

  const total = Object.values(items).reduce(
    (acc, {nodes}) => acc + nodes.length,
    0,
  );

  const error = errors
    ? errors.map(({message}) => message).join(', ')
    : undefined;

  return {type: 'regular', term, error, result: {total, items}};
}

/**
 * Predictive search query and fragments
 * (adjust as needed)
 */
const PREDICTIVE_SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment PredictiveArticle on Article {
    __typename
    id
    title
    handle
    blog {
      handle
    }
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_COLLECTION_FRAGMENT = `#graphql
  fragment PredictiveCollection on Collection {
    __typename
    id
    title
    handle
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PAGE_FRAGMENT = `#graphql
  fragment PredictivePage on Page {
    __typename
    id
    title
    handle
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment PredictiveProduct on Product {
    __typename
    id
    title
    handle
    trackingParameters
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
    }
  }
` as const;

const PREDICTIVE_SEARCH_QUERY_FRAGMENT = `#graphql
  fragment PredictiveQuery on SearchQuerySuggestion {
    __typename
    text
    styledText
    trackingParameters
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/predictiveSearch
const PREDICTIVE_SEARCH_QUERY = `#graphql
  query PredictiveSearch(
    $country: CountryCode
    $language: LanguageCode
    $limit: Int!
    $limitScope: PredictiveSearchLimitScope!
    $term: String!
    $types: [PredictiveSearchType!]
  ) @inContext(country: $country, language: $language) {
    predictiveSearch(
      limit: $limit,
      limitScope: $limitScope,
      query: $term,
      types: $types,
    ) {
      articles {
        ...PredictiveArticle
      }
      collections {
        ...PredictiveCollection
      }
      pages {
        ...PredictivePage
      }
      products {
        ...PredictiveProduct
      }
      queries {
        ...PredictiveQuery
      }
    }
  }
  ${PREDICTIVE_SEARCH_ARTICLE_FRAGMENT}
  ${PREDICTIVE_SEARCH_COLLECTION_FRAGMENT}
  ${PREDICTIVE_SEARCH_PAGE_FRAGMENT}
  ${PREDICTIVE_SEARCH_PRODUCT_FRAGMENT}
  ${PREDICTIVE_SEARCH_QUERY_FRAGMENT}
` as const;

/**
 * Predictive search fetcher
 */
async function predictiveSearch({
  request,
  context,
}: Pick<
  ActionFunctionArgs,
  'request' | 'context'
>): Promise<PredictiveSearchReturn> {
  const {storefront} = context;
  const url = new URL(request.url);
  const term = String(url.searchParams.get('q') || '').trim();
  const limit = Number(url.searchParams.get('limit') || 10);
  const type = 'predictive';

  if (!term) return {type, term, result: getEmptyPredictiveSearchResult()};

  // Predictively search articles, collections, pages, products, and queries (suggestions)
  const {predictiveSearch: items, errors} = await storefront.query(
    PREDICTIVE_SEARCH_QUERY,
    {
      variables: {
        // customize search options as needed
        limit,
        limitScope: 'EACH',
        term,
      },
    },
  );

  if (errors) {
    throw new Error(
      `Shopify API errors: ${errors.map(({message}) => message).join(', ')}`,
    );
  }

  if (!items) {
    throw new Error('No predictive search data returned from Shopify API');
  }

  const total = Object.values(items).reduce(
    (acc, item) => acc + item.length,
    0,
  );

  return {type, term, result: {items, total}};
}
</file>

<file path="app/routes/sitemap.$type.$page[.xml].tsx">
import type {LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {getSitemap} from '@shopify/hydrogen';

export async function loader({
  request,
  params,
  context: {storefront},
}: LoaderFunctionArgs) {
  const response = await getSitemap({
    storefront,
    request,
    params,
    locales: ['EN-US', 'EN-CA', 'FR-CA'],
    getLink: ({type, baseUrl, handle, locale}) => {
      if (!locale) return `${baseUrl}/${type}/${handle}`;
      return `${baseUrl}/${locale}/${type}/${handle}`;
    },
  });

  response.headers.set('Cache-Control', `max-age=${60 * 60 * 24}`);

  return response;
}
</file>

<file path="app/styles/fonts.css">
/* Fontface declarations for Oxanium font family */
@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-ExtraLight.ttf') format('truetype');
  font-weight: 200;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-Light.ttf') format('truetype');
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-Regular.ttf') format('truetype');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-Medium.ttf') format('truetype');
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-SemiBold.ttf') format('truetype');
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-Bold.ttf') format('truetype');
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Oxanium';
  src: url('/fonts/oxanium/Oxanium-ExtraBold.ttf') format('truetype');
  font-weight: 800;
  font-style: normal;
  font-display: swap;
}

/* Fontface declarations for Source Sans 3 font family */
@font-face {
  font-family: 'Source Sans 3';
  src: url('/fonts/source-sans-3/SourceSans3-Regular.ttf') format('truetype');
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Source Sans 3';
  src: url('/fonts/source-sans-3/SourceSans3-Bold.ttf') format('truetype');
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Source Sans 3';
  src: url('/fonts/source-sans-3/SourceSans3-Italic.ttf') format('truetype');
  font-weight: 400;
  font-style: italic;
  font-display: swap;
}
</file>

<file path="Ascent Section/Header/header-drawer.liquid">
{% comment %}
  Renders a header drawer menu for mobile and desktop.
  Usage:
  {% render 'header-drawer' %}
{% endcomment %}
<link rel="stylesheet" href="{{ 'component-header-drawer.css' | asset_url }}" media="print" onload="this.media='all';">

<header-drawer>
  <details class="menu-drawer-details">
    <summary
      class="menu-summary menu-toggle-button"
      aria-haspopup="true"
      aria-expanded="false"
      aria-label="{{ 'sections.header.menu' | t }}"
      aria-controls="Header-Menu-Drawer"
    >
      <span class="button button--icon button--ethereal">
        <svg class="hamburger" viewBox="0 0 100 100" width="80">
          <path class="line top" d="m 30,33 h 40 c 0,0 9.044436,-0.654587 9.044436,-8.508902 0,-7.854315 -8.024349,-11.958003 -14.89975,-10.85914 -6.875401,1.098863 -13.637059,4.171617 -13.637059,16.368042 v 40" />
          <path class="line middle" d="m 30,50 h 40" />
          <path class="line bottom" d="m 30,67 h 40 c 12.796276,0 15.357889,-11.717785 15.357889,-26.851538 0,-15.133752 -4.786586,-27.274118 -16.667516,-27.274118 -11.88093,0 -18.499247,6.994427 -18.435284,17.125656 l 0.252538,40" />
        </svg>
      </span>
    </summary>
    <div
      id="Header-Menu-Drawer"
      class="menu-drawer"
      tabindex="-1"
    >
      <div class="menu-drawer-inner color-{{ settings.main_color_scheme }} gradient">
        <div class="drawer-header medium-hide large-up-hide">
          {%- if shop.customer_accounts_enabled -%}
            <a
              class="button button--secondary button--pill button--full-width"
              href="{% if customer %}{{ routes.account_url }}{%- else -%}{{ routes.account_login_url }}{% endif %}"
              rel="nofollow"
            >
              {% render 'icon-sets', icon: 'account' %}
              {%- if customer -%}
                {{ 'customer.account.title' | t }}
              {%- else -%}
                {{ 'customer.log_in' | t }}
              {%- endif -%}
            </a>
          {%- endif -%}
          <modal-opener
            class="button button--pill"
            role="button"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="Search-Drawer"
            aria-label="{{ 'templates.search.search' | t }}"
          >
            <a href="{{ routes.search_url }}" class="link">
              {% render 'icon-sets', icon: 'search' %}
            </a>
          </modal-opener>
        </div>
        <div class="drawer-content">
          <nav class="menu-drawer-nav hidden-scrollbar">
            <ul class="menu-drawer-menu has-submenu" data-level="1">
              {%- for link in section.settings.menu.links -%}
                {% liquid
                  assign mega_ids_string = ''
                  assign bubble = blank
                  assign menu_index = forloop.index

                  for block in section.blocks
                    if block.settings.target_id == menu_index
                      if block.type == 'bubble'
                        assign bubble = block
                      else
                        unless mega_ids_string == ''
                          assign mega_ids_string = mega_ids_string | append: ','
                        endunless
                        assign mega_ids_string = mega_ids_string | append: forloop.index
                      endif
                    endif
                  endfor

                  assign mega_ids = mega_ids_string | split: ','
                %}

                <li class="menu-drawer-menu-item header-menu-first-level{% if link.current %} menu-item--active{% endif %}">
                  {%- if link.links != blank or mega_ids != empty -%}
                    <details data-belong="1">
                      <summary
                        class="menu-summary first-level-item focus-inset"
                        aria-expanded="false"
                        aria-controls="Drawer-Menu-{{ link.handle | capitalize }}"
                      >
                        <a
                          class="link"
                          {% if link.url != blank and link.url != '/' %}
                            href="{{ link.url }}"
                          {% else %}
                            role="link"
                            aria-disabled="true"
                          {% endif %}
                          {% if link.current %}
                            aria-current="page"
                          {% endif %}
                        >
                          {{ link.title | escape }}
                          {% if bubble != blank %}
                            <span
                              class="menu-bubble"
                              style="background-color: {{ bubble.settings.background_color }}; color: {{ bubble.settings.foreground_color }};"
                              {{ bubble.shopify_attributes }}
                            >
                              {%- if bubble.settings.icon != 'none' -%}
                                {% render 'icon-sets', icon: bubble.settings.icon %}
                                <span class="visually-hidden">{{ bubble.settings.icon }}</span>
                              {%- endif -%}
                              {{ bubble.settings.text | escape }}
                            </span>
                          {% endif %}
                        </a>
                        {% render 'icon-sets', icon: 'caret' %}
                      </summary>
                      <div
                        id="Drawer-Menu-{{ link.handle | capitalize }}"
                        class="menu-drawer-submenu has-submenu hidden-scrollbar"
                        tabindex="-1"
                        data-level="2"
                        aria-label="Submenu for {{ link.title | escape }}"
                      >
                        <div class="submenu-wrapper hidden-scrollbar">
                          <ul class="menu-drawer-menu" tabindex="-1">
                            {%- for childlink in link.links -%}
                              <li class="menu-drawer-menu-item header-menu-second-level{% if childlink.current %} menu-item--active{% endif %}">
                                {%- if childlink.links == blank -%}
                                  <div class="menu-link-wrapper">
                                    <a
                                      class="link link-full focus-inset"
                                      href="{{ childlink.url }}"
                                      {% if childlink.current %}
                                        aria-current="page"
                                      {% endif %}
                                    >
                                      {{ childlink.title | escape }}
                                    </a>
                                  </div>
                                {%- else -%}
                                  <details data-belong="2">
                                    <summary
                                      class="menu-summary focus-inset"
                                      aria-expanded="false"
                                      aria-controls="Drawer-Menu-{{ link.handle | capitalize }}-{{ childlink.handle | capitalize }}"
                                    >
                                      <a
                                        class="link"
                                        {% if childlink.url != blank and childlink.url != '/' %}
                                          href="{{ childlink.url }}"
                                        {% else %}
                                          role="link"
                                          aria-disabled="true"
                                        {% endif %}
                                        {% if childlink.current %}
                                          aria-current="page"
                                        {% endif %}
                                      >
                                        {{ childlink.title | escape }}
                                      </a>
                                      {% render 'icon-sets', icon: 'caret' %}
                                    </summary>
                                    <div
                                      id="Drawer-Menu-{{ link.handle | capitalize }}-{{ childlink.handle | capitalize }}"
                                      class="menu-drawer-submenu has-submenu hidden-scrollbar"
                                      tabindex="-1"
                                      data-level="3"
                                      aria-label="Submenu for {{ childlink.title | escape }}"
                                    >
                                      <div class="submenu-wrapper hidden-scrollbar">
                                        <ul
                                          class="menu-drawer-menu"
                                          tabindex="-1"
                                        >
                                          {%- for grandchildlink in childlink.links -%}
                                            <li class="menu-drawer-menu-item{% if grandchildlink.current %} menu-item--active{% endif %}">
                                              <div class="menu-link-wrapper">
                                                <a
                                                  class="link link-full focus-inset"
                                                  href="{{ grandchildlink.url }}"
                                                  {% if grandchildlink.current %}
                                                    aria-current="page"
                                                  {% endif %}
                                                >
                                                  {{ grandchildlink.title | escape }}
                                                </a>
                                              </div>
                                            </li>
                                          {%- endfor -%}
                                        </ul>
                                      </div>
                                    </div>
                                  </details>
                                {%- endif -%}
                              </li>
                            {%- endfor -%}

                            {% comment %} Mega 相关 {% endcomment %}
                            {%- for id in mega_ids -%}
                              {% liquid
                                assign id_int = id | plus: 0
                                for item in section.blocks
                                  if forloop.index == id_int
                                    assign mega = item
                                    break
                                  endif
                                endfor

                                if mega == blank
                                  continue
                                endif
                              %}
                              <li
                                class="menu-drawer-menu-item menu-drawer-mega-item mega-type--{{ mega.type }} header-menu-second-level{% if mega.settings.hide_on_mobile %} small-hide{% endif %}"
                                {{ mega.shopify_attributes }}
                              >
                                {%- if mega.type == 'mega_image' -%}
                                  {% assign mega_image = mega.settings.image_mobile | default: mega.settings.image %}
                                  {%- render 'mega-menu-image-item',
                                    image: mega_image,
                                    column: mega.settings.column,
                                    heading: mega.settings.heading,
                                    heading_effect: mega.settings.heading_effect,
                                    url: mega.settings.url,
                                    class: 'media--landscape'
                                  -%}
                                {%- elsif mega.type == 'mega_image_title_below' -%}
                                  {% assign mega_image = mega.settings.image_mobile | default: mega.settings.image %}
                                  {%- render 'mega-menu-image-item',
                                    type: 'below',
                                    image: mega_image,
                                    column: mega.settings.column,
                                    heading: mega.settings.heading,
                                    url: mega.settings.url,
                                    class: 'media--landscape'
                                  -%}
                                {%- elsif mega.type == 'mega_links' -%}
                                  {% assign menu_heading = mega.settings.heading
                                    | escape
                                    | default: mega.settings.menu.title
                                  %}
                                  <details data-belong="2">
                                    <summary
                                      class="menu-summary focus-inset"
                                      aria-expanded="false"
                                      aria-controls="Drawer-Mega-{{ link.handle | capitalize }}-{{ mega.id }}"
                                    >
                                      <a
                                        class="menu-title link"
                                        {% if mega.settings.link != blank %}
                                          href="{{ mega.settings.link }}"
                                        {% else %}
                                          role="link"
                                          aria-disabled="true"
                                        {% endif %}
                                      >
                                        {% assign mega_image = mega.settings.image_mobile
                                          | default: mega.settings.image
                                        %}
                                        {%- if mega_image != blank -%}
                                          <span class="media media--square media--circle">
                                            {{ mega_image | image_url: width: 100 | image_tag: loading: 'lazy' }}
                                          </span>
                                        {%- endif -%}
                                        {{ menu_heading }}
                                      </a>
                                      {% render 'icon-sets', icon: 'caret' %}
                                    </summary>
                                    <div
                                      id="Drawer-Mega-{{ link.handle | capitalize }}-{{ mega.id }}"
                                      class="menu-drawer-submenu has-submenu"
                                      tabindex="-1"
                                      data-level="3"
                                      aria-label="Submenu for {{ menu_heading }}"
                                    >
                                      <div class="submenu-wrapper hidden-scrollbar">
                                        <ul
                                          class="menu-drawer-menu"
                                          tabindex="-1"
                                        >
                                          {%- for child_link in mega.settings.menu.links -%}
                                            <li class="menu-drawer-menu-item{% if child_link.current %} menu-item--active{% endif %}">
                                              <div class="menu-link-wrapper">
                                                <a
                                                  class="link link-full focus-inset"
                                                  href="{{ child_link.url }}"
                                                  {% if child_link.current %}
                                                    aria-current="page"
                                                  {% endif %}
                                                >
                                                  {{ child_link.title | escape }}
                                                </a>
                                              </div>
                                            </li>
                                          {%- endfor -%}
                                        </ul>
                                      </div>
                                    </div>
                                  </details>
                                {%- elsif mega.type == 'mega_product_list' -%}
                                  {% liquid
                                    assign products = mega.settings.product_list
                                    if mega.settings.collection != blank
                                      assign products = mega.settings.collection.products
                                    endif

                                    assign title = mega.settings.heading | escape
                                  %}
                                  {% render 'featured-products-card',
                                    products: products,
                                    title: title,
                                    number: mega.settings.show_number
                                  %}
                                {%- elsif mega.type == 'mega_article_list' -%}
                                  {% assign title = mega.settings.heading | escape %}
                                  {% render 'featured-articles-card',
                                    articles: mega.settings.blog.articles,
                                    title: title
                                  %}
                                {%- endif -%}
                              </li>
                            {%- endfor -%}
                          </ul>
                        </div>
                      </div>
                    </details>
                  {%- else -%}
                    <div class="menu-link-wrapper">
                      <a
                        class="link link-full first-level-item focus-inset"
                        href="{{ link.url }}"
                        {% if link.current %}
                          aria-current="page"
                        {% endif %}
                      >
                        {{ link.title | escape }}
                        {% if bubble != blank %}
                          <span
                            class="menu-bubble"
                            style="background-color: {{ bubble.settings.background_color }}; color: {{ bubble.settings.foreground_color }};"
                          >
                            {%- if bubble.settings.icon != 'none' -%}
                              {% render 'icon-sets', icon: bubble.settings.icon %}
                              <span class="visually-hidden">{{ bubble.settings.icon }}</span>
                            {%- endif -%}

                            {{ bubble.settings.text | escape }}
                          </span>
                        {% endif %}
                      </a>
                    </div>
                  {%- endif -%}
                </li>
              {%- endfor -%}
            </ul>
          </nav>
          <div class="menu-drawer-utility">
            {% render 'social-icons' %}

            {%- if section.settings.phone != blank and section.settings.show_phone_on_mobile -%}
              <div class="header-contact light">
                {{ 'sections.header.need_help' | t }}
                <a
                  class="link font-weight-bold"
                  href="tel:{{ section.settings.phone }}"
                  aria-label="{{ 'accessibility.call_us' | t: phone_number: section.settings.phone }}"
                  dir="ltr"
                >
                  {{- section.settings.phone -}}
                </a>
              </div>
            {%- endif -%}
          </div>
        </div>
      </div>
    </div>
  </details>
</header-drawer>
</file>

<file path="Ascent Section/Header/header-menu.liquid">
{% comment %}
  渲染菜单，自动判断菜单类型，菜单类型：链接，下拉菜单，Mega菜单
  Accepts:
    - enable_hover_open: {Boolean} 是否允许鼠标悬停打开菜单

  Usage:
  {% render 'header-menu' %}
{% endcomment %}

<nav class="header-menu-nav">
    <ul class="list-menu list-menu--inline">
      {%- for link in section.settings.menu.links -%}
          {% comment %}获取属于该菜单的Mega菜单id列表{% endcomment %}
          {% liquid
              assign mega_ids_string = ''
              assign bubble = blank
              assign menu_index = forloop.index
  
              for block in section.blocks
                  if block.settings.target_id == menu_index
                      if block.type == 'bubble'
                          assign bubble = block
                      else
                          unless mega_ids_string == ''
                              assign mega_ids_string = mega_ids_string | append: ','
                          endunless
                          assign mega_ids_string = mega_ids_string | append: forloop.index
                      endif
                  endif
              endfor
  
              assign mega_ids = mega_ids_string | split: ','
          %}
        <li class="list-menu-item header-menu-first-level">
          {%- unless link.links == blank and mega_ids == empty -%}
            <drop-menu class="first-level-drop"{% if enable_hover_open %} data-hover-open{% endif %}>
              <details class="details-header-menu{% if mega_ids != empty %} mega-menu{% endif %}"{% if mega_ids == empty %} data-constrain{% endif %}>
                <summary class="first-level-item" aria-haspopup="true" aria-expanded="false" aria-controls="Menu-{{ link.handle | capitalize }}">
                  {%- if bubble != blank -%}
                    <span class="menu-bubble" style="background-color: {{ bubble.settings.background_color }}; color: {{ bubble.settings.foreground_color }};" {{ bubble.shopify_attributes }}>
                         {%- if bubble.settings.icon != 'none' -%}
                             {% render 'icon-sets', icon: bubble.settings.icon %}
                             <span class="visually-hidden">{{ bubble.settings.icon }}</span>
                         {%- endif -%}
                        {{ bubble.settings.text | escape }}
                    </span>
                  {%- endif -%}
                  <a class="link{%- if link.child_active or link.url != '/' and link.current %} header-active-menu-item{% endif %}"
                      {% if link.url != blank and link.url != '/' %}
                           href="{{ link.url }}"
                      {% else %}
                          role="link"
                          aria-disabled="true"
                      {% endif %}
                      {% if link.current %}
                          aria-current="page"
                      {% endif %}
                  >
                    {{- link.title | escape -}}
                  </a>
                  {% render 'icon-sets', icon: 'caret' %}
                </summary>
                {%- if mega_ids != empty -%}
                  {% render "mega-menu", link: link, mega_ids: mega_ids %}
                {%- else -%}
                  <ul id="Menu-{{ link.handle | capitalize }}"
                      class="header-submenu list-menu list-menu--disclosure color-{{ settings.main_color_scheme }} gradient"
                      aria-label="Submenu for {{ link.title | escape }}"
                      tabindex="-1" {% comment %} tabindex="-1" 是为了打开菜单后，防止菜单容器因为失去焦点而关闭 {% endcomment %}
                  >
                      {%- for childlink in link.links -%}
                          <li class="list-menu-item header-menu-second-level">
                              {%- if childlink.links == blank -%}
                                  <a class="link link-text"
                                     href="{{ childlink.url }}"
                                     {% if childlink.current %}aria-current="page"{% endif %}
                                  >
                                      {{- childlink.title | escape -}}
                                  </a>
                              {%- else -%}
                                  <drop-menu {% if enable_hover_open %} data-hover-open{% endif %}>
                                      <details class="details-header-submenu" data-constrain>
                                          <summary aria-haspopup="true" aria-expanded="false" aria-controls="Menu-{{ link.handle | capitalize }}-{{ childlink.handle | capitalize }}">
                                              <a class="link"
                                              {% if childlink.url != blank and childlink.url != '/' %}
                                                  href="{{ childlink.url }}"
                                              {% else %}
                                                  role="link"
                                                  aria-disabled="true"
                                              {% endif %}
                                              {% if childlink.current %}
                                                  aria-current="page"
                                              {% endif %}
                                              >
                                                  {{- childlink.title | escape -}}
                                              </a>
                                              {% render 'icon-sets', icon: 'caret' %}
                                          </summary>
                                          <ul id="Menu-{{ link.handle | capitalize }}-{{ childlink.handle | capitalize }}"
                                              class="header-submenu list-menu list-menu--disclosure list-menu-second--disclosure"
                                              aria-label="Submenu for {{ childlink.title | escape }}"
                                          >
                                              {%- for grandchildlink in childlink.links -%}
                                                  <li class="list-menu-item">
                                                      <a class="link link-text"
                                                         href="{{ grandchildlink.url }}"
                                                         {% if grandchildlink.current %}aria-current="page"{% endif %}
                                                      >
                                                          {{ grandchildlink.title | escape }}
                                                      </a>
                                                  </li>
                                              {%- endfor -%}
                                          </ul>
                                      </details>
                                  </drop-menu>
                              {%- endif -%}
                          </li>
                      {%- endfor -%}
                  </ul>
                {%- endif -%}
              </details>
            </drop-menu>
          {%- else -%}
            <a class="link first-level-item"
               href="{{ link.url }}"
               {% if link.current %}aria-current="page"{% endif %}
            >
                {%- if bubble != blank -%}
                    <span class="menu-bubble" style="background-color: {{ bubble.settings.background_color }}; color: {{ bubble.settings.foreground_color }};">
                        {%- if bubble.settings.icon != 'none' -%}
                          {% render 'icon-sets', icon: bubble.settings.icon %}
                          <span class="visually-hidden">{{ bubble.settings.icon }}</span>
                        {%- endif -%}
                        {{ bubble.settings.text | escape }}
                    </span>
                {%- endif -%}
                <span{%- if link.current %} class="header-active-menu-item"{% endif %}>
                    {{- link.title | escape -}}
                </span>
            </a>
          {%- endunless -%}
        </li>
      {%- endfor -%}
    </ul>
  </nav>
</file>

<file path="Ascent Section/Header/header.liquid">
{%- style -%}
  .section-header {
    position: sticky; /* This is for fixing a Safari z-index issue. PR #2147 */
  }
{%- endstyle -%}

{%- unless section.settings.sticky_header_type == 'none' -%}
  <script src="{{ 'sticky-header.js' | asset_url }}" defer="defer"></script>
{%- endunless -%}

{%- liquid
  assign localization_forms = false
  if section.settings.enable_localization_selector and localization.available_countries.size > 1 or localization.available_languages.size > 1
    assign localization_forms = true
  endif
-%}

<sticky-header
  data-sticky-type="{{ section.settings.sticky_header_type }}"
  class="header-wrapper{% if section.settings.enable_transparent_header and request.page_type == 'index' %} header--background-transparent{% if section.settings.hide_transparent_border %} header--transparent-border-hide{% endif %}{% endif %}{% if section.settings.enable_first_level_uppercase %} header--first-level-uppercase{% endif %}"
>
  <header
    id="Page-Header"
    class="header isolate color-{{ section.settings.color_scheme }} gradient header--{{ section.settings.logo_position }} header-mobile--{{ section.settings.logo_position_mobile }}{% if section.settings.menu_type_desktop == 'drawer' %} drawer-menu{% endif %}{% if section.settings.menu != blank %} header--has-menu{% endif %}{% if section.settings.logo_position contains 'bottom' and section.settings.menu_type_desktop != "drawer" %} header--menu-position-bottom{% endif %}"
    style="--transparent-foreground-color: {{ section.settings.transparent_foreground_color.red }}, {{ section.settings.transparent_foreground_color.green }}, {{ section.settings.transparent_foreground_color.blue }};"
  >
    <div class="header-main page-width">
      <div class="header-left-area">
        {%- if section.settings.menu != blank -%}
          {% render 'header-drawer' %}
        {%- endif -%}

        {%- if section.settings.logo_position == 'center-bottom' -%}
          {% render 'header-search', input_id: 'Inline-Search' %}
        {%- endif -%}
      </div>
      {% comment %} Logo{% endcomment %}
      {%- if request.page_type == 'index' -%}
        <h1 class="visually-hidden">{{ shop.name }}</h1>
      {%- endif -%}
      <a href="{{ routes.root_url }}" class="header-heading link">
        {%- if section.settings.logo != blank -%}
          <div
            class="header-heading-logo-wrapper{% if section.settings.enable_transparent_header and section.settings.transparent_logo != blank %} has-transparent-logo{% endif %}"
            style="--logo-width: {{ section.settings.logo_width }}px; --logo-width-mobile: {{ section.settings.logo_width_mobile }}px;"
          >
            {% capture sizes %}(max-width: {{ section.settings.logo_width | times: 2 }}px) 50vw, {{ section.settings.logo_width }}px{% endcapture %}
            {% capture widths %}{{ section.settings.logo_width }}, {{ section.settings.logo_width | times: 1.5 | round }}, {{ section.settings.logo_width | times: 2 }}{% endcapture %}
            {%- assign logo_alt = section.settings.logo.alt | default: shop.name | escape -%}
            {{
              section.settings.logo
              | image_url: width: 600
              | image_tag:
                class: 'header-heading-logo',
                widths: widths,
                alt: logo_alt,
                sizes: sizes,
                height: section.settings.logo.height,
                width: section.settings.logo.width,
                loading: 'lazy'
            }}

            {%- assign trans_logo_alt = section.settings.transparent_logo.alt | default: shop.name | escape -%}
            {%- if section.settings.enable_transparent_header and section.settings.transparent_logo != blank -%}
              {{
                section.settings.transparent_logo
                | image_url: width: 600
                | image_tag:
                  class: 'header-heading-logo transparent-logo',
                  widths: widths,
                  sizes: sizes,
                  alt: trans_logo_alt,
                  height: section.settings.logo.height,
                  width: section.settings.logo.width,
                  loading: 'lazy'
              }}
            {%- endif -%}
          </div>
        {%- else -%}
          <span class="h1">{{ shop.name }}</span>
        {%- endif -%}
      </a>
      {% comment %}Header Menu Start{% endcomment %}
      {% liquid
        unless section.settings.menu_type_desktop == 'drawer' or section.settings.logo_position contains 'bottom'
          render 'header-menu', enable_hover_open: section.settings.enable_hover_open
        endunless
      %}
      {% comment %}Header Menu End{% endcomment %}
      {% if section.settings.logo_position == 'left-bottom' %}
        {% render 'header-search', input_id: 'Inline-Search' %}
      {% endif %}
      {% comment %}Header 图标组{% endcomment %}
      <div class="header-icons">
        {% comment %} 侧边栏抽屉搜索 {% endcomment %}
        {% unless section.settings.logo_position contains 'bottom' %}
          <modal-opener
            class="header-icon header-icon--search small-hide"
            role="button"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="Search-Drawer"
            aria-label="{{ 'templates.search.drawer' | t }}"
          >
            <a href="{{ routes.search_url }}" class="link lh-0" aria-label="{{ 'templates.search.search' | t }}">
              {%- render 'icon-sets', icon: 'search' -%}
            </a>
          </modal-opener>
        {% endunless %}
        {%- if localization_forms -%}
          <modal-opener
            class="header-icon header-icon--localization small-hide"
            role="button"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="Localization-Drawer"
            aria-label="{{ 'localization.title' | t }}"
            tabindex="0"
          >
            {%- if section.settings.show_localization_flag -%}
              <span class="icon media media--square media--circle">
                {{ localization.country | image_url: width: 60 | image_tag: loading: 'lazy' }}
              </span>
            {%- else -%}
              {%- render 'icon-sets', icon: 'global' -%}
            {%- endif -%}
          </modal-opener>
        {%- endif -%}
        {%- if shop.customer_accounts_enabled -%}
          <a
            href="{% if customer %}{{ routes.account_url }}{% else %}{{ routes.account_login_url }}{% endif %}"
            class="header-icon header-icon--account link{% if section.settings.menu != blank %} small-hide{% endif %}"
            rel="nofollow"
          >
            {% render 'icon-sets', icon: 'account' %}
            <span class="visually-hidden">
              {%- if customer %}{{ 'customer.account.title' | t }}{% else %}{{ 'customer.log_in' | t }}{% endif -%}
            </span>
          </a>
        {%- endif -%}
        <modal-opener
          class="header-cart-bubble"
          {% if settings.cart_type == 'drawer' and request.page_type != 'cart' %}
            role="button"
            aria-label="{{ 'templates.cart.drawer' | t }}"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="Cart-Drawer"
          {% endif %}
        >
          <a
            id="Cart-Icon-Bubble"
            class="header-icon header-icon--cart link"
            href="{{ routes.cart_url }}"
            aria-label="{{ 'templates.cart.cart' | t }}"
          >
            {% render 'cart-bubble', style: settings.cart_bubble_style %}
          </a>
        </modal-opener>
      </div>
    </div>
    {%- if section.settings.enable_float_search_mobile and request.page_type == 'index' -%}
      <div class="header-search-bar color-{{ settings.main_color_scheme }} page-width medium-hide large-up-hide">
        {% render 'header-search', input_id: 'Middle-Search' %}
      </div>
    {%- endif -%}
    {%- if section.settings.logo_position contains 'bottom'
      and section.settings.menu_type_desktop != 'drawer'
      and section.settings.menu != blank
    -%}
      <div class="header-bottom">
        <div class="header-bottom-wrapper page-width">
          {% render 'header-menu', enable_hover_open: section.settings.enable_hover_open %}

          {%- if section.settings.phone != blank and section.settings.show_phone_on_desktop -%}
            <div class="header-contact light">
              {{ 'sections.header.need_help' | t }}
              <a
                href="tel:{{ section.settings.phone }}"
                class="link link-text font-weight-bold"
                aria-label="{{ 'accessibility.call_us' | t: phone_number: section.settings.phone }}"
                dir="ltr"
              >
                {{- section.settings.phone -}}
              </a>
            </div>
          {%- endif -%}
        </div>
      </div>
    {%- endif -%}
  </header>
</sticky-header>

<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Organization",
    "name": {{ shop.name | json }},
    {% if section.settings.logo %}
      "logo": {{ section.settings.logo | image_url: width: 500 | prepend: "https:" | json }},
    {% endif %}
    "sameAs": [
      {{ settings.social_facebook_link | json }},
      {{ settings.social_instagram_link | json }},
      {{ settings.social_youtube_link | json }},
      {{ settings.social_tiktok_link | json }},
      {{ settings.social_twitter_link | json }},
      {{ settings.social_snapchat_link | json }},
      {{ settings.social_pinterest_link | json }},
      {{ settings.social_tumblr_link | json }},
      {{ settings.social_vimeo_link | json }},
      {{ settings.social_linkedin_link | json }},
      {{ settings.social_whatsapp_link | json }},
      {{ settings.social_reddit_link | json }},
      {{ settings.social_discord_link | json }},
      {{ settings.social_bluesky_link | json }}
    ],
    "url": {{ request.origin | append: page.url | json }}
  }
</script>

{%- if request.page_type == 'index' -%}
  {% assign potential_action_target = request.origin | append: routes.search_url | append: '?q={search_term_string}' %}
  <script type="application/ld+json">
    {
      "@context": "http://schema.org",
      "@type": "WebSite",
      "name": {{ shop.name | json }},
      "potentialAction": {
        "@type": "SearchAction",
        "target": {{ potential_action_target | json }},
        "query-input": "required name=search_term_string"
      },
      "url": {{ request.origin | append: page.url | json }}
    }
  </script>
{%- endif -%}

{% schema %}
{
  "name": "t:sections.header.name",
  "class": "section-header",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.scheme.label",
      "default": "background-1"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_logo.content"
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "t:sections.header.settings.logo.label"
    },
    {
      "type": "range",
      "id": "logo_width",
      "min": 50,
      "max": 300,
      "step": 10,
      "default": 120,
      "unit": "px",
      "label": "t:sections.header.settings.logo_width.label"
    },
    {
      "type": "select",
      "id": "logo_position",
      "options": [
        {
          "value": "left-left",
          "label": "t:sections.header.settings.logo_position.options__1.label"
        },
        {
          "value": "left-center",
          "label": "t:sections.header.settings.logo_position.options__2.label"
        },
        {
          "value": "left-bottom",
          "label": "t:sections.header.settings.logo_position.options__3.label"
        },
        {
          "value": "center-left",
          "label": "t:sections.header.settings.logo_position.options__4.label"
        },
        {
          "value": "center-bottom",
          "label": "t:sections.header.settings.logo_position.options__5.label"
        }
      ],
      "default": "left-center",
      "label": "t:sections.header.settings.logo_position.label",
      "info": "t:sections.header.settings.logo_position.info"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_menu.content"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.all.link-list.label"
    },
    {
      "type": "checkbox",
      "id": "enable_first_level_uppercase",
      "label": "t:sections.header.settings.enable_first_level_uppercase.label",
      "default": false
    },
    {
      "type": "select",
      "id": "menu_type_desktop",
      "options": [
        {
          "value": "dropdown",
          "label": "t:sections.header.settings.menu_type_desktop.options__1.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.header.settings.menu_type_desktop.options__2.label"
        }
      ],
      "default": "dropdown",
      "label": "t:sections.header.settings.menu_type_desktop.label",
      "info": "t:sections.header.settings.menu_type_desktop.info"
    },
    {
      "type": "checkbox",
      "id": "enable_hover_open",
      "label": "t:sections.header.settings.enable_hover_open.label",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_transparent_header.content"
    },
    {
      "type": "paragraph",
      "content": "t:sections.header.settings.paragraph_transparent_header.content"
    },
    {
      "type": "checkbox",
      "id": "enable_transparent_header",
      "label": "t:sections.header.settings.enable_transparent_header.label",
      "default": true
    },
    {
      "type": "image_picker",
      "id": "transparent_logo",
      "label": "t:sections.header.settings.logo.label",
      "visible_if": "{{ section.settings.enable_transparent_header }}"
    },
    {
      "type": "color",
      "id": "transparent_foreground_color",
      "label": "t:sections.header.settings.transparent_foreground_color.label",
      "default": "#FFFFFF",
      "visible_if": "{{ section.settings.enable_transparent_header }}"
    },
    {
      "type": "checkbox",
      "id": "hide_transparent_border",
      "label": "t:sections.header.settings.hide_transparent_border.label",
      "default": false,
      "visible_if": "{{ section.settings.enable_transparent_header }}"
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_phone.content"
    },
    {
      "type": "text",
      "id": "phone",
      "label": "t:sections.header.settings.phone.label",
      "default": "(000)1234-5678"
    },
    {
      "type": "checkbox",
      "id": "show_phone_on_desktop",
      "label": "t:sections.all.desktop.show.label",
      "info": "t:sections.header.settings.show_phone_on_desktop.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_phone_on_mobile",
      "label": "t:sections.all.mobile.show.label",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.header.settings.header_others.content"
    },
    {
      "type": "select",
      "id": "sticky_header_type",
      "options": [
        {
          "value": "none",
          "label": "t:sections.header.settings.sticky_header_type.options__1.label"
        },
        {
          "value": "on-scroll-up",
          "label": "t:sections.header.settings.sticky_header_type.options__2.label"
        },
        {
          "value": "always",
          "label": "t:sections.header.settings.sticky_header_type.options__3.label"
        },
        {
          "value": "reduce-logo-size",
          "label": "t:sections.header.settings.sticky_header_type.options__4.label"
        }
      ],
      "default": "reduce-logo-size",
      "label": "t:sections.header.settings.sticky_header_type.label"
    },
    {
      "type": "checkbox",
      "id": "enable_localization_selector",
      "default": true,
      "label": "t:sections.header.settings.enable_localization_selector.label"
    },
    {
      "type": "checkbox",
      "id": "show_localization_flag",
      "label": "t:sections.header.settings.show_localization_flag.label",
      "default": false,
      "visible_if": "{{ section.settings.enable_localization_selector }}"
    },
    {
      "type": "header",
      "content": "t:sections.all.mobile.header_content"
    },
    {
      "type": "range",
      "id": "logo_width_mobile",
      "min": 50,
      "max": 180,
      "step": 5,
      "default": 100,
      "unit": "px",
      "label": "t:sections.header.settings.logo_width_mobile.label"
    },
    {
      "type": "select",
      "id": "logo_position_mobile",
      "label": "t:sections.header.settings.logo_position_mobile.label",
      "options": [
        {
          "label": "t:sections.header.settings.logo_position_mobile.options__1.label",
          "value": "left"
        },
        {
          "label": "t:sections.header.settings.logo_position_mobile.options__2.label",
          "value": "center"
        }
      ],
      "default": "center"
    },
    {
      "type": "checkbox",
      "id": "enable_float_search_mobile",
      "label": "t:sections.header.settings.enable_float_search_mobile.label",
      "info": "t:sections.header.settings.enable_float_search_mobile.info",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "mega_image",
      "name": "t:sections.header.blocks.mega_image.name",
      "settings": [
        {
          "type": "paragraph",
          "content": "t:sections.header.blocks.all.paragraph_mega.content"
        },
        {
          "type": "range",
          "id": "target_id",
          "label": "t:sections.header.blocks.all.target_id.label",
          "info": "t:sections.header.blocks.all.target_id.info",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.all.image.image_picker.label",
          "info": "t:sections.header.blocks.mega_image.settings.image.info"
        },
        {
          "type": "url",
          "id": "url",
          "label": "t:sections.all.url.label"
        },
        {
          "type": "select",
          "id": "column",
          "label": "t:sections.header.blocks.all.column.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "1",
          "options": [
            {
              "label": "t:sections.header.blocks.all.column.options__1.label",
              "value": "1"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__2.label",
              "value": "2"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__3.label",
              "value": "3"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__4.label",
              "value": "4"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__5.label",
              "value": "5"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:sections.header.blocks.mega_image.settings.header_image_title.content"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.all.text-content.heading.label",
          "default": "Image title"
        },
        {
          "type": "select",
          "id": "heading_size",
          "label": "t:sections.all.text-content.heading.size.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "small",
          "options": [
            {
              "value": "small",
              "label": "t:sections.all.text-content.heading.size.options__1.label"
            },
            {
              "value": "medium",
              "label": "t:sections.all.text-content.heading.size.options__2.label"
            },
            {
              "value": "large",
              "label": "t:sections.all.text-content.heading.size.options__3.label"
            }
          ]
        },
        {
          "type": "select",
          "id": "heading_position",
          "label": "t:sections.all.position.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "bottom-center",
          "options": [
            {
              "value": "top-left",
              "label": "t:sections.all.position.options__1.label"
            },
            {
              "value": "top-center",
              "label": "t:sections.all.position.options__2.label"
            },
            {
              "value": "top-right",
              "label": "t:sections.all.position.options__3.label"
            },
            {
              "value": "middle-left",
              "label": "t:sections.all.position.options__4.label"
            },
            {
              "value": "middle-center",
              "label": "t:sections.all.position.options__5.label"
            },
            {
              "value": "middle-right",
              "label": "t:sections.all.position.options__6.label"
            },
            {
              "value": "bottom-left",
              "label": "t:sections.all.position.options__7.label"
            },
            {
              "value": "bottom-center",
              "label": "t:sections.all.position.options__8.label"
            },
            {
              "value": "bottom-right",
              "label": "t:sections.all.position.options__9.label"
            }
          ]
        },
        {
          "type": "select",
          "id": "heading_effect",
          "label": "t:sections.all.text-content.effect.label",
          "options": [
            {
              "value": "none",
              "label": "t:sections.all.text-content.effect.options__1.label"
            },
            {
              "value": "shadow",
              "label": "t:sections.all.text-content.effect.options__2.label"
            },
            {
              "value": "background",
              "label": "t:sections.all.text-content.effect.options__3.label"
            }
          ],
          "default": "background"
        },
        {
          "type": "header",
          "content": "t:sections.all.mobile.header_content"
        },
        {
          "type": "image_picker",
          "id": "image_mobile",
          "label": "t:sections.all.image.image_picker.label",
          "info": "t:sections.header.blocks.mega_image.settings.image_mobile.info"
        },
        {
          "type": "checkbox",
          "id": "hide_on_mobile",
          "label": "t:sections.all.mobile.hide.label",
          "default": false
        }
      ]
    },
    {
      "type": "mega_image_title_below",
      "name": "t:sections.header.blocks.mega_image_title_below.name",
      "settings": [
        {
          "type": "paragraph",
          "content": "t:sections.header.blocks.all.paragraph_mega.content"
        },
        {
          "type": "range",
          "id": "target_id",
          "label": "t:sections.header.blocks.all.target_id.label",
          "info": "t:sections.header.blocks.all.target_id.info",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.all.image.image_picker.label",
          "info": "t:sections.header.blocks.mega_image.settings.image.info"
        },
        {
          "type": "url",
          "id": "url",
          "label": "t:sections.all.url.label"
        },
        {
          "type": "select",
          "id": "column",
          "label": "t:sections.header.blocks.all.column.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "1",
          "options": [
            {
              "label": "t:sections.header.blocks.all.column.options__1.label",
              "value": "1"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__2.label",
              "value": "2"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__3.label",
              "value": "3"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__4.label",
              "value": "4"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__5.label",
              "value": "5"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:sections.header.blocks.mega_image.settings.header_image_title.content"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.all.text-content.heading.label",
          "default": "Image title"
        },
        {
          "type": "select",
          "id": "heading_size",
          "label": "t:sections.all.text-content.heading.size.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "small",
          "options": [
            {
              "value": "small",
              "label": "t:sections.all.text-content.heading.size.options__1.label"
            },
            {
              "value": "medium",
              "label": "t:sections.all.text-content.heading.size.options__2.label"
            },
            {
              "value": "large",
              "label": "t:sections.all.text-content.heading.size.options__3.label"
            }
          ]
        },
        {
          "type": "text_alignment",
          "id": "heading_alignment",
          "label": "t:sections.all.text-alignment.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "center"
        },
        {
          "type": "header",
          "content": "t:sections.all.mobile.header_content"
        },
        {
          "type": "image_picker",
          "id": "image_mobile",
          "label": "t:sections.all.image.image_picker.label",
          "info": "t:sections.header.blocks.mega_image.settings.image_mobile.info"
        },
        {
          "type": "checkbox",
          "id": "hide_on_mobile",
          "label": "t:sections.all.mobile.hide.label",
          "default": false
        }
      ]
    },
    {
      "type": "mega_links",
      "name": "t:sections.header.blocks.mega_links.name",
      "settings": [
        {
          "type": "paragraph",
          "content": "t:sections.header.blocks.all.paragraph_mega.content"
        },
        {
          "type": "range",
          "id": "target_id",
          "label": "t:sections.header.blocks.all.target_id.label",
          "info": "t:sections.header.blocks.all.target_id.info",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.all.text-content.heading.label",
          "info": "t:sections.header.blocks.mega_links.settings.heading.info",
          "default": "Heading"
        },
        {
          "type": "url",
          "id": "link",
          "label": "t:sections.all.url.label"
        },
        {
          "type": "link_list",
          "id": "menu",
          "label": "t:sections.all.link-list.label"
        },
        {
          "type": "text_alignment",
          "id": "alignment",
          "label": "t:sections.all.text-alignment.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "left"
        },
        {
          "type": "header",
          "content": "t:sections.all.image.header_content"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.all.image.image_picker.label",
          "info": "t:sections.header.blocks.mega_links.settings.image.info"
        },
        {
          "type": "select",
          "id": "image_ratio",
          "label": "t:sections.all.image.image_ratio.label",
          "info": "t:sections.all.desktop.effect.info",
          "options": [
            {
              "value": "square",
              "label": "t:sections.all.image.image_ratio.options__1.label"
            },
            {
              "value": "portrait",
              "label": "t:sections.all.image.image_ratio.options__2.label"
            },
            {
              "value": "landscape",
              "label": "t:sections.all.image.image_ratio.options__3.label"
            },
            {
              "value": "panoramic",
              "label": "t:sections.all.image.image_ratio.options__4.label"
            }
          ],
          "default": "panoramic"
        },
        {
          "type": "header",
          "content": "t:sections.all.mobile.header_content"
        },
        {
          "type": "image_picker",
          "id": "image_mobile",
          "label": "t:sections.all.image.image_picker.label",
          "info": "t:sections.header.blocks.mega_links.settings.image_mobile.info"
        },
        {
          "type": "checkbox",
          "id": "hide_on_mobile",
          "label": "t:sections.all.mobile.hide.label",
          "default": false
        }
      ]
    },
    {
      "type": "mega_product_list",
      "name": "t:sections.header.blocks.mega_product_list.name",
      "settings": [
        {
          "type": "paragraph",
          "content": "t:sections.header.blocks.all.paragraph_mega.content"
        },
        {
          "type": "range",
          "id": "target_id",
          "label": "t:sections.header.blocks.all.target_id.label",
          "info": "t:sections.header.blocks.all.target_id.info",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.header.blocks.all.heading.label",
          "default": "Heading"
        },
        {
          "type": "product_list",
          "id": "product_list",
          "label": "t:sections.all.product-list.label",
          "limit": 10
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "t:sections.all.collection.label"
        },
        {
          "type": "range",
          "id": "show_number",
          "label": "t:sections.header.blocks.mega_product_list.settings.show_number.label",
          "default": 5,
          "min": 1,
          "max": 10,
          "step": 1
        },
        {
          "type": "checkbox",
          "id": "enable_slide",
          "label": "t:sections.all.slider.enable_desktop_slider.label",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "show_dots",
          "label": "t:sections.all.slider.show_page_dots.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": true,
          "visible_if": "{{ block.settings.enable_slide == true }}"
        },
        {
          "type": "select",
          "id": "column",
          "label": "t:sections.header.blocks.all.column.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "5",
          "options": [
            {
              "label": "t:sections.header.blocks.all.column.options__1.label",
              "value": "1"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__2.label",
              "value": "2"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__3.label",
              "value": "3"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__4.label",
              "value": "4"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__5.label",
              "value": "5"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:sections.all.mobile.header_content"
        },
        {
          "type": "checkbox",
          "id": "hide_on_mobile",
          "label": "t:sections.all.mobile.hide.label",
          "default": false
        }
      ]
    },
    {
      "type": "mega_article_list",
      "name": "t:sections.header.blocks.mega_article_list.name",
      "settings": [
        {
          "type": "paragraph",
          "content": "t:sections.header.blocks.all.paragraph_mega.content"
        },
        {
          "type": "range",
          "id": "target_id",
          "label": "t:sections.header.blocks.all.target_id.label",
          "info": "t:sections.header.blocks.all.target_id.info",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "heading",
          "label": "t:sections.header.blocks.all.heading.label",
          "default": "Heading"
        },
        {
          "type": "blog",
          "id": "blog",
          "label": "t:sections.all.blog.label"
        },
        {
          "type": "range",
          "id": "show_number",
          "label": "t:sections.header.blocks.mega_article_list.settings.show_number.label",
          "default": 5,
          "min": 1,
          "max": 10,
          "step": 1
        },
        {
          "type": "checkbox",
          "id": "enable_slide",
          "label": "t:sections.all.slider.enable_desktop_slider.label",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "show_dots",
          "label": "t:sections.all.slider.show_page_dots.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": true,
          "visible_if": "{{ block.settings.enable_slide == true }}"
        },
        {
          "type": "select",
          "id": "column",
          "label": "t:sections.header.blocks.all.column.label",
          "info": "t:sections.all.desktop.effect.info",
          "default": "5",
          "options": [
            {
              "label": "t:sections.header.blocks.all.column.options__1.label",
              "value": "1"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__2.label",
              "value": "2"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__3.label",
              "value": "3"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__4.label",
              "value": "4"
            },
            {
              "label": "t:sections.header.blocks.all.column.options__5.label",
              "value": "5"
            }
          ]
        },
        {
          "type": "header",
          "content": "t:sections.all.mobile.header_content"
        },
        {
          "type": "checkbox",
          "id": "hide_on_mobile",
          "label": "t:sections.all.mobile.hide.label",
          "default": false
        }
      ]
    },
    {
      "type": "bubble",
      "name": "t:sections.header.blocks.bubble.name",
      "settings": [
        {
          "type": "range",
          "id": "target_id",
          "label": "t:sections.header.blocks.all.target_id.label",
          "info": "t:sections.header.blocks.all.target_id.info",
          "min": 1,
          "max": 10,
          "step": 1,
          "default": 1
        },
        {
          "type": "select",
          "id": "icon",
          "label": "t:sections.all.icon.label",
          "default": "none",
          "options": [
            {
              "value": "none",
              "label": "t:sections.all.icon.options__1.label"
            },
            {
              "group": "t:sections.all.icon.groups.shop",
              "value": "cart",
              "label": "t:sections.all.icon.options__2.label"
            },
            {
              "group": "t:sections.all.icon.groups.shop",
              "value": "wish",
              "label": "t:sections.all.icon.options__3.label"
            },
            {
              "group": "t:sections.all.icon.groups.shop",
              "value": "sale",
              "label": "t:sections.all.icon.options__4.label"
            },
            {
              "group": "t:sections.all.icon.groups.shop",
              "value": "new",
              "label": "t:sections.all.icon.options__5.label"
            },
            {
              "group": "t:sections.all.icon.groups.shop",
              "value": "hot",
              "label": "t:sections.all.icon.options__6.label"
            },
            {
              "group": "t:sections.all.icon.groups.shop",
              "value": "gift",
              "label": "t:sections.all.icon.options__7.label"
            },
            {
              "group": "t:sections.all.icon.groups.shipping",
              "value": "truck",
              "label": "t:sections.all.icon.options__8.label"
            },
            {
              "group": "t:sections.all.icon.groups.shipping",
              "value": "plane",
              "label": "t:sections.all.icon.options__9.label"
            },
            {
              "group": "t:sections.all.icon.groups.shipping",
              "value": "steamer",
              "label": "t:sections.all.icon.options__10.label"
            },
            {
              "group": "t:sections.all.icon.groups.order",
              "value": "track",
              "label": "t:sections.all.icon.options__11.label"
            },
            {
              "group": "t:sections.all.icon.groups.order",
              "value": "return",
              "label": "t:sections.all.icon.options__12.label"
            },
            {
              "group": "t:sections.all.icon.groups.order",
              "value": "refund",
              "label": "t:sections.all.icon.options__13.label"
            },
            {
              "group": "t:sections.all.icon.groups.order",
              "value": "security",
              "label": "t:sections.all.icon.options__14.label"
            },
            {
              "group": "t:sections.all.icon.groups.order",
              "value": "card",
              "label": "t:sections.all.icon.options__15.label"
            },
            {
              "group": "t:sections.all.icon.groups.order",
              "value": "money",
              "label": "t:sections.all.icon.options__16.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "phone",
              "label": "t:sections.all.icon.options__17.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "email",
              "label": "t:sections.all.icon.options__18.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "chat",
              "label": "t:sections.all.icon.options__19.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "24h",
              "label": "t:sections.all.icon.options__20.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "service",
              "label": "t:sections.all.icon.options__21.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "question",
              "label": "t:sections.all.icon.options__22.label"
            },
            {
              "group": "t:sections.all.icon.groups.communication",
              "value": "send",
              "label": "t:sections.all.icon.options__23.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "wifi",
              "label": "t:sections.all.icon.options__24.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "bluetooth",
              "label": "t:sections.all.icon.options__25.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "camera",
              "label": "t:sections.all.icon.options__26.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "ar",
              "label": "t:sections.all.icon.options__27.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "vr",
              "label": "t:sections.all.icon.options__28.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "print",
              "label": "t:sections.all.icon.options__29.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "scan",
              "label": "t:sections.all.icon.options__30.label"
            },
            {
              "group": "t:sections.all.icon.groups.tech",
              "value": "3d",
              "label": "t:sections.all.icon.options__31.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "apple",
              "label": "t:sections.all.icon.options__32.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "carrot",
              "label": "t:sections.all.icon.options__33.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "lemon",
              "label": "t:sections.all.icon.options__34.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "burger",
              "label": "t:sections.all.icon.options__35.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "cake",
              "label": "t:sections.all.icon.options__36.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "coffee",
              "label": "t:sections.all.icon.options__37.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "milk",
              "label": "t:sections.all.icon.options__38.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "beer",
              "label": "t:sections.all.icon.options__39.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "ice-cream",
              "label": "t:sections.all.icon.options__40.label"
            },
            {
              "group": "t:sections.all.icon.groups.food_drink",
              "value": "fork-spoon",
              "label": "t:sections.all.icon.options__41.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "dress",
              "label": "t:sections.all.icon.options__51.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "pants",
              "label": "t:sections.all.icon.options__52.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "shoe",
              "label": "t:sections.all.icon.options__53.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "hat",
              "label": "t:sections.all.icon.options__54.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "skirt",
              "label": "t:sections.all.icon.options__55.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "tops",
              "label": "t:sections.all.icon.options__56.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "shorts",
              "label": "t:sections.all.icon.options__57.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "socks",
              "label": "t:sections.all.icon.options__58.label"
            },
            {
              "group": "t:sections.all.icon.groups.clothing",
              "value": "bag",
              "label": "t:sections.all.icon.options__59.label"
            },
            {
              "group": "t:sections.all.icon.groups.sports",
              "value": "running",
              "label": "t:sections.all.icon.options__60.label"
            },
            {
              "group": "t:sections.all.icon.groups.sports",
              "value": "weightlifting",
              "label": "t:sections.all.icon.options__61.label"
            },
            {
              "group": "t:sections.all.icon.groups.sports",
              "value": "swimming",
              "label": "t:sections.all.icon.options__62.label"
            },
            {
              "group": "t:sections.all.icon.groups.sports",
              "value": "cycling",
              "label": "t:sections.all.icon.options__63.label"
            },
            {
              "group": "t:sections.all.icon.groups.sports",
              "value": "yoga",
              "label": "t:sections.all.icon.options__64.label"
            },
            {
              "group": "t:sections.all.icon.groups.sports",
              "value": "skiing",
              "label": "t:sections.all.icon.options__65.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "diamond",
              "label": "t:sections.all.icon.options__42.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "clock",
              "label": "t:sections.all.icon.options__43.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "ruler",
              "label": "t:sections.all.icon.options__44.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "eye",
              "label": "t:sections.all.icon.options__45.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "bell",
              "label": "t:sections.all.icon.options__46.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "light",
              "label": "t:sections.all.icon.options__47.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "battery",
              "label": "t:sections.all.icon.options__48.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "star",
              "label": "t:sections.all.icon.options__49.label"
            },
            {
              "group": "t:sections.all.icon.groups.others",
              "value": "book",
              "label": "t:sections.all.icon.options__50.label"
            }
          ]
        },
        {
          "type": "text",
          "id": "text",
          "label": "t:sections.header.blocks.bubble.settings.text.label",
          "default": "hot"
        },
        {
          "type": "color",
          "id": "background_color",
          "label": "t:sections.all.colors.background.label",
          "default": "#000000"
        },
        {
          "type": "color",
          "id": "foreground_color",
          "label": "t:sections.all.colors.foreground.label",
          "default": "#FFFFFF"
        }
      ]
    }
  ]
}
{% endschema %}
</file>

<file path="Ascent Section/Header/sticky-header.js">
if (!customElements.get("sticky-header")) {
    customElements.define(
      "sticky-header",
      class StickyHeader extends HTMLElement {
        constructor() {
          super();
  
          this.stickyType = this.getAttribute("data-sticky-type") || "none";
          if (this.stickyType === "none") return;
  
          this.currentScrollTop = 0;
          this.onScrollHandler = this.onScroll.bind(this);
          this.preventHide = false; // 阻止隐藏
          this.preventReveal = false; // 阻止重新显示
          this.hideHeaderOnScrollUp = () => (this.preventReveal = true);
        }
  
        connectedCallback() {
          this.header = document.querySelector(".section-header");
          this.headerIsAlwaysSticky =
            this.stickyType === "always" ||
            this.stickyType === "reduce-logo-size";
          this.headerBounds = {}; // header容器界限
  
          this.setHeaderHeight();
  
          window
            .matchMedia("(min-width: 750px)")
            .addEventListener("change", this.setHeaderHeight.bind(this));
  
          if (this.headerIsAlwaysSticky) {
            this.header.classList.add("shopify-section-header-sticky");
          }
  
          this.predictiveSearch = this.querySelector("predictive-search");
  
          // 初始化 body 的 header 状态
          document.documentElement.setAttribute("data-header-status", "visible");
  
          // 添加阻止Header显示
          this.addEventListener("preventHeaderReveal", this.hideHeaderOnScrollUp);
  
          window.addEventListener("scroll", this.onScrollHandler);
  
          this.createObserver();
        }
  
        disconnectedCallback() {
          window.removeEventListener("scroll", this.onScrollHandler);
        }
  
        setHeaderHeight() {
          if (
            document.documentElement.style.getPropertyValue("--header-height") !==
            ""
          )
            return;
          document.documentElement.style.setProperty(
            "--header-height",
            `${this.header.querySelector("header").offsetHeight}px`,
          );
        }
  
        /**
         * 监听初始页面Header的位置
         * 无论 Header 是否显示
         */
        createObserver() {
          const observer = new IntersectionObserver((entries, observer) => {
            this.headerBounds = entries[0].intersectionRect;
  
            observer.disconnect();
          });
  
          observer.observe(this.header);
        }
  
        onScroll() {
          const scrollTop =
            window.pageYOffset || document.documentElement.scrollTop;
  
          // 当禁用页面滚动或者当打开搜索弹窗
          if (
            document.body.hasAttribute("scroll-y-off") ||
            (this.predictiveSearch && this.predictiveSearch.isOpen)
          )
            return;
  
          if (
            scrollTop > this.currentScrollTop &&
            scrollTop > this.headerBounds.bottom
          ) {
            // 向下滚动并且 header pass
            this.header.classList.add("scrolled-past-header");
            if (this.preventHide) return;
  
            if (!this.headerIsAlwaysSticky)
              requestAnimationFrame(this.hide.bind(this));
          } else if (
            scrollTop < this.currentScrollTop &&
            scrollTop > this.headerBounds.bottom
          ) {
            //  向上滚动并且 header pass
            this.header.classList.add("scrolled-past-header");
            if (!this.preventReveal) {
              if (!this.headerIsAlwaysSticky)
                requestAnimationFrame(this.reveal.bind(this));
            } else {
              // 阻止当前滚动显示Header，然后重置this.preventReveal，让下次滚动继续显示Header
              // debounce效果
              window.clearTimeout(this.isScrolling);
  
              this.isScrolling = setTimeout(() => {
                this.preventReveal = false;
              }, 60);
  
              if (!this.headerIsAlwaysSticky)
                requestAnimationFrame(this.hide.bind(this));
            }
          } else if (scrollTop <= this.headerBounds.top) {
            this.header.classList.remove("scrolled-past-header");
            if (!this.headerIsAlwaysSticky)
              requestAnimationFrame(this.reset.bind(this));
          }
  
          this.currentScrollTop = scrollTop;
        }
  
        // 隐藏header
        hide() {
          this.header.classList.add(
            "shopify-section-header-hidden",
            "shopify-section-header-sticky",
          );
          this.closeDropMenus();
  
          // 更新 body 的 header 状态
          document.documentElement.setAttribute("data-header-status", "hidden");
        }
  
        // 重新显示header
        reveal() {
          this.header.classList.add("shopify-section-header-sticky", "animate");
          this.header.classList.remove("shopify-section-header-hidden");
  
          // 更新 body 的 header 状态
          document.documentElement.setAttribute("data-header-status", "visible");
        }
  
        reset() {
          this.header.classList.remove(
            "shopify-section-header-hidden",
            "shopify-section-header-sticky",
            "animate",
          );
  
          // 恢复 body 的 header 状态
          document.documentElement.setAttribute("data-header-status", "visible");
        }
  
        /**
         * 关闭打开的Menu
         */
        closeDropMenus() {
          this.dropMenus =
            this.dropMenus || this.header.querySelectorAll("drop-menu");
          this.dropMenus.forEach((dropMenu) => dropMenu.close());
        }
      },
    );
  }
</file>

<file path="CHANGELOG.md">
# skeleton

## 2025.5.1

### Patch Changes

- Bumping the cli to 3.80.4 ([#2956](https://github.com/Shopify/hydrogen/pull/2956)) by [@balazsbajorics](https://github.com/balazsbajorics)

## 2025.5.0

### Patch Changes

- Migrating to React Router 7 ([#2866](https://github.com/Shopify/hydrogen/pull/2866)) by [@balazsbajorics](https://github.com/balazsbajorics)

- Updated dependencies [[`e9132d88`](https://github.com/Shopify/hydrogen/commit/e9132d8888ad090d3db41fe4d5d63569a30e9d8e), [`e9132d88`](https://github.com/Shopify/hydrogen/commit/e9132d8888ad090d3db41fe4d5d63569a30e9d8e)]:
  - @shopify/remix-oxygen@3.0.0
  - @shopify/hydrogen@2025.5.0

## 2025.4.0

### Patch Changes

- Moved the Cursor rules into more generic LLM prompt files. If you were using the Cursor rules, you will find the prompts in the `cookbook/llms` folder and they can be put into your `.cursor/rules` folder manually. LLM prompt files will be maintained moving forward, while previous Cursor rules will not be updated anymore. ([#2936](https://github.com/Shopify/hydrogen/pull/2936)) by [@ruggishop](https://github.com/ruggishop)

- Bump skeleton @shopify/cli and @shopify/mini-oxygen ([#2883](https://github.com/Shopify/hydrogen/pull/2883)) by [@juanpprieto](https://github.com/juanpprieto)

- Update SFAPI and CAAPI versions to 2025.04 ([#2886](https://github.com/Shopify/hydrogen/pull/2886)) by [@juanpprieto](https://github.com/juanpprieto)

- Updated dependencies [[`af23e710`](https://github.com/Shopify/hydrogen/commit/af23e710dac83bb57498d9c2ef1d8bcf9df55d34), [`9d8a6644`](https://github.com/Shopify/hydrogen/commit/9d8a6644a5b67dca890c6687df390aee78fc85c3)]:
  - @shopify/hydrogen@2025.4.0

## 2025.1.7

### Patch Changes

- Fix an issue with our starter template where duplicate content can exist on URLs that use internationalized handles. For example, if you have a product handle in english of `the-havoc` and translate it to `das-chaos` in German, duplicate content exists at both: ([#2821](https://github.com/Shopify/hydrogen/pull/2821)) by [@blittle](https://github.com/blittle)

  1. https://hydrogen.shop/de-de/products/das-chaos
  2. https://hydrogen.shop/de-de/products/the-havoc

  We've changed the starter template to make the second redirect to the first.

- Added the Cursor rule for the subscriptions recipe. ([#2874](https://github.com/Shopify/hydrogen/pull/2874)) by [@ruggishop](https://github.com/ruggishop)

- Fix faulty truthiness check for cart quantity ([#2855](https://github.com/Shopify/hydrogen/pull/2855)) by [@frontsideair](https://github.com/frontsideair)

- Refactor ProductItem into a separate component ([#2872](https://github.com/Shopify/hydrogen/pull/2872)) by [@juanpprieto](https://github.com/juanpprieto)

- Updated dependencies [[`f80f3bc7`](https://github.com/Shopify/hydrogen/commit/f80f3bc7239b3ee6641cb468a17e15c77bb7815b), [`61ddf924`](https://github.com/Shopify/hydrogen/commit/61ddf92487524b3c04632ae2cfdaa2869a3ae02c), [`642bde4f`](https://github.com/Shopify/hydrogen/commit/642bde4f3df11511e125b013abd977618da25692)]:
  - @shopify/hydrogen@2025.1.4

## 2025.1.6

### Patch Changes

- Moved the `Layout` component back into `root.tsx` to avoid issues with styled errors. ([#2829](https://github.com/Shopify/hydrogen/pull/2829)) by [@ruggishop](https://github.com/ruggishop)

  1. If you have a separate `app/layout.tsx` file, delete it and move its default exported component into your `root.tsx`. For example:

     ```ts
     // /app/root.tsx
     export function Layout({children}: {children?: React.ReactNode}) {
       const nonce = useNonce();
       const data = useRouteLoaderData<RootLoader>('root');

       return (
         <html lang="en">
         ...
       );
     }
     ```

## 2025.1.5

### Patch Changes

- Fixed an issue with the creation of JavaScript projects. ([#2818](https://github.com/Shopify/hydrogen/pull/2818)) by [@seanparsons](https://github.com/seanparsons)

## 2025.1.4

### Patch Changes

- Updates the `@shopify/cli`, `@shopify/cli-kit` and `@shopify/plugin-cloudflare` dependencies to 3.77.1. ([#2816](https://github.com/Shopify/hydrogen/pull/2816)) by [@seanparsons](https://github.com/seanparsons)

## 2025.1.3

### Patch Changes

- Bump Remix to 2.16.1 and vite to 6.2.0 ([#2784](https://github.com/Shopify/hydrogen/pull/2784)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Update skeleton and create-hydrogen cli to 3.75.4 ([#2769](https://github.com/Shopify/hydrogen/pull/2769)) by [@juanpprieto](https://github.com/juanpprieto)

- Fixing typescript compile ([#2787](https://github.com/Shopify/hydrogen/pull/2787)) by [@balazsbajorics](https://github.com/balazsbajorics)

  In tsconfig.json:

  ```diff
       "types": [
         "@shopify/oxygen-workers-types",
  -      "@remix-run/node",
  +      "@remix-run/server-runtime",
         "vite/client"
       ],
  ```

- Updates `@shopify/cli-kit`, `@shopify/cli` and `@shopify/plugin-cloudflare` to `3.77.0`. ([#2810](https://github.com/Shopify/hydrogen/pull/2810)) by [@seanparsons](https://github.com/seanparsons)

- Support for the Remix future flag `v3_routeConfig`. ([#2722](https://github.com/Shopify/hydrogen/pull/2722)) by [@seanparsons](https://github.com/seanparsons)

  Please refer to the Remix documentation for more details on `v3_routeConfig` future flag: [https://remix.run/docs/en/main/start/future-flags#v3_routeconfig](https://remix.run/docs/en/main/start/future-flags#v3_routeconfig)

  1. Update your `vite.config.ts`.

     ```diff
     export default defineConfig({
       plugins: [
         hydrogen(),
         oxygen(),
         remix({
     -      presets: [hydrogen.preset()],
     +      presets: [hydrogen.v3preset()],
         future: {
           v3_fetcherPersist: true,
           v3_relativeSplatPath: true,
           v3_throwAbortReason: true,
           v3_lazyRouteDiscovery: true,
           v3_singleFetch: true,
     +      v3_routeConfig: true,
         },
       }),
       tsconfigPaths(),
     ],
     ```

  1. Update your `package.json` and install the new packages. Make sure to match the Remix version along with other Remix npm packages and ensure the versions are 2.16.1 or above:

     ```diff
       "devDependencies": {
         "@remix-run/dev": "^2.16.1",
     +    "@remix-run/fs-routes": "^2.16.1",
     +    "@remix-run/route-config": "^2.16.1",
     ```

  1. Move the `Layout` component export from `root.tsx` into its own file. Make sure to supply an `<Outlet>` so Remix knows where to inject your route content.

     ```ts
     // /app/layout.tsx
     import {Outlet} from '@remix-run/react';

     export default function Layout() {
       const nonce = useNonce();
       const data = useRouteLoaderData<RootLoader>('root');

       return (
         <html lang="en">
           ...
           <Outlet />
           ...
         </html>
       );
     }

     // Remember to remove the Layout export from your root.tsx
     ```

  1. Add a routes.ts file. This is your new Remix route configuration file.

     ```ts
     import { flatRoutes } from "@remix-run/fs-routes";
     import { layout, type RouteConfig } from "@remix-run/route-config";
     import { hydrogenRoutes } from "@shopify/hydrogen";

     export default hydrogenRoutes([
       // Your entire app reading from routes folder using Layout from layout.tsx
       layout("./layout.tsx", await flatRoutes()),
     ]) satisfies RouteConfig;
     ```

- Updated dependencies [[`0425e50d`](https://github.com/Shopify/hydrogen/commit/0425e50dafe2f42326cba67076e5fcea2905e885), [`74ef1ba7`](https://github.com/Shopify/hydrogen/commit/74ef1ba7d41988350e9d2c81731c90381943d1f0)]:
  - @shopify/remix-oxygen@2.0.12
  - @shopify/hydrogen@2025.1.3

## 2025.1.2

### Patch Changes

- Bump cli version ([#2760](https://github.com/Shopify/hydrogen/pull/2760)) by [@rbshop](https://github.com/rbshop)

- Updated dependencies [[`128dfcd6`](https://github.com/Shopify/hydrogen/commit/128dfcd6b254a7465d93be49d3bcbff5251e5ffc)]:
  - @shopify/hydrogen@2025.1.2

## 2025.1.1

### Patch Changes

- Upgrade eslint to version 9 and unify eslint config across all packages (with the exception of the skeleton, which still keeps its own config) ([#2716](https://github.com/Shopify/hydrogen/pull/2716)) by [@liady](https://github.com/liady)

- Bump remix version ([#2740](https://github.com/Shopify/hydrogen/pull/2740)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Turn on Remix `v3_singleFetch` future flag ([#2708](https://github.com/Shopify/hydrogen/pull/2708)) by [@wizardlyhel](https://github.com/wizardlyhel)

  Remix single fetch migration quick guide: https://remix.run/docs/en/main/start/future-flags#v3_singlefetch
  Remix single fetch migration guide: https://remix.run/docs/en/main/guides/single-fetch

  **Note:** If you have any routes that appends (or looks for) a search param named `_data`, make sure to rename it to something else.

  1. In your `vite.config.ts`, add the single fetch future flag.

     ```diff
     +  declare module "@remix-run/server-runtime" {
     +    interface Future {
     +     v3_singleFetch: true;
     +    }
     +  }

       export default defineConfig({
         plugins: [
           hydrogen(),
           oxygen(),
           remix({
             presets: [hydrogen.preset()],
             future: {
               v3_fetcherPersist: true,
               v3_relativeSplatPath: true,
               v3_throwAbortReason: true,
               v3_lazyRouteDiscovery: true,
     +         v3_singleFetch: true,
             },
           }),
           tsconfigPaths(),
         ],
     ```

  2. In your `entry.server.tsx`, add `nonce` to the `<RemixServer>`.

     ```diff
     const body = await renderToReadableStream(
       <NonceProvider>
         <RemixServer
           context={remixContext}
           url={request.url}
     +     nonce={nonce}
         />
       </NonceProvider>,
     ```

  3. Update the `shouldRevalidate` function in `root.tsx`.

     Defaulting to no revalidation for root loader data to improve performance. When using this feature, you risk your UI getting out of sync with your server. Use with caution. If you are uncomfortable with this optimization, update the `return false;` to `return defaultShouldRevalidate;` instead.

     For more details see: https://remix.run/docs/en/main/route/should-revalidate

     ```diff
     export const shouldRevalidate: ShouldRevalidateFunction = ({
       formMethod,
       currentUrl,
       nextUrl,
     -  defaultShouldRevalidate,
     }) => {
       // revalidate when a mutation is performed e.g add to cart, login...
       if (formMethod && formMethod !== 'GET') return true;

       // revalidate when manually revalidating via useRevalidator
       if (currentUrl.toString() === nextUrl.toString()) return true;

     -  return defaultShouldRevalidate;
     +  return false;
     };
     ```

  4. Update `cart.tsx` to add a headers export and update to `data` import usage.

     ```diff
       import {
     -  json,
     +  data,
         type LoaderFunctionArgs,
         type ActionFunctionArgs,
         type HeadersFunction
       } from '@shopify/remix-oxygen';
     + export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;

       export async function action({request, context}: ActionFunctionArgs) {
         ...
     -   return json(
     +   return data(
           {
             cart: cartResult,
             errors,
             warnings,
             analytics: {
               cartId,
             },
           },
           {status, headers},
         );
       }

       export async function loader({context}: LoaderFunctionArgs) {
         const {cart} = context;
     -    return json(await cart.get());
     +    return await cart.get();
       }
     ```

  5. Deprecate `json` and `defer` import usage from `@shopify/remix-oxygen`.

     Remove `json()`/`defer()` in favor of raw objects.

     Single Fetch supports JSON objects and Promises out of the box, so you can return the raw data from your loader/action functions:

     ```diff
     - import {json} from "@shopify/remix-oxygen";

       export async function loader({}: LoaderFunctionArgs) {
         let tasks = await fetchTasks();
     -   return json(tasks);
     +   return tasks;
       }
     ```

     ```diff
     - import {defer} from "@shopify/remix-oxygen";

       export async function loader({}: LoaderFunctionArgs) {
         let lazyStuff = fetchLazyStuff();
         let tasks = await fetchTasks();
     -   return defer({ tasks, lazyStuff });
     +   return { tasks, lazyStuff };
       }
     ```

     If you were using the second parameter of json/defer to set a custom status or headers on your response, you can continue doing so via the new data API:

     ```diff
     -  import {json} from "@shopify/remix-oxygen";
     +  import {data, type HeadersFunction} from "@shopify/remix-oxygen";

     +  /**
     +   * If your loader or action is returning a response with headers,
     +   * make sure to export a headers function that merges your headers
     +   * on your route. Otherwise, your headers may be lost.
     +   * Remix doc: https://remix.run/docs/en/main/route/headers
     +   **/
     +  export const headers: HeadersFunction = ({loaderHeaders}) => loaderHeaders;

       export async function loader({}: LoaderFunctionArgs) {
         let tasks = await fetchTasks();
     -    return json(tasks, {
     +    return data(tasks, {
           headers: {
             "Cache-Control": "public, max-age=604800"
           }
         });
       }
     ```

  6. If you are using legacy customer account flow or multipass, there are a couple more files that requires updating:

     In `root.tsx` and `routes/account.tsx`, add a `headers` export for `loaderHeaders`.

     ```diff
     + export const headers: HeadersFunction = ({loaderHeaders}) => loaderHeaders;
     ```

     In `routes/account_.register.tsx`, add a `headers` export for `actionHeaders`.

     ```diff
     + export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;
     ```

  7. If you are using multipass, in `routes/account_.login.multipass.tsx`

     a. export a `headers` export

     ```diff
     + export const headers: HeadersFunction = ({actionHeaders}) => actionHeaders;
     ```

     b. Update all `json` response wrapper to `remixData`

     ```diff
     import {
     - json,
     + data as remixData,
     } from '@shopify/remix-oxygen';

     -  return json(
     +  return remixData(
         ...
       );
     ```

- Updated dependencies [[`3af2e453`](https://github.com/Shopify/hydrogen/commit/3af2e4534eafe1467f70a35885a2fa2ef7724fa8), [`6bff6b62`](https://github.com/Shopify/hydrogen/commit/6bff6b6260af21b8025426c7031ab862dbecbc34), [`cd65685c`](https://github.com/Shopify/hydrogen/commit/cd65685c1036233faaead0330f25183900b102a7), [`8c717570`](https://github.com/Shopify/hydrogen/commit/8c7175701d9f4dd05d271ea46b6ab40d6e3210cb), [`4e81bd1b`](https://github.com/Shopify/hydrogen/commit/4e81bd1b0e99b5c760679b565d2f95c4fc15b934), [`3ea25820`](https://github.com/Shopify/hydrogen/commit/3ea25820b0b0094d982e481782e413165435cf00)]:
  - @shopify/hydrogen@2025.1.1
  - @shopify/remix-oxygen@2.0.11

## 2025.1.0

### Patch Changes

- Bump vite, Remix versions and tailwind v4 alpha to beta ([#2696](https://github.com/Shopify/hydrogen/pull/2696)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Workaround for "Error: failed to execute 'insertBefore' on 'Node'" that sometimes happen during development. ([#2701](https://github.com/Shopify/hydrogen/pull/2701)) by [@wizardlyhel](https://github.com/wizardlyhel)

  ```diff
  // root.tsx

  /**
   * The main and reset stylesheets are added in the Layout component
   * to prevent a bug in development HMR updates.
   *
   * This avoids the "failed to execute 'insertBefore' on 'Node'" error
   * that occurs after editing and navigating to another page.
   *
   * It's a temporary fix until the issue is resolved.
   * https://github.com/remix-run/remix/issues/9242
   */
  export function links() {
    return [
  -    {rel: 'stylesheet', href: resetStyles},
  -    {rel: 'stylesheet', href: appStyles},
      {
        rel: 'preconnect',
        href: 'https://cdn.shopify.com',
      },
      {
        rel: 'preconnect',
        href: 'https://shop.app',
      },
      {rel: 'icon', type: 'image/svg+xml', href: favicon},
    ];
  }

  ...

  export function Layout({children}: {children?: React.ReactNode}) {
    const nonce = useNonce();
    const data = useRouteLoaderData<RootLoader>('root');

    return (
      <html lang="en">
        <head>
          <meta charSet="utf-8" />
          <meta name="viewport" content="width=device-width,initial-scale=1" />
  +        <link rel="stylesheet" href={resetStyles}></link>
  +        <link rel="stylesheet" href={appStyles}></link>

  ```

- Turn on future flag `v3_lazyRouteDiscovery` ([#2702](https://github.com/Shopify/hydrogen/pull/2702)) by [@wizardlyhel](https://github.com/wizardlyhel)

  In your vite.config.ts, add the following line:

  ```diff
  export default defineConfig({
    plugins: [
      hydrogen(),
      oxygen(),
      remix({
        presets: [hydrogen.preset()],
        future: {
          v3_fetcherPersist: true,
          v3_relativeSplatPath: true,
          v3_throwAbortReason: true,
  +        v3_lazyRouteDiscovery: true,
        },
      }),
      tsconfigPaths(),
    ],
  ```

  Test your app by running `npm run dev` and nothing should break

- Fix image size warnings on collections page ([#2703](https://github.com/Shopify/hydrogen/pull/2703)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Bump cli version ([#2732](https://github.com/Shopify/hydrogen/pull/2732)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Bump SFAPI to 2025-01 ([#2715](https://github.com/Shopify/hydrogen/pull/2715)) by [@rbshop](https://github.com/rbshop)

- Updated dependencies [[`fdab06f5`](https://github.com/Shopify/hydrogen/commit/fdab06f5d34076b526d406698bdf6fca6787660b), [`ae6d71f0`](https://github.com/Shopify/hydrogen/commit/ae6d71f0976f520ca177c69ff677f852af63859e), [`650d57b3`](https://github.com/Shopify/hydrogen/commit/650d57b3e07125661e23900e73c0bb3027ddbcde), [`064de138`](https://github.com/Shopify/hydrogen/commit/064de13890c68cabb1c3fdbe7f77409a0cf1c384)]:
  - @shopify/remix-oxygen@2.0.10
  - @shopify/hydrogen@2025.1.0

## 2024.10.4

### Patch Changes

- Bump cli version ([#2694](https://github.com/Shopify/hydrogen/pull/2694)) by [@wizardlyhel](https://github.com/wizardlyhel)

## 2024.10.3

### Patch Changes

- Prevent scroll reset on variant change ([#2672](https://github.com/Shopify/hydrogen/pull/2672)) by [@scottdixon](https://github.com/scottdixon)

## 2024.10.2

### Patch Changes

- Remove initial redirect from product display page ([#2643](https://github.com/Shopify/hydrogen/pull/2643)) by [@scottdixon](https://github.com/scottdixon)

- Optional updates for the product route and product form to handle combined listing and 2000 variant limit. ([#2659](https://github.com/Shopify/hydrogen/pull/2659)) by [@wizardlyhel](https://github.com/wizardlyhel)

  1. Update your SFAPI product query to bring in the new query fields:

  ```diff
  const PRODUCT_FRAGMENT = `#graphql
    fragment Product on Product {
      id
      title
      vendor
      handle
      descriptionHtml
      description
  +    encodedVariantExistence
  +    encodedVariantAvailability
      options {
        name
        optionValues {
          name
  +        firstSelectableVariant {
  +          ...ProductVariant
  +        }
  +        swatch {
  +          color
  +          image {
  +            previewImage {
  +              url
  +            }
  +          }
  +        }
        }
      }
  -    selectedVariant: selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
  +    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
  +      ...ProductVariant
  +    }
  +    adjacentVariants (selectedOptions: $selectedOptions) {
  +      ...ProductVariant
  +    }
  -    variants(first: 1) {
  -      nodes {
  -        ...ProductVariant
  -      }
  -    }
      seo {
        description
        title
      }
    }
    ${PRODUCT_VARIANT_FRAGMENT}
  ` as const;
  ```

  2. Update `loadDeferredData` function. We no longer need to load in all the variants. You can also remove `VARIANTS_QUERY` variable.

  ```diff
  function loadDeferredData({context, params}: LoaderFunctionArgs) {
  +  // Put any API calls that is not critical to be available on first page render
  +  // For example: product reviews, product recommendations, social feeds.
  -  // In order to show which variants are available in the UI, we need to query
  -  // all of them. But there might be a *lot*, so instead separate the variants
  -  // into it's own separate query that is deferred. So there's a brief moment
  -  // where variant options might show as available when they're not, but after
  -  // this deferred query resolves, the UI will update.
  -  const variants = context.storefront
  -    .query(VARIANTS_QUERY, {
  -      variables: {handle: params.handle!},
  -    })
  -    .catch((error) => {
  -      // Log query errors, but don't throw them so the page can still render
  -      console.error(error);
  -      return null;
  -    });

  +  return {}
  -  return {
  -    variants,
  -  };
  }
  ```

  3. Remove the redirect logic in the `loadCriticalData` function and completely remove `redirectToFirstVariant` function

  ```diff
  async function loadCriticalData({
    context,
    params,
    request,
  }: LoaderFunctionArgs) {
    const {handle} = params;
    const {storefront} = context;
    if (!handle) {
      throw new Error('Expected product handle to be defined');
    }
    const [{product}] = await Promise.all([
      storefront.query(PRODUCT_QUERY, {
        variables: {handle, selectedOptions: getSelectedProductOptions(request)},
      }),
      // Add other queries here, so that they are loaded in parallel
    ]);

    if (!product?.id) {
      throw new Response(null, {status: 404});
    }

  -  const firstVariant = product.variants.nodes[0];
  -  const firstVariantIsDefault = Boolean(
  -    firstVariant.selectedOptions.find(
  -      (option: SelectedOption) =>
  -        option.name === 'Title' && option.value === 'Default Title',
  -    ),
  -  );

  -  if (firstVariantIsDefault) {
  -    product.selectedVariant = firstVariant;
  -  } else {
  -    // if no selected variant was returned from the selected options,
  -    // we redirect to the first variant's url with it's selected options applied
  -    if (!product.selectedVariant) {
  -      throw redirectToFirstVariant({product, request});
  -    }
  -  }

    return {
      product,
    };
  }

  ...

  -  function redirectToFirstVariant({
  -    product,
  -    request,
  -  }: {
  -    product: ProductFragment;
  -    request: Request;
  -  }) {
  -    ...
  -  }
  ```

  4. Update the `Product` component to use the new data fields.

  ```diff
  import {
    getSelectedProductOptions,
    Analytics,
    useOptimisticVariant,
  +  getAdjacentAndFirstAvailableVariants,
  } from '@shopify/hydrogen';

  export default function Product() {
  +  const {product} = useLoaderData<typeof loader>();
  -  const {product, variants} = useLoaderData<typeof loader>();

  +  // Optimistically selects a variant with given available variant information
  +  const selectedVariant = useOptimisticVariant(
  +    product.selectedOrFirstAvailableVariant,
  +    getAdjacentAndFirstAvailableVariants(product),
  +  );
  -  const selectedVariant = useOptimisticVariant(
  -    product.selectedVariant,
  -    variants,
  -  );
  ```

  5. Handle missing search query param in url from selecting a first variant

  ```diff
  import {
    getSelectedProductOptions,
    Analytics,
    useOptimisticVariant,
    getAdjacentAndFirstAvailableVariants,
  +  useSelectedOptionInUrlParam,
  } from '@shopify/hydrogen';

  export default function Product() {
    const {product} = useLoaderData<typeof loader>();

    // Optimistically selects a variant with given available variant information
    const selectedVariant = useOptimisticVariant(
      product.selectedOrFirstAvailableVariant,
      getAdjacentAndFirstAvailableVariants(product),
    );

  +  // Sets the search param to the selected variant without navigation
  +  // only when no search params are set in the url
  +  useSelectedOptionInUrlParam(selectedVariant.selectedOptions);
  ```

  6. Get the product options array using `getProductOptions`

  ```diff
  import {
    getSelectedProductOptions,
    Analytics,
    useOptimisticVariant,
  +  getProductOptions,
    getAdjacentAndFirstAvailableVariants,
    useSelectedOptionInUrlParam,
  } from '@shopify/hydrogen';

  export default function Product() {
    const {product} = useLoaderData<typeof loader>();

    // Optimistically selects a variant with given available variant information
    const selectedVariant = useOptimisticVariant(
      product.selectedOrFirstAvailableVariant,
      getAdjacentAndFirstAvailableVariants(product),
    );

    // Sets the search param to the selected variant without navigation
    // only when no search params are set in the url
    useSelectedOptionInUrlParam(selectedVariant.selectedOptions);

  +  // Get the product options array
  +  const productOptions = getProductOptions({
  +    ...product,
  +    selectedOrFirstAvailableVariant: selectedVariant,
  +  });
  ```

  7. Remove the `Await` and `Suspense` from the `ProductForm`. We no longer have any queries that we need to wait for.

  ```diff
  export default function Product() {

    ...

    return (
      ...
  +        <ProductForm
  +          productOptions={productOptions}
  +          selectedVariant={selectedVariant}
  +        />
  -        <Suspense
  -          fallback={
  -            <ProductForm
  -              product={product}
  -              selectedVariant={selectedVariant}
  -              variants={[]}
  -            />
  -          }
  -        >
  -          <Await
  -            errorElement="There was a problem loading product variants"
  -            resolve={variants}
  -          >
  -            {(data) => (
  -              <ProductForm
  -                product={product}
  -                selectedVariant={selectedVariant}
  -                variants={data?.product?.variants.nodes || []}
  -              />
  -            )}
  -          </Await>
  -        </Suspense>
  ```

  8. Update the `ProductForm` component.

  ```tsx
  import { Link, useNavigate } from "@remix-run/react";
  import { type MappedProductOptions } from "@shopify/hydrogen";
  import type {
    Maybe,
    ProductOptionValueSwatch,
  } from "@shopify/hydrogen/storefront-api-types";
  import { AddToCartButton } from "./AddToCartButton";
  import { useAside } from "./Aside";
  import type { ProductFragment } from "storefrontapi.generated";

  export function ProductForm({
    productOptions,
    selectedVariant,
  }: {
    productOptions: MappedProductOptions[];
    selectedVariant: ProductFragment["selectedOrFirstAvailableVariant"];
  }) {
    const navigate = useNavigate();
    const { open } = useAside();
    return (
      <div className="product-form">
        {productOptions.map((option) => (
          <div className="product-options" key={option.name}>
            <h5>{option.name}</h5>
            <div className="product-options-grid">
              {option.optionValues.map((value) => {
                const {
                  name,
                  handle,
                  variantUriQuery,
                  selected,
                  available,
                  exists,
                  isDifferentProduct,
                  swatch,
                } = value;

                if (isDifferentProduct) {
                  // SEO
                  // When the variant is a combined listing child product
                  // that leads to a different url, we need to render it
                  // as an anchor tag
                  return (
                    <Link
                      className="product-options-item"
                      key={option.name + name}
                      prefetch="intent"
                      preventScrollReset
                      replace
                      to={`/products/${handle}?${variantUriQuery}`}
                      style={{
                        border: selected
                          ? "1px solid black"
                          : "1px solid transparent",
                        opacity: available ? 1 : 0.3,
                      }}
                    >
                      <ProductOptionSwatch swatch={swatch} name={name} />
                    </Link>
                  );
                } else {
                  // SEO
                  // When the variant is an update to the search param,
                  // render it as a button with javascript navigating to
                  // the variant so that SEO bots do not index these as
                  // duplicated links
                  return (
                    <button
                      type="button"
                      className={`product-options-item${
                        exists && !selected ? " link" : ""
                      }`}
                      key={option.name + name}
                      style={{
                        border: selected
                          ? "1px solid black"
                          : "1px solid transparent",
                        opacity: available ? 1 : 0.3,
                      }}
                      disabled={!exists}
                      onClick={() => {
                        if (!selected) {
                          navigate(`?${variantUriQuery}`, {
                            replace: true,
                          });
                        }
                      }}
                    >
                      <ProductOptionSwatch swatch={swatch} name={name} />
                    </button>
                  );
                }
              })}
            </div>
            <br />
          </div>
        ))}
        <AddToCartButton
          disabled={!selectedVariant || !selectedVariant.availableForSale}
          onClick={() => {
            open("cart");
          }}
          lines={
            selectedVariant
              ? [
                  {
                    merchandiseId: selectedVariant.id,
                    quantity: 1,
                    selectedVariant,
                  },
                ]
              : []
          }
        >
          {selectedVariant?.availableForSale ? "Add to cart" : "Sold out"}
        </AddToCartButton>
      </div>
    );
  }

  function ProductOptionSwatch({
    swatch,
    name,
  }: {
    swatch?: Maybe<ProductOptionValueSwatch> | undefined;
    name: string;
  }) {
    const image = swatch?.image?.previewImage?.url;
    const color = swatch?.color;

    if (!image && !color) return name;

    return (
      <div
        aria-label={name}
        className="product-option-label-swatch"
        style={{
          backgroundColor: color || "transparent",
        }}
      >
        {!!image && <img src={image} alt={name} />}
      </div>
    );
  }
  ```

  9. Update `app.css`

  ```diff
  +  /*
  +  * --------------------------------------------------
  +  * Non anchor links
  +  * --------------------------------------------------
  +  */
  +  .link:hover {
  +    text-decoration: underline;
  +    cursor: pointer;
  +  }

  ...

  -  .product-options-item {
  +  .product-options-item,
  +  .product-options-item:disabled {
  +    padding: 0.25rem 0.5rem;
  +    background-color: transparent;
  +    font-size: 1rem;
  +    font-family: inherit;
  +  }

  +  .product-option-label-swatch {
  +    width: 1.25rem;
  +    height: 1.25rem;
  +    margin: 0.25rem 0;
  +  }

  +  .product-option-label-swatch img {
  +    width: 100%;
  +  }
  ```

  10. Update `lib/variants.ts`

  Make `useVariantUrl` and `getVariantUrl` flexible to supplying a selected option param

  ```diff
  export function useVariantUrl(
    handle: string,
  -  selectedOptions: SelectedOption[],
  +  selectedOptions?: SelectedOption[],
  ) {
    const {pathname} = useLocation();

    return useMemo(() => {
      return getVariantUrl({
        handle,
        pathname,
        searchParams: new URLSearchParams(),
        selectedOptions,
      });
    }, [handle, selectedOptions, pathname]);
  }
  export function getVariantUrl({
    handle,
    pathname,
    searchParams,
    selectedOptions,
  }: {
    handle: string;
    pathname: string;
    searchParams: URLSearchParams;
  -  selectedOptions: SelectedOption[];
  +  selectedOptions?: SelectedOption[],
  }) {
    const match = /(\/[a-zA-Z]{2}-[a-zA-Z]{2}\/)/g.exec(pathname);
    const isLocalePathname = match && match.length > 0;
    const path = isLocalePathname
      ? `${match![0]}products/${handle}`
      : `/products/${handle}`;

  -  selectedOptions.forEach((option) => {
  +  selectedOptions?.forEach((option) => {
      searchParams.set(option.name, option.value);
    });
  ```

  11. Update `routes/collections.$handle.tsx`

  We no longer need to query for the variants since product route can efficiently
  obtain the first available variants. Update the code to reflect that:

  ```diff
  const PRODUCT_ITEM_FRAGMENT = `#graphql
    fragment MoneyProductItem on MoneyV2 {
      amount
      currencyCode
    }
    fragment ProductItem on Product {
      id
      handle
      title
      featuredImage {
        id
        altText
        url
        width
        height
      }
      priceRange {
        minVariantPrice {
          ...MoneyProductItem
        }
        maxVariantPrice {
          ...MoneyProductItem
        }
      }
  -    variants(first: 1) {
  -      nodes {
  -        selectedOptions {
  -          name
  -          value
  -        }
  -      }
  -    }
    }
  ` as const;
  ```

  and remove the variant reference

  ```diff
  function ProductItem({
    product,
    loading,
  }: {
    product: ProductItemFragment;
    loading?: 'eager' | 'lazy';
  }) {
  -  const variant = product.variants.nodes[0];
  -  const variantUrl = useVariantUrl(product.handle, variant.selectedOptions);
  +  const variantUrl = useVariantUrl(product.handle);
    return (
  ```

  12. Update `routes/collections.all.tsx`

  Same reasoning as `collections.$handle.tsx`

  ```diff
  const PRODUCT_ITEM_FRAGMENT = `#graphql
    fragment MoneyProductItem on MoneyV2 {
      amount
      currencyCode
    }
    fragment ProductItem on Product {
      id
      handle
      title
      featuredImage {
        id
        altText
        url
        width
        height
      }
      priceRange {
        minVariantPrice {
          ...MoneyProductItem
        }
        maxVariantPrice {
          ...MoneyProductItem
        }
      }
  -    variants(first: 1) {
  -      nodes {
  -        selectedOptions {
  -          name
  -          value
  -        }
  -      }
  -    }
    }
  ` as const;
  ```

  and remove the variant reference

  ```diff
  function ProductItem({
    product,
    loading,
  }: {
    product: ProductItemFragment;
    loading?: 'eager' | 'lazy';
  }) {
  -  const variant = product.variants.nodes[0];
  -  const variantUrl = useVariantUrl(product.handle, variant.selectedOptions);
  +  const variantUrl = useVariantUrl(product.handle);
    return (
  ```

  13. Update `routes/search.tsx`

  Instead of using the first variant, use `selectedOrFirstAvailableVariant`

  ```diff
  const SEARCH_PRODUCT_FRAGMENT = `#graphql
    fragment SearchProduct on Product {
      __typename
      handle
      id
      publishedAt
      title
      trackingParameters
      vendor
  -    variants(first: 1) {
  -      nodes {
  +    selectedOrFirstAvailableVariant(
  +      selectedOptions: []
  +      ignoreUnknownOptions: true
  +      caseInsensitiveMatch: true
  +    ) {
          id
          image {
            url
            altText
            width
            height
          }
          price {
            amount
            currencyCode
          }
          compareAtPrice {
            amount
            currencyCode
          }
          selectedOptions {
            name
            value
          }
          product {
            handle
            title
          }
       }
  -    }
    }
  ` as const;
  ```

  ```diff
  const PREDICTIVE_SEARCH_PRODUCT_FRAGMENT = `#graphql
    fragment PredictiveProduct on Product {
      __typename
      id
      title
      handle
      trackingParameters
  -    variants(first: 1) {
  -      nodes {
  +    selectedOrFirstAvailableVariant(
  +      selectedOptions: []
  +      ignoreUnknownOptions: true
  +      caseInsensitiveMatch: true
  +    ) {
          id
          image {
            url
            altText
            width
            height
          }
          price {
            amount
            currencyCode
          }
       }
  -    }
    }
  ```

  14. Update `components/SearchResults.tsx`

  ```diff
  function SearchResultsProducts({
    term,
    products,
  }: PartialSearchResult<'products'>) {
    if (!products?.nodes.length) {
      return null;
    }

    return (
      <div className="search-result">
        <h2>Products</h2>
        <Pagination connection={products}>
          {({nodes, isLoading, NextLink, PreviousLink}) => {
            const ItemsMarkup = nodes.map((product) => {
              const productUrl = urlWithTrackingParams({
                baseUrl: `/products/${product.handle}`,
                trackingParams: product.trackingParameters,
                term,
              });

  +            const price = product?.selectedOrFirstAvailableVariant?.price;
  +            const image = product?.selectedOrFirstAvailableVariant?.image;

              return (
                <div className="search-results-item" key={product.id}>
                  <Link prefetch="intent" to={productUrl}>
  -                  {product.variants.nodes[0].image && (
  +                  {image && (
                      <Image
  -                      data={product.variants.nodes[0].image}
  +                      data={image}
                        alt={product.title}
                        width={50}
                      />
                    )}
                    <div>
                      <p>{product.title}</p>
                      <small>
  -                      <Money data={product.variants.nodes[0].price} />
  +                      {price &&
  +                        <Money data={price} />
  +                      }
                      </small>
                    </div>
                  </Link>
                </div>
              );
            });
  ```

  15. Update `components/SearchResultsPredictive.tsx`

  ```diff
  function SearchResultsPredictiveProducts({
    term,
    products,
    closeSearch,
  }: PartialPredictiveSearchResult<'products'>) {
    if (!products.length) return null;

    return (
      <div className="predictive-search-result" key="products">
        <h5>Products</h5>
        <ul>
          {products.map((product) => {
            const productUrl = urlWithTrackingParams({
              baseUrl: `/products/${product.handle}`,
              trackingParams: product.trackingParameters,
              term: term.current,
            });

  +          const price = product?.selectedOrFirstAvailableVariant?.price;
  -          const image = product?.variants?.nodes?.[0].image;
  +          const image = product?.selectedOrFirstAvailableVariant?.image;
            return (
              <li className="predictive-search-result-item" key={product.id}>
                <Link to={productUrl} onClick={closeSearch}>
                  {image && (
                    <Image
                      alt={image.altText ?? ''}
                      src={image.url}
                      width={50}
                      height={50}
                    />
                  )}
                  <div>
                    <p>{product.title}</p>
                    <small>
  -                    {product?.variants?.nodes?.[0].price && (
  +                    {price && (
  -                      <Money data={product.variants.nodes[0].price} />
  +                      <Money data={price} />
                      )}
                    </small>
                  </div>
                </Link>
              </li>
            );
          })}
        </ul>
      </div>
    );
  }
  ```

- Update `Aside` to have an accessible close button label ([#2639](https://github.com/Shopify/hydrogen/pull/2639)) by [@lb-](https://github.com/lb-)

- Fix cart route so that it works with no-js ([#2665](https://github.com/Shopify/hydrogen/pull/2665)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Bump Shopify cli version ([#2667](https://github.com/Shopify/hydrogen/pull/2667)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Updated dependencies [[`8f64915e`](https://github.com/Shopify/hydrogen/commit/8f64915e934130299307417627a12caf756cd8da), [`a57d5267`](https://github.com/Shopify/hydrogen/commit/a57d5267daa2f22fe1a426fb9f62c242957f95b6), [`91d60fd2`](https://github.com/Shopify/hydrogen/commit/91d60fd2174b7c34f9f6b781cd5f0a70371fd899), [`23a80f3e`](https://github.com/Shopify/hydrogen/commit/23a80f3e7bf9f9908130fc9345397fc694420364)]:
  - @shopify/hydrogen@2024.10.1

## 2024.10.1

### Patch Changes

- Bump to get new cli package version by [@wizardlyhel](https://github.com/wizardlyhel)

## 2024.10.0

### Patch Changes

- Stabilize `getSitemap`, `getSitemapIndex` and implement on skeleton ([#2589](https://github.com/Shopify/hydrogen/pull/2589)) by [@juanpprieto](https://github.com/juanpprieto)

  1. Update the `getSitemapIndex` at `/app/routes/[sitemap.xml].tsx`

  ```diff
  - import {unstable__getSitemapIndex as getSitemapIndex} from '@shopify/hydrogen';
  + import {getSitemapIndex} from '@shopify/hydrogen';
  ```

  2. Update the `getSitemap` at `/app/routes/sitemap.$type.$page[.xml].tsx`

  ```diff
  - import {unstable__getSitemap as getSitemap} from '@shopify/hydrogen';
  + import {getSitemap} from '@shopify/hydrogen';
  ```

  For a reference implementation please see the skeleton template sitemap routes

- [**Breaking change**] ([#2588](https://github.com/Shopify/hydrogen/pull/2588)) by [@wizardlyhel](https://github.com/wizardlyhel)

  Set up Customer Privacy without the Shopify's cookie banner by default.

  If you are using Shopify's cookie banner to handle user consent in your app, you need to set `withPrivacyBanner: true` to the consent config. Without this update, the Shopify cookie banner will not appear.

  ```diff
    return defer({
      ...
      consent: {
        checkoutDomain: env.PUBLIC_CHECKOUT_DOMAIN,
        storefrontAccessToken: env.PUBLIC_STOREFRONT_API_TOKEN,
  +      withPrivacyBanner: true,
        // localize the privacy banner
        country: args.context.storefront.i18n.country,
        language: args.context.storefront.i18n.language,
      },
    });
  ```

- Update to 2024-10 SFAPI ([#2570](https://github.com/Shopify/hydrogen/pull/2570)) by [@wizardlyhel](https://github.com/wizardlyhel)

- [**Breaking change**] ([#2546](https://github.com/Shopify/hydrogen/pull/2546)) by [@frandiox](https://github.com/frandiox)

  Update `createWithCache` to make it harder to accidentally cache undesired results. `request` is now mandatory prop when initializing `createWithCache`.

  ```diff
  // server.ts
  export default {
    async fetch(
      request: Request,
      env: Env,
      executionContext: ExecutionContext,
    ): Promise<Response> {
      try {
        // ...
  -     const withCache = createWithCache({cache, waitUntil});
  +     const withCache = createWithCache({cache, waitUntil, request});
  ```

  `createWithCache` now returns an object with two utility functions: `withCache.run` and `withCache.fetch`. Both have a new prop `shouldCacheResult` that must be defined.

  The original `withCache` callback function is now `withCache.run`. This is useful to run _multiple_ fetch calls and merge their responses, or run any arbitrary code. It caches anything you return, but you can throw if you don't want to cache anything.

  ```diff
    const withCache = createWithCache({cache, waitUntil, request});

    const fetchMyCMS = (query) => {
  -    return withCache(['my-cms', query], CacheLong(), async (params) => {
  +    return withCache.run({
  +      cacheKey: ['my-cms', query],
  +      cacheStrategy: CacheLong(),
  +      // Cache if there are no data errors or a specific data that make this result not suited for caching
  +      shouldCacheResult: (result) => !result?.errors,
  +    }, async(params) => {
        const response = await fetch('my-cms.com/api', {
          method: 'POST',
          body: query,
        });
        if (!response.ok) throw new Error(response.statusText);
        const {data, error} = await response.json();
        if (error || !data) throw new Error(error ?? 'Missing data');
        params.addDebugData({displayName: 'My CMS query', response});
        return data;
      });
    };
  ```

  New `withCache.fetch` is for caching simple fetch requests. This method caches the responses if they are OK responses, and you can pass `shouldCacheResponse`, `cacheKey`, etc. to modify behavior. `data` is the consumed body of the response (we need to consume to cache it).

  ```ts
  const withCache = createWithCache({ cache, waitUntil, request });

  const { data, response } = await withCache.fetch<{ data: T; error: string }>(
    "my-cms.com/api",
    {
      method: "POST",
      headers: { "Content-type": "application/json" },
      body,
    },
    {
      cacheStrategy: CacheLong(),
      // Cache if there are no data errors or a specific data that make this result not suited for caching
      shouldCacheResponse: (result) => !result?.error,
      cacheKey: ["my-cms", body],
      displayName: "My CMS query",
    },
  );
  ```

- [**Breaking change**] ([#2585](https://github.com/Shopify/hydrogen/pull/2585)) by [@wizardlyhel](https://github.com/wizardlyhel)

  Deprecate usages of `product.options.values` and use `product.options.optionValues` instead.

  1. Update your product graphql query to use the new `optionValues` field.

  ```diff
    const PRODUCT_FRAGMENT = `#graphql
      fragment Product on Product {
        id
        title
        options {
          name
  -        values
  +        optionValues {
  +          name
  +        }
        }
  ```

  2. Update your `<VariantSelector>` to use the new `optionValues` field.

  ```diff
    <VariantSelector
      handle={product.handle}
  -    options={product.options.filter((option) => option.values.length > 1)}
  +    options={product.options.filter((option) => option.optionValues.length > 1)}
      variants={variants}
    >
  ```

- Updated dependencies [[`d97cd56e`](https://github.com/Shopify/hydrogen/commit/d97cd56e859abf8dd005fef2589d99e07fa87b6e), [`809c9f3d`](https://github.com/Shopify/hydrogen/commit/809c9f3d342b56dd3c0d340cb733e6f00053b71d), [`8c89f298`](https://github.com/Shopify/hydrogen/commit/8c89f298a8d9084ee510fb4d0d17766ec43c249c), [`a253ef97`](https://github.com/Shopify/hydrogen/commit/a253ef971acb08f2ee3a2743ca5c901c2922acc0), [`84a66b1e`](https://github.com/Shopify/hydrogen/commit/84a66b1e9d07bd6d6a10e5379ad3350b6bbecde9), [`227035e7`](https://github.com/Shopify/hydrogen/commit/227035e7e11df5fec5ac475b98fa6a318bdbe366), [`ac12293c`](https://github.com/Shopify/hydrogen/commit/ac12293c7b36e1b278bc929c682c65779c300cc7), [`c7c9f2eb`](https://github.com/Shopify/hydrogen/commit/c7c9f2ebd869a9d361504a10566c268e88b6096a), [`76cd4f9b`](https://github.com/Shopify/hydrogen/commit/76cd4f9ba3dd8eff4433d72f4422c06a7d567537), [`8337e534`](https://github.com/Shopify/hydrogen/commit/8337e5342ecca563fab557c3e833485466456cd5)]:
  - @shopify/hydrogen@2024.10.0
  - @shopify/remix-oxygen@2.0.9

## 2024.7.10

### Patch Changes

- Use HTML datalist element for query suggestions for autocomplete experience ([#2506](https://github.com/Shopify/hydrogen/pull/2506)) by [@frontsideair](https://github.com/frontsideair)

- Bump cli packages version ([#2592](https://github.com/Shopify/hydrogen/pull/2592)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Updated dependencies [[`e963389d`](https://github.com/Shopify/hydrogen/commit/e963389d011b1cb44e2874fa332dc355c0d38eb9), [`d08d8c37`](https://github.com/Shopify/hydrogen/commit/d08d8c3779564cc55749f24bed1f6a2958a0a865)]:
  - @shopify/hydrogen@2024.7.9

## 2024.7.9

### Patch Changes

- Updated dependencies [[`f3363030`](https://github.com/Shopify/hydrogen/commit/f3363030a50bd24d946427e01b88ba77253a6cc9), [`bb5b0979`](https://github.com/Shopify/hydrogen/commit/bb5b0979ddffb007111885b3a9b7aa490a3c6882)]:
  - @shopify/hydrogen@2024.7.8
  - @shopify/remix-oxygen@2.0.8

## 2024.7.8

### Patch Changes

- Updated dependencies [[`39f8f8fd`](https://github.com/Shopify/hydrogen/commit/39f8f8fd42766d02c6e98f8090608e641db9f002)]:
  - @shopify/hydrogen@2024.7.7

## 2024.7.7

### Patch Changes

- Updated dependencies [[`d0ff37a9`](https://github.com/Shopify/hydrogen/commit/d0ff37a995bb64598930f8aa53f2612f3b1ea476)]:
  - @shopify/hydrogen@2024.7.6

## 2024.7.6

### Patch Changes

- Update Shopify CLI and cli-kit dependencies to 3.66.1 ([#2512](https://github.com/Shopify/hydrogen/pull/2512)) by [@frandiox](https://github.com/frandiox)

- createCartHandler supplies updateGiftCardCodes method ([#2298](https://github.com/Shopify/hydrogen/pull/2298)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Fix menu links in side panel not working on mobile devices ([#2450](https://github.com/Shopify/hydrogen/pull/2450)) by [@wizardlyhel](https://github.com/wizardlyhel)

  ```diff
  // /app/components/Header.tsx

  export function HeaderMenu({
    menu,
    primaryDomainUrl,
    viewport,
    publicStoreDomain,
  }: {
    menu: HeaderProps['header']['menu'];
    primaryDomainUrl: HeaderProps['header']['shop']['primaryDomain']['url'];
    viewport: Viewport;
    publicStoreDomain: HeaderProps['publicStoreDomain'];
  }) {
    const className = `header-menu-${viewport}`;
  +  const {close} = useAside();

  -  function closeAside(event: React.MouseEvent<HTMLAnchorElement>) {
  -    if (viewport === 'mobile') {
  -      event.preventDefault();
  -      window.location.href = event.currentTarget.href;
  -    }
  -  }

    return (
      <nav className={className} role="navigation">
        {viewport === 'mobile' && (
          <NavLink
            end
  -          onClick={closeAside}
  +          onClick={close}
            prefetch="intent"
            style={activeLinkStyle}
            to="/"
          >
            Home
          </NavLink>
        )}
        {(menu || FALLBACK_HEADER_MENU).items.map((item) => {
          if (!item.url) return null;

          // if the url is internal, we strip the domain
          const url =
            item.url.includes('myshopify.com') ||
            item.url.includes(publicStoreDomain) ||
            item.url.includes(primaryDomainUrl)
              ? new URL(item.url).pathname
              : item.url;
          return (
            <NavLink
              className="header-menu-item"
              end
              key={item.id}
  -            onClick={closeAside}
  +            onClick={close}
              prefetch="intent"
              style={activeLinkStyle}
              to={url}
            >
              {item.title}
            </NavLink>
          );
        })}
      </nav>
    );
  }
  ```

- Add localization support to consent privacy banner ([#2457](https://github.com/Shopify/hydrogen/pull/2457)) by [@juanpprieto](https://github.com/juanpprieto)

- Updated dependencies [[`d633e49a`](https://github.com/Shopify/hydrogen/commit/d633e49aff244a985c58ec77fc2796c9c1cd5df4), [`1b217cd6`](https://github.com/Shopify/hydrogen/commit/1b217cd68ffd5362d201d4bd225ec72e99713461), [`d929b561`](https://github.com/Shopify/hydrogen/commit/d929b5612ec28e53ec216844add33682f131aba7), [`664a09d5`](https://github.com/Shopify/hydrogen/commit/664a09d57ef5d3c67da947a4e8546527c01e37c4), [`0c1e511d`](https://github.com/Shopify/hydrogen/commit/0c1e511df72e9605534bb9c960e86d5c9a4bf2ea), [`eefa8203`](https://github.com/Shopify/hydrogen/commit/eefa820383fa93657ca214991f6099ce9268a4ee)]:
  - @shopify/hydrogen@2024.7.5
  - @shopify/remix-oxygen@2.0.7

## 2024.7.5

### Patch Changes

- Updated dependencies [[`b0d3bc06`](https://github.com/Shopify/hydrogen/commit/b0d3bc0696d266fcfc4eb93d0a4adb9ccb56ade6)]:
  - @shopify/hydrogen@2024.7.4

## 2024.7.4

### Patch Changes

- Search & Predictive Search improvements ([#2363](https://github.com/Shopify/hydrogen/pull/2363)) by [@juanpprieto](https://github.com/juanpprieto)

- 1. Create a app/lib/context file and use `createHydrogenContext` in it. ([#2333](https://github.com/Shopify/hydrogen/pull/2333)) by [@michenly](https://github.com/michenly)

  ```.ts
  // in app/lib/context

  import {createHydrogenContext} from '@shopify/hydrogen';

  export async function createAppLoadContext(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ) {
      const hydrogenContext = createHydrogenContext({
        env,
        request,
        cache,
        waitUntil,
        session,
        i18n: {language: 'EN', country: 'US'},
        cart: {
          queryFragment: CART_QUERY_FRAGMENT,
        },
        // ensure to overwrite any options that is not using the default values from your server.ts
      });

    return {
      ...hydrogenContext,
      // declare additional Remix loader context
    };
  }

  ```

  2. Use `createAppLoadContext` method in server.ts Ensure to overwrite any options that is not using the default values in `createHydrogenContext`.

  ```diff
  // in server.ts

  - import {
  -   createCartHandler,
  -   createStorefrontClient,
  -   createCustomerAccountClient,
  - } from '@shopify/hydrogen';
  + import {createAppLoadContext} from '~/lib/context';

  export default {
    async fetch(
      request: Request,
      env: Env,
      executionContext: ExecutionContext,
    ): Promise<Response> {

  -   const {storefront} = createStorefrontClient(
  -     ...
  -   );

  -   const customerAccount = createCustomerAccountClient(
  -     ...
  -   );

  -   const cart = createCartHandler(
  -     ...
  -   );

  +   const appLoadContext = await createAppLoadContext(
  +      request,
  +      env,
  +      executionContext,
  +   );

      /**
        * Create a Remix request handler and pass
        * Hydrogen's Storefront client to the loader context.
        */
      const handleRequest = createRequestHandler({
        build: remixBuild,
        mode: process.env.NODE_ENV,
  -      getLoadContext: (): AppLoadContext => ({
  -        session,
  -        storefront,
  -        customerAccount,
  -        cart,
  -        env,
  -        waitUntil,
  -      }),
  +      getLoadContext: () => appLoadContext,
      });
    }
  ```

  3. Use infer type for AppLoadContext in env.d.ts

  ```diff
  // in env.d.ts

  + import type {createAppLoadContext} from '~/lib/context';

  + interface AppLoadContext extends Awaited<ReturnType<typeof createAppLoadContext>> {
  - interface AppLoadContext {
  -  env: Env;
  -  cart: HydrogenCart;
  -  storefront: Storefront;
  -  customerAccount: CustomerAccount;
  -  session: AppSession;
  -  waitUntil: ExecutionContext['waitUntil'];
  }

  ```

- Use type `HydrogenEnv` for all the env.d.ts ([#2333](https://github.com/Shopify/hydrogen/pull/2333)) by [@michenly](https://github.com/michenly)

  ```diff
  // in env.d.ts

  + import type {HydrogenEnv} from '@shopify/hydrogen';

  + interface Env extends HydrogenEnv {}
  - interface Env {
  -   SESSION_SECRET: string;
  -  PUBLIC_STOREFRONT_API_TOKEN: string;
  -  PRIVATE_STOREFRONT_API_TOKEN: string;
  -  PUBLIC_STORE_DOMAIN: string;
  -  PUBLIC_STOREFRONT_ID: string;
  -  PUBLIC_CUSTOMER_ACCOUNT_API_CLIENT_ID: string;
  -  PUBLIC_CUSTOMER_ACCOUNT_API_URL: string;
  -  PUBLIC_CHECKOUT_DOMAIN: string;
  - }

  ```

- Add a hydration check for google web cache. This prevents an infinite redirect when viewing the cached version of a hydrogen site on Google. ([#2334](https://github.com/Shopify/hydrogen/pull/2334)) by [@blittle](https://github.com/blittle)

  Update your entry.server.jsx file to include this check:

  ```diff
  + if (!window.location.origin.includes("webcache.googleusercontent.com")) {
     startTransition(() => {
       hydrateRoot(
         document,
         <StrictMode>
           <RemixBrowser />
         </StrictMode>
       );
     });
  + }
  ```

- Updated dependencies [[`a2d9acf9`](https://github.com/Shopify/hydrogen/commit/a2d9acf95e019c39df0b10f4841a1d809b810c80), [`c0d7d917`](https://github.com/Shopify/hydrogen/commit/c0d7d9176c80b996064d8e897876f954807c7640), [`b09e9a4c`](https://github.com/Shopify/hydrogen/commit/b09e9a4ca7b931e48462c2d174ca9f67c37f1da2), [`c204eacf`](https://github.com/Shopify/hydrogen/commit/c204eacf0273f625109523ee81053cdc0c4de7e1), [`bf4e3d3c`](https://github.com/Shopify/hydrogen/commit/bf4e3d3c00744a066b50250a12e4f3c675691811), [`20a8e63b`](https://github.com/Shopify/hydrogen/commit/20a8e63b5fd1c8acadda7612c5d4cc411e0c5932), [`6e5d8ea7`](https://github.com/Shopify/hydrogen/commit/6e5d8ea71a2639925d5817b662af26a6b2ba3c6d), [`7c4f67a6`](https://github.com/Shopify/hydrogen/commit/7c4f67a684ad31edea10d1407d00201bbaaa9822), [`dfb9be77`](https://github.com/Shopify/hydrogen/commit/dfb9be7721c7d10cf4354fda60db4e666625518e), [`31ea19e8`](https://github.com/Shopify/hydrogen/commit/31ea19e8957dbc4487314b014a14920444d37f78)]:
  - @shopify/cli-hydrogen@8.4.0
  - @shopify/hydrogen@2024.7.3
  - @shopify/remix-oxygen@2.0.6

## 2024.7.3

### Patch Changes

- Updated dependencies [[`150854ed`](https://github.com/Shopify/hydrogen/commit/150854ed1352245eef180cc6b2bceb41dd8cc898)]:
  - @shopify/hydrogen@2024.7.2

## 2024.7.2

### Patch Changes

- Changed the GraphQL config file format to be TS/JS instead of YAML. ([#2311](https://github.com/Shopify/hydrogen/pull/2311)) by [@frandiox](https://github.com/frandiox)

- Updated dependencies [[`18ea233c`](https://github.com/Shopify/hydrogen/commit/18ea233cd327bf3001ec9b107ad66b05c9c78584), [`8b2322d7`](https://github.com/Shopify/hydrogen/commit/8b2322d783078298cd5d20ec5f3b1faf99b7895b)]:
  - @shopify/cli-hydrogen@8.3.0

## 2024.7.1

### Patch Changes

- Update `@shopify/oxygen-workers-types` to fix issues on Windows. ([#2252](https://github.com/Shopify/hydrogen/pull/2252)) by [@michenly](https://github.com/michenly)

- [**Breaking change**] ([#2113](https://github.com/Shopify/hydrogen/pull/2113)) by [@blittle](https://github.com/blittle)

  Previously the `VariantSelector` component would filter out options that only had one value. This is undesireable for some apps. We've removed that filter, if you'd like to retain the existing functionality, simply filter the options prop before it is passed to the `VariantSelector` component:

  ```diff
   <VariantSelector
     handle={product.handle}
  +  options={product.options.filter((option) => option.values.length > 1)}
  -  options={product.options}
     variants={variants}>
   </VariantSelector>
  ```

  Fixes [#1198](https://github.com/Shopify/hydrogen/discussions/1198)

- Update remix to v2.10.1 ([#2290](https://github.com/Shopify/hydrogen/pull/2290)) by [@michenly](https://github.com/michenly)

- Update root to use [Remix's Layout Export pattern](https://remix.run/docs/en/main/file-conventions/root#layout-export) and eliminate the use of `useLoaderData` in root. ([#2292](https://github.com/Shopify/hydrogen/pull/2292)) by [@michenly](https://github.com/michenly)

  The diff below showcase how you can make this refactor in existing application.

  ```diff
  import {
    Outlet,
  -  useLoaderData,
  +  useRouteLoaderData,
  } from '@remix-run/react';
  -import {Layout} from '~/components/Layout';
  +import {PageLayout} from '~/components/PageLayout';

  -export default function App() {
  +export function Layout({children}: {children?: React.ReactNode}) {
    const nonce = useNonce();
  -  const data = useLoaderData<typeof loader>();
  +  const data = useRouteLoaderData<typeof loader>('root');

    return (
      <html>
      ...
        <body>
  -        <Layout {...data}>
  -          <Outlet />
  -        </Layout>
  +        {data? (
  +          <PageLayout {...data}>{children}</PageLayout>
  +         ) : (
  +          children
  +        )}
        </body>
      </html>
    );
  }

  +export default function App() {
  +  return <Outlet />;
  +}

  export function ErrorBoundary() {
  - const rootData = useLoaderData<typeof loader>();

    return (
  -    <html>
  -    ...
  -      <body>
  -        <Layout {...rootData}>
  -          <div className="route-error">
  -            <h1>Error</h1>
  -            ...
  -          </div>
  -        </Layout>
  -      </body>
  -    </html>
  +    <div className="route-error">
  +      <h1>Error</h1>
  +      ...
  +    </div>
    );
  }

  ```

- Refactor the cart and product form components ([#2132](https://github.com/Shopify/hydrogen/pull/2132)) by [@blittle](https://github.com/blittle)

- Remove manual setting of session in headers and recommend setting it in server after response is created. ([#2137](https://github.com/Shopify/hydrogen/pull/2137)) by [@michenly](https://github.com/michenly)

  Step 1: Add `isPending` implementation in session

  ```diff
  // in app/lib/session.ts
  export class AppSession implements HydrogenSession {
  +  public isPending = false;

    get unset() {
  +    this.isPending = true;
      return this.#session.unset;
    }

    get set() {
  +    this.isPending = true;
      return this.#session.set;
    }

    commit() {
  +    this.isPending = false;
      return this.#sessionStorage.commitSession(this.#session);
    }
  }
  ```

  Step 2: update response header if `session.isPending` is true

  ```diff
  // in server.ts
  export default {
    async fetch(request: Request): Promise<Response> {
      try {
        const response = await handleRequest(request);

  +      if (session.isPending) {
  +        response.headers.set('Set-Cookie', await session.commit());
  +      }

        return response;
      } catch (error) {
        ...
      }
    },
  };
  ```

  Step 3: remove setting cookie with session.commit() in routes

  ```diff
  // in route files
  export async function loader({context}: LoaderFunctionArgs) {
    return json({},
  -    {
  -      headers: {
  -        'Set-Cookie': await context.session.commit(),
  -      },
      },
    );
  }
  ```

- Moved `@shopify/cli` from `dependencies` to `devDependencies`. ([#2312](https://github.com/Shopify/hydrogen/pull/2312)) by [@frandiox](https://github.com/frandiox)

- The `@shopify/cli` package now bundles the `@shopify/cli-hydrogen` plugin. Therefore, you can now remove the latter from your local dependencies: ([#2306](https://github.com/Shopify/hydrogen/pull/2306)) by [@frandiox](https://github.com/frandiox)

  ```diff
      "@shopify/cli": "3.64.0",
  -   "@shopify/cli-hydrogen": "^8.1.1",
      "@shopify/hydrogen": "2024.7.0",
  ```

- Updated dependencies [[`a0e84d76`](https://github.com/Shopify/hydrogen/commit/a0e84d76b67d4c57c4defee06185949c41782eab), [`426bb390`](https://github.com/Shopify/hydrogen/commit/426bb390b25f51e57499ff6673aef70ded935e87), [`4337200c`](https://github.com/Shopify/hydrogen/commit/4337200c7908d56c039171c283a4d92c31a8b7b6), [`710625c7`](https://github.com/Shopify/hydrogen/commit/710625c740a6656488d4b419e2d2451bef9d076f), [`8b9c726d`](https://github.com/Shopify/hydrogen/commit/8b9c726d34f3482b5b5a0da4c7c0c2f20e2c9caa), [`10a419bf`](https://github.com/Shopify/hydrogen/commit/10a419bf1db79cdfd8c41c0223ce695959f60da9), [`6a6278bb`](https://github.com/Shopify/hydrogen/commit/6a6278bb9187b3b5a98cd98ec9dd278882d03c0d), [`66236ca6`](https://github.com/Shopify/hydrogen/commit/66236ca65ddefac99eaa553c7877c85863d84cc2), [`dcbd0bbf`](https://github.com/Shopify/hydrogen/commit/dcbd0bbf4073a3e35e96f3cce257f7b19b2b2aea), [`a5e03e2a`](https://github.com/Shopify/hydrogen/commit/a5e03e2a1e99fcd83ee5a2be7bf6f5f6b47984b3), [`c2690653`](https://github.com/Shopify/hydrogen/commit/c2690653b6b24f7318e9088551a37195255a2247), [`54c2f7ad`](https://github.com/Shopify/hydrogen/commit/54c2f7ad3d0d52e6be10b2a54a1a4fd0cc107a35), [`4337200c`](https://github.com/Shopify/hydrogen/commit/4337200c7908d56c039171c283a4d92c31a8b7b6), [`e96b332b`](https://github.com/Shopify/hydrogen/commit/e96b332ba1aba79aa3d5c2ce18001292070faf49), [`f3065371`](https://github.com/Shopify/hydrogen/commit/f3065371c1dda222c6e40bd8c20528dc9fdea9a5), [`6cd5554b`](https://github.com/Shopify/hydrogen/commit/6cd5554b160d314d35964a5ee8976ed60972bf17), [`9eb60d73`](https://github.com/Shopify/hydrogen/commit/9eb60d73e552c3d22b9325ecbcd5878810893ad3), [`e432533e`](https://github.com/Shopify/hydrogen/commit/e432533e7391ec3fe16a4a24f2b3363206842580), [`de3f70be`](https://github.com/Shopify/hydrogen/commit/de3f70be1a838eda746903cbb38cc25cf0e09fa3), [`83cb96f4`](https://github.com/Shopify/hydrogen/commit/83cb96f42078bf79b20a153d8a8461f75d573ab1)]:
  - @shopify/remix-oxygen@2.0.5
  - @shopify/cli-hydrogen@8.2.0
  - @shopify/hydrogen@2024.7.1

## 2024.4.5

### Patch Changes

- Update remix to v2.9.2 ([#2135](https://github.com/Shopify/hydrogen/pull/2135)) by [@michenly](https://github.com/michenly)

- `<Analytics>` and `useAnalytics` are now stable. ([#2141](https://github.com/Shopify/hydrogen/pull/2141)) by [@wizardlyhel](https://github.com/wizardlyhel)

- Update the skeleton template to use React state in the aside dialogs ([#2088](https://github.com/Shopify/hydrogen/pull/2088)) by [@blittle](https://github.com/blittle)

- Updated dependencies [[`fe82119f`](https://github.com/Shopify/hydrogen/commit/fe82119f5e75df5a0f727bab6a2186e679abc73d), [`32d4c33e`](https://github.com/Shopify/hydrogen/commit/32d4c33e4421a9c56f62a8c392f5417edddd0402), [`8eea75ec`](https://github.com/Shopify/hydrogen/commit/8eea75ec5ead4de98d7d1b2baedce8511029bcae), [`27e51abf`](https://github.com/Shopify/hydrogen/commit/27e51abfc1f5444afa952c503886bfa12fc55c7e), [`f29c9085`](https://github.com/Shopify/hydrogen/commit/f29c9085eb1adbde9e01226484eba8a85b5074ed), [`7b838beb`](https://github.com/Shopify/hydrogen/commit/7b838beb7c43380ffc9c32c2bb9f34291912fa42), [`d702aec2`](https://github.com/Shopify/hydrogen/commit/d702aec2214646a78cdafc2c25d510489db73f6d), [`ca4cf045`](https://github.com/Shopify/hydrogen/commit/ca4cf045f7fb72ad98b62af7bd172ff8cf553de2), [`5a554b2e`](https://github.com/Shopify/hydrogen/commit/5a554b2e9d91894c2db8032f0c29666dce1ea3f2), [`27e51abf`](https://github.com/Shopify/hydrogen/commit/27e51abfc1f5444afa952c503886bfa12fc55c7e), [`5d6465b3`](https://github.com/Shopify/hydrogen/commit/5d6465b32d90052e5580fcb81d98427bcb8ad528), [`608389d6`](https://github.com/Shopify/hydrogen/commit/608389d6d69c6a9801935d528507c165d1dd4ccf), [`9dfd1cfe`](https://github.com/Shopify/hydrogen/commit/9dfd1cfeb3e96c6d3426427a4b5d97ef475dab6d), [`7def3e9f`](https://github.com/Shopify/hydrogen/commit/7def3e9fa6e28f4fde7af43e2f346aa32267c38e), [`65239c76`](https://github.com/Shopify/hydrogen/commit/65239c76ca1d0b294b59b1ad53624485859c4da5), [`ca7f2888`](https://github.com/Shopify/hydrogen/commit/ca7f28887367a4882e57a67c4e248b0f0bba1c9b)]:
  - @shopify/hydrogen@2024.4.3
  - @shopify/cli-hydrogen@8.1.0

## 2024.4.4

### Patch Changes

- Add JSdoc to `getSelectedProductOptions` utility and cleanup the skeleton implementation ([#2089](https://github.com/Shopify/hydrogen/pull/2089)) by [@juanpprieto](https://github.com/juanpprieto)

- Updated dependencies [[`286589ee`](https://github.com/Shopify/hydrogen/commit/286589ee281c161ad323e3d45a8b9b859aa5b11f), [`6f5061d9`](https://github.com/Shopify/hydrogen/commit/6f5061d9432f749fde7902548894e98c0d3f899c), [`ae262b61`](https://github.com/Shopify/hydrogen/commit/ae262b616127a7173d23a1a38a6e658af3105ce8), [`2c11ca3b`](https://github.com/Shopify/hydrogen/commit/2c11ca3b7a00ccca2b621dbc29abd319f9598cc8), [`b70f9c2c`](https://github.com/Shopify/hydrogen/commit/b70f9c2c3db8e863c65509097454b9ad7c81cd52), [`17528db1`](https://github.com/Shopify/hydrogen/commit/17528db1eb3d1baa001bafe0684b4bce28d2e271), [`58ea9bb0`](https://github.com/Shopify/hydrogen/commit/58ea9bb0f0eee83ff89e34e2f1f6ac3c4999e213)]:
  - @shopify/cli-hydrogen@8.0.4
  - @shopify/hydrogen@2024.4.2

## 1.0.10

### Patch Changes

- Update `@shopify/cli` dependency to avoid React version mismatches in your project: ([#2059](https://github.com/Shopify/hydrogen/pull/2059)) by [@frandiox](https://github.com/frandiox)

  ```diff
    "dependencies": {
      ...
  -   "@shopify/cli": "3.58.0",
  +   "@shopify/cli": "3.59.2",
      ...
    }
  ```

- Updated dependencies [[`d2bc720b`](https://github.com/Shopify/hydrogen/commit/d2bc720bb5f7cfb5f42617f98ad2dfcd29891f4b)]:
  - @shopify/cli-hydrogen@8.0.3

## 1.0.9

### Patch Changes

- Pin React dependency to 18.2.0 to avoid mismatches. ([#2051](https://github.com/Shopify/hydrogen/pull/2051)) by [@frandiox](https://github.com/frandiox)

- Updated dependencies [[`9c36c8a5`](https://github.com/Shopify/hydrogen/commit/9c36c8a566b1ae2ceac4846c4c9fe4f63f6f4ab3)]:
  - @shopify/cli-hydrogen@8.0.2

## 1.0.8

### Patch Changes

- Stop inlining the favicon in base64 to avoid issues with the Content-Security-Policy. In `vite.config.js`: ([#2006](https://github.com/Shopify/hydrogen/pull/2006)) by [@frandiox](https://github.com/frandiox)

  ```diff
  export default defineConfig({
    plugins: [
      ...
    ],
  + build: {
  +   assetsInlineLimit: 0,
  + },
  });
  ```

- To improve HMR in Vite, move the `useRootLoaderData` function from `app/root.tsx` to a separate file like `app/lib/root-data.ts`. This change avoids circular imports: ([#2014](https://github.com/Shopify/hydrogen/pull/2014)) by [@frandiox](https://github.com/frandiox)

  ```tsx
  // app/lib/root-data.ts
  import { useMatches } from "@remix-run/react";
  import type { SerializeFrom } from "@shopify/remix-oxygen";
  import type { loader } from "~/root";

  /**
   * Access the result of the root loader from a React component.
   */
  export const useRootLoaderData = () => {
    const [root] = useMatches();
    return root?.data as SerializeFrom<typeof loader>;
  };
  ```

  Import this hook from `~/lib/root-data` instead of `~/root` in your components.

- Updated dependencies [[`b4dfda32`](https://github.com/Shopify/hydrogen/commit/b4dfda320ca52855b2d4493a4306d15a883ca843), [`ffa57bdb`](https://github.com/Shopify/hydrogen/commit/ffa57bdbcdf51e03d565736f9388b5bb4f46292c), [`ac4e1670`](https://github.com/Shopify/hydrogen/commit/ac4e1670f0361a2cd2c6827e4162bbbee0ca37f3), [`0af624d5`](https://github.com/Shopify/hydrogen/commit/0af624d51afc7250db889ba5e736c85a6070c8b2), [`9723eaf3`](https://github.com/Shopify/hydrogen/commit/9723eaf3e5a42c30e657d1cadb123ed775d620e4), [`e842f68c`](https://github.com/Shopify/hydrogen/commit/e842f68c8e879d4c54e0730f3cb55214a760d7f5)]:
  - @shopify/cli-hydrogen@8.0.1
  - @shopify/hydrogen@2024.4.1

## 1.0.7

### Patch Changes

- Update internal libraries for parsing `.env` files. ([#1946](https://github.com/Shopify/hydrogen/pull/1946)) by [@aswamy](https://github.com/aswamy)

  Please update the `@shopify/cli` dependency in your app to avoid duplicated subdependencies:

  ```diff
  "dependencies": {
  -   "@shopify/cli": "3.56.3",
  +   "@shopify/cli": "3.58.0",
  }
  ```

- Add Adds magic Catalog route ([#1967](https://github.com/Shopify/hydrogen/pull/1967)) by [@juanpprieto](https://github.com/juanpprieto)

- Update Vite plugin imports, and how their options are passed to Remix: ([#1935](https://github.com/Shopify/hydrogen/pull/1935)) by [@frandiox](https://github.com/frandiox)

  ```diff
  -import {hydrogen, oxygen} from '@shopify/cli-hydrogen/experimental-vite';
  +import {hydrogen} from '@shopify/hydrogen/vite';
  +import {oxygen} from '@shopify/mini-oxygen/vite';
  import {vitePlugin as remix} from '@remix-run/dev';

  export default defineConfig({
      hydrogen(),
      oxygen(),
      remix({
  -     buildDirectory: 'dist',
  +     presets: [hydrogen.preset()],
        future: {
  ```

- Add `@shopify/mini-oxygen` as a dev dependency for local development: ([#1891](https://github.com/Shopify/hydrogen/pull/1891)) by [@frandiox](https://github.com/frandiox)

  ```diff
    "devDependencies": {
      "@remix-run/dev": "^2.8.0",
      "@remix-run/eslint-config": "^2.8.0",
  +   "@shopify/mini-oxygen": "^3.0.0",
      "@shopify/oxygen-workers-types": "^4.0.0",
      ...
    },
  ```

- Add the `customer-account push` command to the Hydrogen CLI. This allows you to push the current `--dev-origin` URL to the Shopify admin to enable secure connection to the Customer Account API for local development. ([#1804](https://github.com/Shopify/hydrogen/pull/1804)) by [@michenly](https://github.com/michenly)

- Fix types returned by the `session` object. ([#1869](https://github.com/Shopify/hydrogen/pull/1869)) by [@frandiox](https://github.com/frandiox)

  In `remix.env.d.ts` or `env.d.ts`, add the following types:

  ```diff
  import type {
    // ...
    HydrogenCart,
  + HydrogenSessionData,
  } from '@shopify/hydrogen';

  // ...

  declare module '@shopify/remix-oxygen' {
    // ...

  + interface SessionData extends HydrogenSessionData {}
  }
  ```

- Codegen dependencies must be now listed explicitly in `package.json`: ([#1962](https://github.com/Shopify/hydrogen/pull/1962)) by [@frandiox](https://github.com/frandiox)

  ```diff
  {
    "devDependencies": {
  +   "@graphql-codegen/cli": "5.0.2",
      "@remix-run/dev": "^2.8.0",
      "@remix-run/eslint-config": "^2.8.0",
  +   "@shopify/hydrogen-codegen": "^0.3.0",
      "@shopify/mini-oxygen": "^2.2.5",
      "@shopify/oxygen-workers-types": "^4.0.0",
      ...
    }
  }
  ```

- Updated dependencies [[`4eaec272`](https://github.com/Shopify/hydrogen/commit/4eaec272696f1a718aa7cab1070a54385ebc3686), [`14bb5df1`](https://github.com/Shopify/hydrogen/commit/14bb5df1c1513a7991183d34e72220cb2b139cf5), [`646b78d4`](https://github.com/Shopify/hydrogen/commit/646b78d4bc26310121b16000ed4d1c5d5e63957d), [`87072950`](https://github.com/Shopify/hydrogen/commit/870729505f7eb1f1c709799dd036ad02fd94be95), [`5f1295fe`](https://github.com/Shopify/hydrogen/commit/5f1295fe60b86396f364fefef339248a444c988a), [`3c8a7313`](https://github.com/Shopify/hydrogen/commit/3c8a7313cafb0ca21bbca19ac0b3f8ef4ab12655), [`ca1dcbb7`](https://github.com/Shopify/hydrogen/commit/ca1dcbb7d69c458006e25892c86c4478d394a428), [`11879b17`](https://github.com/Shopify/hydrogen/commit/11879b175d78e3326de090a56a044d1e55d0bae8), [`f4d6e5b0`](https://github.com/Shopify/hydrogen/commit/f4d6e5b0244392a7c13b9fa51c5046fd103c3e4f), [`788d86b3`](https://github.com/Shopify/hydrogen/commit/788d86b3a737bff53b4ec3aa9667458b2d45ade7), [`ebaf5529`](https://github.com/Shopify/hydrogen/commit/ebaf5529287b24a70b3146444b18f95b64f9f336), [`da95bb1c`](https://github.com/Shopify/hydrogen/commit/da95bb1c8c644f450053ce649b40dc380e7375dc), [`5bb43304`](https://github.com/Shopify/hydrogen/commit/5bb43304c08427786cfd4f2529e59bd38f593252), [`140e4768`](https://github.com/Shopify/hydrogen/commit/140e4768c880aaed4ba95b1d4c707df6963e011c), [`062d6be7`](https://github.com/Shopify/hydrogen/commit/062d6be7e031c388498ec3d359de51a4bfdfdfd8), [`b3323e59`](https://github.com/Shopify/hydrogen/commit/b3323e59a4381647f1df797c5dc54793f6e0a29a), [`ab0df5a5`](https://github.com/Shopify/hydrogen/commit/ab0df5a52bc587515880ae26f4edd18ba2be83cd), [`ebaf5529`](https://github.com/Shopify/hydrogen/commit/ebaf5529287b24a70b3146444b18f95b64f9f336), [`ebaf5529`](https://github.com/Shopify/hydrogen/commit/ebaf5529287b24a70b3146444b18f95b64f9f336), [`9e899218`](https://github.com/Shopify/hydrogen/commit/9e8992181ce7d27548d35f98b5a4f78b80795ce8), [`a209019f`](https://github.com/Shopify/hydrogen/commit/a209019f722ece4b65f8d5f37c8018c949956b1e), [`d007b7bc`](https://github.com/Shopify/hydrogen/commit/d007b7bc6f6c36e984d937108230ecc7c202fa42), [`a5511cd7`](https://github.com/Shopify/hydrogen/commit/a5511cd7bf9b0f0c4ef0e52cd72418f78c04785b), [`4afedb4d`](https://github.com/Shopify/hydrogen/commit/4afedb4d7202715df9a153e877e8eb281cc3e928), [`34fbae23`](https://github.com/Shopify/hydrogen/commit/34fbae23999eefbd1af1dff44816a52813d75b44), [`e3baaba5`](https://github.com/Shopify/hydrogen/commit/e3baaba54c701a48923ab3fe8078278f2db2c53f), [`99d72f7a`](https://github.com/Shopify/hydrogen/commit/99d72f7afc354abb66ed0e4ffb020bede2781286), [`9351f9f5`](https://github.com/Shopify/hydrogen/commit/9351f9f564267124bcbf986f5550a542c4bf1e30)]:
  - @shopify/cli-hydrogen@8.0.0
  - @shopify/hydrogen@2024.4.0
  - @shopify/remix-oxygen@2.0.4

## 1.0.6

### Patch Changes

- Improve performance of predictive search: ([#1823](https://github.com/Shopify/hydrogen/pull/1823)) by [@frandiox](https://github.com/frandiox)

  - Change the request to be GET instead of POST to avoid Remix route revalidations.
  - Add Cache-Control headers to the response to get quicker results when typing.

  Aside from that, it now shows a loading state when fetching the results instead of "No results found.".

- Updated dependencies [[`351b3c1b`](https://github.com/Shopify/hydrogen/commit/351b3c1b7768870793ff072ba91426107ba0180c), [`5060cf57`](https://github.com/Shopify/hydrogen/commit/5060cf57f69d8391b425b54acaa487af1f7405ae), [`2888014e`](https://github.com/Shopify/hydrogen/commit/2888014e54fab72c150e9eca55df3c6dd789503e)]:
  - @shopify/hydrogen@2024.1.4
  - @shopify/cli-hydrogen@7.1.2

## 1.0.5

### Patch Changes

- Update the `@shopify/cli` dependency: ([#1786](https://github.com/Shopify/hydrogen/pull/1786)) by [@frandiox](https://github.com/frandiox)

  ```diff
  - "@shopify/cli": "3.52.0",
  + "@shopify/cli": "3.56.3",
  ```

- Update Remix and associated packages to 2.8.0. ([#1781](https://github.com/Shopify/hydrogen/pull/1781)) by [@frandiox](https://github.com/frandiox)

  ```diff
  "dependencies": {
  -  "@remix-run/react": "^2.6.0",
  -  "@remix-run/server-runtime": "^2.6.0",
  +  "@remix-run/react": "^2.8.0",
  +  "@remix-run/server-runtime": "^2.8.0",
      //...
    },
    "devDependencies": {
  -   "@remix-run/dev": "^2.6.0",
  -   "@remix-run/eslint-config": "^2.6.0",
  +  "@remix-run/dev": "^2.8.0",
  +  "@remix-run/eslint-config": "^2.8.0",
      //...
    },
  ```

- Updated dependencies [[`ced1d4cb`](https://github.com/Shopify/hydrogen/commit/ced1d4cb5b1eeeb4303449eb1d60aac44f33480e), [`fc013401`](https://github.com/Shopify/hydrogen/commit/fc013401c5727948b602c9c6b6963a2df21cbd38), [`e641255e`](https://github.com/Shopify/hydrogen/commit/e641255eccc5783b41c8fabbc88313a610f539d0), [`d7e04cb6`](https://github.com/Shopify/hydrogen/commit/d7e04cb6a33d40ea86fa8ac2712d7a5ea785de2d), [`eedd9c49`](https://github.com/Shopify/hydrogen/commit/eedd9c497b36aba47a641cecbc710e18f5b14e46)]:
  - @shopify/cli-hydrogen@7.1.1
  - @shopify/hydrogen@2024.1.3

## 1.0.4

### Patch Changes

- This is an important fix to a bug with 404 routes and path-based i18n projects where some unknown routes would not properly render a 404. This fixes all new projects, but to fix existing projects, add a `($locale).tsx` route with the following contents: ([#1732](https://github.com/Shopify/hydrogen/pull/1732)) by [@blittle](https://github.com/blittle)

  ```ts
  import { type LoaderFunctionArgs } from "@remix-run/server-runtime";

  export async function loader({ params, context }: LoaderFunctionArgs) {
    const { language, country } = context.storefront.i18n;

    if (
      params.locale &&
      params.locale.toLowerCase() !== `${language}-${country}`.toLowerCase()
    ) {
      // If the locale URL param is defined, yet we still are still at the default locale
      // then the the locale param must be invalid, send to the 404 page
      throw new Response(null, { status: 404 });
    }

    return null;
  }
  ```

- Add defensive null checks to the default cart implementation in the starter template ([#1746](https://github.com/Shopify/hydrogen/pull/1746)) by [@blittle](https://github.com/blittle)

- 🐛 Fix issue where customer login does not persist to checkout ([#1719](https://github.com/Shopify/hydrogen/pull/1719)) by [@michenly](https://github.com/michenly)

  ✨ Add `customerAccount` option to `createCartHandler`. Where a `?logged_in=true` will be added to the checkoutUrl for cart query if a customer is logged in.

- Updated dependencies [[`faeba9f8`](https://github.com/Shopify/hydrogen/commit/faeba9f8947d6b9420b33274a0f39b62418ff2e5), [`6d585026`](https://github.com/Shopify/hydrogen/commit/6d585026623204e99d54a5f2efa3d1c74f690bb6), [`fcecfb23`](https://github.com/Shopify/hydrogen/commit/fcecfb2307210b9d73a7cc90ba865508937217ba), [`28864d6f`](https://github.com/Shopify/hydrogen/commit/28864d6ffbb19b62a5fb8f4c9bbe27568de62411), [`c0ec7714`](https://github.com/Shopify/hydrogen/commit/c0ec77141fb1d7a713d91219b8777bc541780ae8), [`226cf478`](https://github.com/Shopify/hydrogen/commit/226cf478a5bdef1cca33fe8f69832ae0e557d9d9), [`06d9fd91`](https://github.com/Shopify/hydrogen/commit/06d9fd91140bd52a8ee41a20bc114ce2e7fb67dc)]:
  - @shopify/cli-hydrogen@7.1.0
  - @shopify/hydrogen@2024.1.2

## 1.0.3

### Patch Changes

- ♻️ `CustomerClient` type is deprecated and replaced by `CustomerAccount` ([#1692](https://github.com/Shopify/hydrogen/pull/1692)) by [@michenly](https://github.com/michenly)

- Updated dependencies [[`02798786`](https://github.com/Shopify/hydrogen/commit/02798786bf8ae5c53f6430723a86d62b8e94d120), [`52b15df4`](https://github.com/Shopify/hydrogen/commit/52b15df457ce723bbc83ad594ded73a7b06447d6), [`a2664362`](https://github.com/Shopify/hydrogen/commit/a2664362a7d89b34835553a9b0eb7af55ca70ae4), [`eee5d927`](https://github.com/Shopify/hydrogen/commit/eee5d9274b72404dfb0ffef30d5503fd553be5fe), [`c7b2017f`](https://github.com/Shopify/hydrogen/commit/c7b2017f11a2cb4d280dfd8f170e65a908b9ea02), [`06320ee4`](https://github.com/Shopify/hydrogen/commit/06320ee48b94dbfece945461031a252f454fd0a3)]:
  - @shopify/hydrogen@2024.1.1
  - @shopify/cli-hydrogen@7.0.1

## 1.0.2

### Patch Changes

- Use new parameters introduced in Storefront API v2024-01 to fix redirection to the product's default variant when there are unknown query params in the URL. ([#1642](https://github.com/Shopify/hydrogen/pull/1642)) by [@wizardlyhel](https://github.com/wizardlyhel)

  ```diff
  -   selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {
  +   selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {
        ...ProductVariant
      }
  ```

- Update the GraphQL config in `.graphqlrc.yml` to use the more modern `projects` structure: ([#1577](https://github.com/Shopify/hydrogen/pull/1577)) by [@frandiox](https://github.com/frandiox)

  ```diff
  -schema: node_modules/@shopify/hydrogen/storefront.schema.json
  +projects:
  + default:
  +    schema: 'node_modules/@shopify/hydrogen/storefront.schema.json'
  ```

  This allows you to add additional projects to the GraphQL config, such as third party CMS schemas.

  Also, you can modify the document paths used for the Storefront API queries. This is useful if you have a large codebase and want to exclude certain files from being used for codegen or other GraphQL utilities:

  ```yaml
  projects:
    default:
      schema: "node_modules/@shopify/hydrogen/storefront.schema.json"
      documents:
        - "!*.d.ts"
        - "*.{ts,tsx,js,jsx}"
        - "app/**/*.{ts,tsx,js,jsx}"
  ```

- Improve resiliency of `HydrogenSession` ([#1583](https://github.com/Shopify/hydrogen/pull/1583)) by [@blittle](https://github.com/blittle)

- Update `@shopify/cli` dependency in `package.json`: ([#1579](https://github.com/Shopify/hydrogen/pull/1579)) by [@frandiox](https://github.com/frandiox)

  ```diff
  -   "@shopify/cli": "3.51.0",
  +   "@shopify/cli": "3.52.0",
  ```

- - Update example and template Remix versions to `^2.5.1` ([#1639](https://github.com/Shopify/hydrogen/pull/1639)) by [@wizardlyhel](https://github.com/wizardlyhel)

  - Enable Remix future flags:
    - [`v3_fetcherPersist`](https://remix.run/docs/en/main/hooks/use-fetchers#additional-resources)
    - [`v3_relativeSplatpath`](https://remix.run/docs/en/main/hooks/use-resolved-path#splat-paths)

- Updated dependencies [[`810f48cf`](https://github.com/Shopify/hydrogen/commit/810f48cf5d55f0cfcac6e01fe481db8c76e77cd2), [`8c477cb5`](https://github.com/Shopify/hydrogen/commit/8c477cb565c3e018bf4e13bad01804c21611fb8a), [`42ac4138`](https://github.com/Shopify/hydrogen/commit/42ac4138553c7e1a438b075c4f9cb781edffebc4), [`0241b7d2`](https://github.com/Shopify/hydrogen/commit/0241b7d2dcb887d259ce9033aca356d391bc07df), [`6a897586`](https://github.com/Shopify/hydrogen/commit/6a897586bd0908db90736921d11e4b6bdf29c912), [`0ff63bed`](https://github.com/Shopify/hydrogen/commit/0ff63bed840f5b8a5eb9968b67bd9a5a57099253), [`6bc1d61c`](https://github.com/Shopify/hydrogen/commit/6bc1d61c17a9c9be13f52338d2ab940e64e73495), [`eb0f4bcc`](https://github.com/Shopify/hydrogen/commit/eb0f4bccb57966a00ecb2b88d17dd694599da340), [`400bfee6`](https://github.com/Shopify/hydrogen/commit/400bfee6836a51c6ab5e4804e8b1e9ad48856dcb), [`a69c21ca`](https://github.com/Shopify/hydrogen/commit/a69c21caa15dfedb88afd50f262f17bf86f74836), [`970073e7`](https://github.com/Shopify/hydrogen/commit/970073e78258880505e0de563136b5379d5d24af), [`772118ca`](https://github.com/Shopify/hydrogen/commit/772118ca6aefbd47841fffc6ce42856c2dc779bd), [`335375a6`](https://github.com/Shopify/hydrogen/commit/335375a6b1a512f70e169a82bc87a8392dc8c92c), [`335371ce`](https://github.com/Shopify/hydrogen/commit/335371ceb6e1bd5aebb6104f131d3f22798a245f), [`94509b75`](https://github.com/Shopify/hydrogen/commit/94509b750afefd686971198ed86277e2c70f3176), [`36d6fa2c`](https://github.com/Shopify/hydrogen/commit/36d6fa2c4fa54ff79f06ef17aa41f60478977bc0), [`3e7b6e8a`](https://github.com/Shopify/hydrogen/commit/3e7b6e8a3bf66bad7fc0f9c224f1c163dbe3e288), [`cce65795`](https://github.com/Shopify/hydrogen/commit/cce6579580f849bec9a28cf575f7130ba3627f6b), [`9e3d88d4`](https://github.com/Shopify/hydrogen/commit/9e3d88d498efaa20fe23de9837e0f444180bc787), [`ca1161b2`](https://github.com/Shopify/hydrogen/commit/ca1161b29ad7b4d0838953782fb114d5fe82193a), [`92840e51`](https://github.com/Shopify/hydrogen/commit/92840e51820e5c7822f731affd3f591c0099be10), [`952fedf2`](https://github.com/Shopify/hydrogen/commit/952fedf27b869164550954d1c15f53b32ec02675), [`1bc053c9`](https://github.com/Shopify/hydrogen/commit/1bc053c94ba1be14ddc28be9eb70be7219b295d1)]:
  - @shopify/hydrogen@2024.1.0
  - @shopify/cli-hydrogen@7.0.0
  - @shopify/remix-oxygen@2.0.3

## 1.0.1

### Patch Changes

- Sync up environment variable names across all example & type files. ([#1542](https://github.com/Shopify/hydrogen/pull/1542)) by [@michenly](https://github.com/michenly)

- Remove error boundary from robots.txt file in the Skeleton template ([#1492](https://github.com/Shopify/hydrogen/pull/1492)) by [@andrewcohen](https://github.com/andrewcohen)

- Use the worker runtime by default when running the `dev` or `preview` commands. ([#1525](https://github.com/Shopify/hydrogen/pull/1525)) by [@frandiox](https://github.com/frandiox)

  Enable it in your project by adding the `--worker` flag to your package.json scripts:

  ```diff
  "scripts": {
    "build": "shopify hydrogen build",
  - "dev": "shopify hydrogen dev --codegen",
  + "dev": "shopify hydrogen dev --worker --codegen",
  - "preview": "npm run build && shopify hydrogen preview",
  + "preview": "npm run build && shopify hydrogen preview --worker",
    ...
  }
  ```

- Update to the latest version of `@shopify/oxygen-workers-types`. ([#1494](https://github.com/Shopify/hydrogen/pull/1494)) by [@frandiox](https://github.com/frandiox)

  In TypeScript projects, when updating to the latest `@shopify/remix-oxygen` adapter release, you should also update to the latest version of `@shopify/oxygen-workers-types`:

  ```diff
  "devDependencies": {
    "@remix-run/dev": "2.1.0",
    "@remix-run/eslint-config": "2.1.0",
  - "@shopify/oxygen-workers-types": "^3.17.3",
  + "@shopify/oxygen-workers-types": "^4.0.0",
    "@shopify/prettier-config": "^1.1.2",
    ...
  },
  ```

- Update internal dependencies for bug resolution. ([#1496](https://github.com/Shopify/hydrogen/pull/1496)) by [@vincentezw](https://github.com/vincentezw)

  Update your `@shopify/cli` dependency to avoid duplicated sub-dependencies:

  ```diff
    "dependencies": {
  -   "@shopify/cli": "3.50.2",
  +   "@shopify/cli": "3.51.0",
    }
  ```

- Update all Node.js dependencies to version 18. (Not a breaking change, since Node.js 18 is already required by Remix v2.) ([#1543](https://github.com/Shopify/hydrogen/pull/1543)) by [@michenly](https://github.com/michenly)

- 🐛 fix undefined menu error ([#1533](https://github.com/Shopify/hydrogen/pull/1533)) by [@michenly](https://github.com/michenly)

- Add `@remix-run/server-runtime` dependency. ([#1489](https://github.com/Shopify/hydrogen/pull/1489)) by [@frandiox](https://github.com/frandiox)

  Since Remix is now a peer dependency of `@shopify/remix-oxygen`, you need to add `@remix-run/server-runtime` to your dependencies, with the same version as the rest of your Remix dependencies.

  ```diff
  "dependencies": {
    "@remix-run/react": "2.1.0"
  + "@remix-run/server-runtime": "2.1.0"
    ...
  }
  ```

- Updated dependencies [[`b2a350a7`](https://github.com/Shopify/hydrogen/commit/b2a350a754ea2d29bc267c260dc298a02f8f4470), [`9b4f4534`](https://github.com/Shopify/hydrogen/commit/9b4f453407338874bd8f1a1f619b607670e021d0), [`74ea1dba`](https://github.com/Shopify/hydrogen/commit/74ea1dba9af37a146882df7ed9674be5659862b5), [`2be9ce82`](https://github.com/Shopify/hydrogen/commit/2be9ce82fd4a5121f1772bbb7349e96ed530e84e), [`a9b8bcde`](https://github.com/Shopify/hydrogen/commit/a9b8bcde96c22cedef7d87631d429199810b4a7a), [`bca112ed`](https://github.com/Shopify/hydrogen/commit/bca112ed7db49e533fe49898b663fa0dd318e6ba), [`848c6260`](https://github.com/Shopify/hydrogen/commit/848c6260a2db3a9cb0c86351f0f7128f61e028f0), [`d53b4ed7`](https://github.com/Shopify/hydrogen/commit/d53b4ed752eb0530622a666ea7dcf4b40239cafa), [`961fd8c6`](https://github.com/Shopify/hydrogen/commit/961fd8c630727784f77b9f693d2e8ff8601969fc), [`2bff9fc7`](https://github.com/Shopify/hydrogen/commit/2bff9fc75916fa95f9a9279d069408fb7a33755c), [`c8e8f6fd`](https://github.com/Shopify/hydrogen/commit/c8e8f6fd233e52cf5570b1904af710d6b907aae5), [`8fce70de`](https://github.com/Shopify/hydrogen/commit/8fce70de32bd61ee86a6d895ac43cc1f78f1bf49), [`f90e4d47`](https://github.com/Shopify/hydrogen/commit/f90e4d4713c6c1fc1e921a7ecd08e95fe5da1744), [`e8cc49fe`](https://github.com/Shopify/hydrogen/commit/e8cc49feff18f5ee72d5f6965ff2094addc23466)]:
  - @shopify/cli-hydrogen@6.1.0
  - @shopify/remix-oxygen@2.0.2
  - @shopify/hydrogen@2023.10.3

## 1.0.0

### Major Changes

- The Storefront API 2023-10 now returns menu item URLs that include the `primaryDomainUrl`, instead of defaulting to the Shopify store ID URL (example.myshopify.com). The skeleton template requires changes to check for the `primaryDomainUrl`: by [@blittle](https://github.com/blittle)

  1. Update the `HeaderMenu` component to accept a `primaryDomainUrl` and include
     it in the internal url check

  ```diff
  // app/components/Header.tsx

  + import type {HeaderQuery} from 'storefrontapi.generated';

  export function HeaderMenu({
    menu,
  +  primaryDomainUrl,
    viewport,
  }: {
    menu: HeaderProps['header']['menu'];
  +  primaryDomainUrl: HeaderQuery['shop']['primaryDomain']['url'];
    viewport: Viewport;
  }) {

    // ...code

    // if the url is internal, we strip the domain
    const url =
      item.url.includes('myshopify.com') ||
      item.url.includes(publicStoreDomain) ||
  +   item.url.includes(primaryDomainUrl)
        ? new URL(item.url).pathname
        : item.url;

     // ...code

  }
  ```

  2. Update the `FooterMenu` component to accept a `primaryDomainUrl` prop and include
     it in the internal url check

  ```diff
  // app/components/Footer.tsx

  - import type {FooterQuery} from 'storefrontapi.generated';
  + import type {FooterQuery, HeaderQuery} from 'storefrontapi.generated';

  function FooterMenu({
    menu,
  +  primaryDomainUrl,
  }: {
    menu: FooterQuery['menu'];
  +  primaryDomainUrl: HeaderQuery['shop']['primaryDomain']['url'];
  }) {
    // code...

    // if the url is internal, we strip the domain
    const url =
      item.url.includes('myshopify.com') ||
      item.url.includes(publicStoreDomain) ||
  +   item.url.includes(primaryDomainUrl)
        ? new URL(item.url).pathname
        : item.url;

     // ...code

    );
  }
  ```

  3. Update the `Footer` component to accept a `shop` prop

  ```diff
  export function Footer({
    menu,
  + shop,
  }: FooterQuery & {shop: HeaderQuery['shop']}) {
    return (
      <footer className="footer">
  -      <FooterMenu menu={menu} />
  +      <FooterMenu menu={menu} primaryDomainUrl={shop.primaryDomain.url} />
      </footer>
    );
  }
  ```

  4. Update `Layout.tsx` to pass the `shop` prop

  ```diff
  export function Layout({
    cart,
    children = null,
    footer,
    header,
    isLoggedIn,
  }: LayoutProps) {
    return (
      <>
        <CartAside cart={cart} />
        <SearchAside />
        <MobileMenuAside menu={header.menu} shop={header.shop} />
        <Header header={header} cart={cart} isLoggedIn={isLoggedIn} />
        <main>{children}</main>
        <Suspense>
          <Await resolve={footer}>
  -          {(footer) => <Footer menu={footer.menu}  />}
  +          {(footer) => <Footer menu={footer.menu} shop={header.shop} />}
          </Await>
        </Suspense>
      </>
    );
  }
  ```

### Patch Changes

- If you are calling `useMatches()` in different places of your app to access the data returned by the root loader, you may want to update it to the following pattern to enhance types: ([#1289](https://github.com/Shopify/hydrogen/pull/1289)) by [@frandiox](https://github.com/frandiox)

  ```ts
  // root.tsx

  import { useMatches } from "@remix-run/react";
  import { type SerializeFrom } from "@shopify/remix-oxygen";

  export const useRootLoaderData = () => {
    const [root] = useMatches();
    return root?.data as SerializeFrom<typeof loader>;
  };

  export function loader(context) {
    // ...
  }
  ```

  This way, you can import `useRootLoaderData()` anywhere in your app and get the correct type for the data returned by the root loader.

- Updated dependencies [[`81400439`](https://github.com/Shopify/hydrogen/commit/814004397c1d17ef0a53a425ed28a42cf67765cf), [`a6f397b6`](https://github.com/Shopify/hydrogen/commit/a6f397b64dc6a0d856cb7961731ee1f86bf80292), [`3464ec04`](https://github.com/Shopify/hydrogen/commit/3464ec04a084e1ceb30ee19874dc1b9171ce2b34), [`7fc088e2`](https://github.com/Shopify/hydrogen/commit/7fc088e21bea47840788cb7c60f873ce1f253128), [`867e0b03`](https://github.com/Shopify/hydrogen/commit/867e0b033fc9eb04b7250baea97d8fd49d26ccca), [`ad45656c`](https://github.com/Shopify/hydrogen/commit/ad45656c5f663cc1a60eab5daab4da1dfd0e6cc3), [`f24e3424`](https://github.com/Shopify/hydrogen/commit/f24e3424c8e2b363b181b71fcbd3e45f696fdd3f), [`66a48573`](https://github.com/Shopify/hydrogen/commit/66a4857387148b6a104df5783314c74aca8aada0), [`0ae7cbe2`](https://github.com/Shopify/hydrogen/commit/0ae7cbe280d8351126e11dc13f35d7277d9b2d86), [`8198c1be`](https://github.com/Shopify/hydrogen/commit/8198c1befdfafb39fbcc88d71f91d21eae252973), [`ad45656c`](https://github.com/Shopify/hydrogen/commit/ad45656c5f663cc1a60eab5daab4da1dfd0e6cc3)]:
  - @shopify/hydrogen@2023.10.0
  - @shopify/remix-oxygen@2.0.0
  - @shopify/cli-hydrogen@6.0.0
</file>

<file path="customer-accountapi.generated.d.ts">
/* eslint-disable eslint-comments/disable-enable-pair */
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
import type * as CustomerAccountAPI from '@shopify/hydrogen/customer-account-api-types';

export type CustomerAddressUpdateMutationVariables = CustomerAccountAPI.Exact<{
  address: CustomerAccountAPI.CustomerAddressInput;
  addressId: CustomerAccountAPI.Scalars['ID']['input'];
  defaultAddress?: CustomerAccountAPI.InputMaybe<
    CustomerAccountAPI.Scalars['Boolean']['input']
  >;
}>;

export type CustomerAddressUpdateMutation = {
  customerAddressUpdate?: CustomerAccountAPI.Maybe<{
    customerAddress?: CustomerAccountAPI.Maybe<
      Pick<CustomerAccountAPI.CustomerAddress, 'id'>
    >;
    userErrors: Array<
      Pick<
        CustomerAccountAPI.UserErrorsCustomerAddressUserErrors,
        'code' | 'field' | 'message'
      >
    >;
  }>;
};

export type CustomerAddressDeleteMutationVariables = CustomerAccountAPI.Exact<{
  addressId: CustomerAccountAPI.Scalars['ID']['input'];
}>;

export type CustomerAddressDeleteMutation = {
  customerAddressDelete?: CustomerAccountAPI.Maybe<
    Pick<
      CustomerAccountAPI.CustomerAddressDeletePayload,
      'deletedAddressId'
    > & {
      userErrors: Array<
        Pick<
          CustomerAccountAPI.UserErrorsCustomerAddressUserErrors,
          'code' | 'field' | 'message'
        >
      >;
    }
  >;
};

export type CustomerAddressCreateMutationVariables = CustomerAccountAPI.Exact<{
  address: CustomerAccountAPI.CustomerAddressInput;
  defaultAddress?: CustomerAccountAPI.InputMaybe<
    CustomerAccountAPI.Scalars['Boolean']['input']
  >;
}>;

export type CustomerAddressCreateMutation = {
  customerAddressCreate?: CustomerAccountAPI.Maybe<{
    customerAddress?: CustomerAccountAPI.Maybe<
      Pick<CustomerAccountAPI.CustomerAddress, 'id'>
    >;
    userErrors: Array<
      Pick<
        CustomerAccountAPI.UserErrorsCustomerAddressUserErrors,
        'code' | 'field' | 'message'
      >
    >;
  }>;
};

export type CustomerFragment = Pick<
  CustomerAccountAPI.Customer,
  'id' | 'firstName' | 'lastName'
> & {
  defaultAddress?: CustomerAccountAPI.Maybe<
    Pick<
      CustomerAccountAPI.CustomerAddress,
      | 'id'
      | 'formatted'
      | 'firstName'
      | 'lastName'
      | 'company'
      | 'address1'
      | 'address2'
      | 'territoryCode'
      | 'zoneCode'
      | 'city'
      | 'zip'
      | 'phoneNumber'
    >
  >;
  addresses: {
    nodes: Array<
      Pick<
        CustomerAccountAPI.CustomerAddress,
        | 'id'
        | 'formatted'
        | 'firstName'
        | 'lastName'
        | 'company'
        | 'address1'
        | 'address2'
        | 'territoryCode'
        | 'zoneCode'
        | 'city'
        | 'zip'
        | 'phoneNumber'
      >
    >;
  };
};

export type AddressFragment = Pick<
  CustomerAccountAPI.CustomerAddress,
  | 'id'
  | 'formatted'
  | 'firstName'
  | 'lastName'
  | 'company'
  | 'address1'
  | 'address2'
  | 'territoryCode'
  | 'zoneCode'
  | 'city'
  | 'zip'
  | 'phoneNumber'
>;

export type CustomerDetailsQueryVariables = CustomerAccountAPI.Exact<{
  [key: string]: never;
}>;

export type CustomerDetailsQuery = {
  customer: Pick<
    CustomerAccountAPI.Customer,
    'id' | 'firstName' | 'lastName'
  > & {
    defaultAddress?: CustomerAccountAPI.Maybe<
      Pick<
        CustomerAccountAPI.CustomerAddress,
        | 'id'
        | 'formatted'
        | 'firstName'
        | 'lastName'
        | 'company'
        | 'address1'
        | 'address2'
        | 'territoryCode'
        | 'zoneCode'
        | 'city'
        | 'zip'
        | 'phoneNumber'
      >
    >;
    addresses: {
      nodes: Array<
        Pick<
          CustomerAccountAPI.CustomerAddress,
          | 'id'
          | 'formatted'
          | 'firstName'
          | 'lastName'
          | 'company'
          | 'address1'
          | 'address2'
          | 'territoryCode'
          | 'zoneCode'
          | 'city'
          | 'zip'
          | 'phoneNumber'
        >
      >;
    };
  };
};

export type OrderMoneyFragment = Pick<
  CustomerAccountAPI.MoneyV2,
  'amount' | 'currencyCode'
>;

export type DiscountApplicationFragment = {
  value:
    | ({__typename: 'MoneyV2'} & Pick<
        CustomerAccountAPI.MoneyV2,
        'amount' | 'currencyCode'
      >)
    | ({__typename: 'PricingPercentageValue'} & Pick<
        CustomerAccountAPI.PricingPercentageValue,
        'percentage'
      >);
};

export type OrderLineItemFullFragment = Pick<
  CustomerAccountAPI.LineItem,
  'id' | 'title' | 'quantity' | 'variantTitle'
> & {
  price?: CustomerAccountAPI.Maybe<
    Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
  >;
  discountAllocations: Array<{
    allocatedAmount: Pick<
      CustomerAccountAPI.MoneyV2,
      'amount' | 'currencyCode'
    >;
    discountApplication: {
      value:
        | ({__typename: 'MoneyV2'} & Pick<
            CustomerAccountAPI.MoneyV2,
            'amount' | 'currencyCode'
          >)
        | ({__typename: 'PricingPercentageValue'} & Pick<
            CustomerAccountAPI.PricingPercentageValue,
            'percentage'
          >);
    };
  }>;
  totalDiscount: Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>;
  image?: CustomerAccountAPI.Maybe<
    Pick<
      CustomerAccountAPI.Image,
      'altText' | 'height' | 'url' | 'id' | 'width'
    >
  >;
};

export type OrderFragment = Pick<
  CustomerAccountAPI.Order,
  'id' | 'name' | 'statusPageUrl' | 'processedAt'
> & {
  fulfillments: {nodes: Array<Pick<CustomerAccountAPI.Fulfillment, 'status'>>};
  totalTax?: CustomerAccountAPI.Maybe<
    Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
  >;
  totalPrice: Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>;
  subtotal?: CustomerAccountAPI.Maybe<
    Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
  >;
  shippingAddress?: CustomerAccountAPI.Maybe<
    Pick<
      CustomerAccountAPI.CustomerAddress,
      'name' | 'formatted' | 'formattedArea'
    >
  >;
  discountApplications: {
    nodes: Array<{
      value:
        | ({__typename: 'MoneyV2'} & Pick<
            CustomerAccountAPI.MoneyV2,
            'amount' | 'currencyCode'
          >)
        | ({__typename: 'PricingPercentageValue'} & Pick<
            CustomerAccountAPI.PricingPercentageValue,
            'percentage'
          >);
    }>;
  };
  lineItems: {
    nodes: Array<
      Pick<
        CustomerAccountAPI.LineItem,
        'id' | 'title' | 'quantity' | 'variantTitle'
      > & {
        price?: CustomerAccountAPI.Maybe<
          Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
        >;
        discountAllocations: Array<{
          allocatedAmount: Pick<
            CustomerAccountAPI.MoneyV2,
            'amount' | 'currencyCode'
          >;
          discountApplication: {
            value:
              | ({__typename: 'MoneyV2'} & Pick<
                  CustomerAccountAPI.MoneyV2,
                  'amount' | 'currencyCode'
                >)
              | ({__typename: 'PricingPercentageValue'} & Pick<
                  CustomerAccountAPI.PricingPercentageValue,
                  'percentage'
                >);
          };
        }>;
        totalDiscount: Pick<
          CustomerAccountAPI.MoneyV2,
          'amount' | 'currencyCode'
        >;
        image?: CustomerAccountAPI.Maybe<
          Pick<
            CustomerAccountAPI.Image,
            'altText' | 'height' | 'url' | 'id' | 'width'
          >
        >;
      }
    >;
  };
};

export type OrderQueryVariables = CustomerAccountAPI.Exact<{
  orderId: CustomerAccountAPI.Scalars['ID']['input'];
}>;

export type OrderQuery = {
  order?: CustomerAccountAPI.Maybe<
    Pick<
      CustomerAccountAPI.Order,
      'id' | 'name' | 'statusPageUrl' | 'processedAt'
    > & {
      fulfillments: {
        nodes: Array<Pick<CustomerAccountAPI.Fulfillment, 'status'>>;
      };
      totalTax?: CustomerAccountAPI.Maybe<
        Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
      >;
      totalPrice: Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>;
      subtotal?: CustomerAccountAPI.Maybe<
        Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
      >;
      shippingAddress?: CustomerAccountAPI.Maybe<
        Pick<
          CustomerAccountAPI.CustomerAddress,
          'name' | 'formatted' | 'formattedArea'
        >
      >;
      discountApplications: {
        nodes: Array<{
          value:
            | ({__typename: 'MoneyV2'} & Pick<
                CustomerAccountAPI.MoneyV2,
                'amount' | 'currencyCode'
              >)
            | ({__typename: 'PricingPercentageValue'} & Pick<
                CustomerAccountAPI.PricingPercentageValue,
                'percentage'
              >);
        }>;
      };
      lineItems: {
        nodes: Array<
          Pick<
            CustomerAccountAPI.LineItem,
            'id' | 'title' | 'quantity' | 'variantTitle'
          > & {
            price?: CustomerAccountAPI.Maybe<
              Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>
            >;
            discountAllocations: Array<{
              allocatedAmount: Pick<
                CustomerAccountAPI.MoneyV2,
                'amount' | 'currencyCode'
              >;
              discountApplication: {
                value:
                  | ({__typename: 'MoneyV2'} & Pick<
                      CustomerAccountAPI.MoneyV2,
                      'amount' | 'currencyCode'
                    >)
                  | ({__typename: 'PricingPercentageValue'} & Pick<
                      CustomerAccountAPI.PricingPercentageValue,
                      'percentage'
                    >);
              };
            }>;
            totalDiscount: Pick<
              CustomerAccountAPI.MoneyV2,
              'amount' | 'currencyCode'
            >;
            image?: CustomerAccountAPI.Maybe<
              Pick<
                CustomerAccountAPI.Image,
                'altText' | 'height' | 'url' | 'id' | 'width'
              >
            >;
          }
        >;
      };
    }
  >;
};

export type OrderItemFragment = Pick<
  CustomerAccountAPI.Order,
  'financialStatus' | 'id' | 'number' | 'processedAt'
> & {
  totalPrice: Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>;
  fulfillments: {nodes: Array<Pick<CustomerAccountAPI.Fulfillment, 'status'>>};
};

export type CustomerOrdersFragment = {
  orders: {
    nodes: Array<
      Pick<
        CustomerAccountAPI.Order,
        'financialStatus' | 'id' | 'number' | 'processedAt'
      > & {
        totalPrice: Pick<CustomerAccountAPI.MoneyV2, 'amount' | 'currencyCode'>;
        fulfillments: {
          nodes: Array<Pick<CustomerAccountAPI.Fulfillment, 'status'>>;
        };
      }
    >;
    pageInfo: Pick<
      CustomerAccountAPI.PageInfo,
      'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'
    >;
  };
};

export type CustomerOrdersQueryVariables = CustomerAccountAPI.Exact<{
  endCursor?: CustomerAccountAPI.InputMaybe<
    CustomerAccountAPI.Scalars['String']['input']
  >;
  first?: CustomerAccountAPI.InputMaybe<
    CustomerAccountAPI.Scalars['Int']['input']
  >;
  last?: CustomerAccountAPI.InputMaybe<
    CustomerAccountAPI.Scalars['Int']['input']
  >;
  startCursor?: CustomerAccountAPI.InputMaybe<
    CustomerAccountAPI.Scalars['String']['input']
  >;
}>;

export type CustomerOrdersQuery = {
  customer: {
    orders: {
      nodes: Array<
        Pick<
          CustomerAccountAPI.Order,
          'financialStatus' | 'id' | 'number' | 'processedAt'
        > & {
          totalPrice: Pick<
            CustomerAccountAPI.MoneyV2,
            'amount' | 'currencyCode'
          >;
          fulfillments: {
            nodes: Array<Pick<CustomerAccountAPI.Fulfillment, 'status'>>;
          };
        }
      >;
      pageInfo: Pick<
        CustomerAccountAPI.PageInfo,
        'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'
      >;
    };
  };
};

export type CustomerUpdateMutationVariables = CustomerAccountAPI.Exact<{
  customer: CustomerAccountAPI.CustomerUpdateInput;
}>;

export type CustomerUpdateMutation = {
  customerUpdate?: CustomerAccountAPI.Maybe<{
    customer?: CustomerAccountAPI.Maybe<
      Pick<CustomerAccountAPI.Customer, 'firstName' | 'lastName'> & {
        emailAddress?: CustomerAccountAPI.Maybe<
          Pick<CustomerAccountAPI.CustomerEmailAddress, 'emailAddress'>
        >;
        phoneNumber?: CustomerAccountAPI.Maybe<
          Pick<CustomerAccountAPI.CustomerPhoneNumber, 'phoneNumber'>
        >;
      }
    >;
    userErrors: Array<
      Pick<
        CustomerAccountAPI.UserErrorsCustomerUserErrors,
        'code' | 'field' | 'message'
      >
    >;
  }>;
};

interface GeneratedQueryTypes {
  '#graphql\n  query CustomerDetails {\n    customer {\n      ...Customer\n    }\n  }\n  #graphql\n  fragment Customer on Customer {\n    id\n    firstName\n    lastName\n    defaultAddress {\n      ...Address\n    }\n    addresses(first: 6) {\n      nodes {\n        ...Address\n      }\n    }\n  }\n  fragment Address on CustomerAddress {\n    id\n    formatted\n    firstName\n    lastName\n    company\n    address1\n    address2\n    territoryCode\n    zoneCode\n    city\n    zip\n    phoneNumber\n  }\n\n': {
    return: CustomerDetailsQuery;
    variables: CustomerDetailsQueryVariables;
  };
  '#graphql\n  fragment OrderMoney on MoneyV2 {\n    amount\n    currencyCode\n  }\n  fragment DiscountApplication on DiscountApplication {\n    value {\n      __typename\n      ... on MoneyV2 {\n        ...OrderMoney\n      }\n      ... on PricingPercentageValue {\n        percentage\n      }\n    }\n  }\n  fragment OrderLineItemFull on LineItem {\n    id\n    title\n    quantity\n    price {\n      ...OrderMoney\n    }\n    discountAllocations {\n      allocatedAmount {\n        ...OrderMoney\n      }\n      discountApplication {\n        ...DiscountApplication\n      }\n    }\n    totalDiscount {\n      ...OrderMoney\n    }\n    image {\n      altText\n      height\n      url\n      id\n      width\n    }\n    variantTitle\n  }\n  fragment Order on Order {\n    id\n    name\n    statusPageUrl\n    processedAt\n    fulfillments(first: 1) {\n      nodes {\n        status\n      }\n    }\n    totalTax {\n      ...OrderMoney\n    }\n    totalPrice {\n      ...OrderMoney\n    }\n    subtotal {\n      ...OrderMoney\n    }\n    shippingAddress {\n      name\n      formatted(withName: true)\n      formattedArea\n    }\n    discountApplications(first: 100) {\n      nodes {\n        ...DiscountApplication\n      }\n    }\n    lineItems(first: 100) {\n      nodes {\n        ...OrderLineItemFull\n      }\n    }\n  }\n  query Order($orderId: ID!) {\n    order(id: $orderId) {\n      ... on Order {\n        ...Order\n      }\n    }\n  }\n': {
    return: OrderQuery;
    variables: OrderQueryVariables;
  };
  '#graphql\n  #graphql\n  fragment CustomerOrders on Customer {\n    orders(\n      sortKey: PROCESSED_AT,\n      reverse: true,\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...OrderItem\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        endCursor\n        startCursor\n      }\n    }\n  }\n  #graphql\n  fragment OrderItem on Order {\n    totalPrice {\n      amount\n      currencyCode\n    }\n    financialStatus\n    fulfillments(first: 1) {\n      nodes {\n        status\n      }\n    }\n    id\n    number\n    processedAt\n  }\n\n\n  query CustomerOrders(\n    $endCursor: String\n    $first: Int\n    $last: Int\n    $startCursor: String\n  ) {\n    customer {\n      ...CustomerOrders\n    }\n  }\n': {
    return: CustomerOrdersQuery;
    variables: CustomerOrdersQueryVariables;
  };
}

interface GeneratedMutationTypes {
  '#graphql\n  mutation customerAddressUpdate(\n    $address: CustomerAddressInput!\n    $addressId: ID!\n    $defaultAddress: Boolean\n ) {\n    customerAddressUpdate(\n      address: $address\n      addressId: $addressId\n      defaultAddress: $defaultAddress\n    ) {\n      customerAddress {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n': {
    return: CustomerAddressUpdateMutation;
    variables: CustomerAddressUpdateMutationVariables;
  };
  '#graphql\n  mutation customerAddressDelete(\n    $addressId: ID!,\n  ) {\n    customerAddressDelete(addressId: $addressId) {\n      deletedAddressId\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n': {
    return: CustomerAddressDeleteMutation;
    variables: CustomerAddressDeleteMutationVariables;
  };
  '#graphql\n  mutation customerAddressCreate(\n    $address: CustomerAddressInput!\n    $defaultAddress: Boolean\n  ) {\n    customerAddressCreate(\n      address: $address\n      defaultAddress: $defaultAddress\n    ) {\n      customerAddress {\n        id\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n': {
    return: CustomerAddressCreateMutation;
    variables: CustomerAddressCreateMutationVariables;
  };
  '#graphql\n  # https://shopify.dev/docs/api/customer/latest/mutations/customerUpdate\n  mutation customerUpdate(\n    $customer: CustomerUpdateInput!\n  ){\n    customerUpdate(input: $customer) {\n      customer {\n        firstName\n        lastName\n        emailAddress {\n          emailAddress\n        }\n        phoneNumber {\n          phoneNumber\n        }\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n': {
    return: CustomerUpdateMutation;
    variables: CustomerUpdateMutationVariables;
  };
}

declare module '@shopify/hydrogen' {
  interface CustomerAccountQueries extends GeneratedQueryTypes {}
  interface CustomerAccountMutations extends GeneratedMutationTypes {}
}
</file>

<file path="docs/GradientText-QuickGuide.md">
# Gradient Text - Quick Guide

## 🎨 Gradient Variants có sẵn

| Variant | Màu sắc | Use case |
|---------|---------|----------|
| `default` | White subtle | Text thông thường |
| `primary` | Red/Orange | CTA, highlights |
| `accent` | Purple | Secondary emphasis |
| `white` | White clean | Clean headings |
| `cyber` | Blue cyber | Tech/Gaming theme |
| `neon` | Pink/Purple | Neon effects |

## 📝 Cách sử dụng

### Method 1: CSS Classes (Nhanh)
```jsx
// Cho headings
<h1 className="heading-gradient-cyber">Title</h1>
<h2 className="heading-gradient-neon">Subtitle</h2>

// Cho text thường
<p className="text-gradient-primary">Description</p>
<span className="text-gradient-cyber text-gradient-animate">Animated text</span>
```

### Method 2: React Components (Recommended)
```jsx
import {GradientText, GradientHeading} from '~/components/GradientText';

// Headings
<GradientHeading level={1} variant="cyber">Main Title</GradientHeading>
<GradientHeading level={2} variant="neon" animate>Animated Title</GradientHeading>

// Text
<GradientText variant="primary">Normal text</GradientText>
<GradientText as="p" variant="cyber" animate>Paragraph text</GradientText>
```

## 🔥 Quick Copy-Paste Examples

### Hero Section
```jsx
<GradientHeading level={1} variant="cyber" className="text-6xl font-oxanium">
  Welcome to Kyperus
</GradientHeading>
<GradientText as="p" variant="white" className="text-xl">
  Premium gaming experience
</GradientText>
```

### Product Cards
```jsx
<GradientHeading level={3} variant="neon" className="text-2xl font-bold">
  {product.title}
</GradientHeading>
```

### Call to Action
```jsx
<GradientText variant="primary" animate className="text-lg font-semibold">
  Limited Time Offer!
</GradientText>
```

## 📋 CSS Classes Reference

### Heading Classes
- `.heading-gradient` - Default white gradient + bold
- `.heading-gradient-primary` - Red/orange + bold
- `.heading-gradient-cyber` - Blue cyber + bold  
- `.heading-gradient-neon` - Pink/purple + bold

### Text Classes
- `.text-gradient` - Default white gradient
- `.text-gradient-primary` - Red/orange gradient
- `.text-gradient-accent` - Purple gradient
- `.text-gradient-white` - Clean white gradient
- `.text-gradient-cyber` - Blue cyber gradient
- `.text-gradient-neon` - Pink/purple gradient

### Animation
- `.text-gradient-animate` - Thêm vào bất kỳ gradient class nào

## ⚡ Component Props

### GradientText
```jsx
<GradientText 
  variant="cyber"           // Gradient variant
  as="p"                   // HTML element (h1,h2,p,span)
  animate={true}           // Enable animation
  className="text-xl"      // Additional classes
>
  Your text
</GradientText>
```

### GradientHeading
```jsx
<GradientHeading 
  level={1}                // 1,2,3,4,5,6 (h1,h2,etc)
  variant="neon"           // Gradient variant  
  animate={false}          // Enable animation
  className="font-bold"    // Additional classes
>
  Your heading
</GradientHeading>
```

## 🎯 Best Practices

1. **Headings**: Dùng `GradientHeading` hoặc `.heading-gradient-*`
2. **Text**: Dùng `GradientText` hoặc `.text-gradient-*`  
3. **Animation**: Chỉ dùng cho text quan trọng
4. **Fonts**: Combine với `font-oxanium` cho cyberpunk feel
5. **Sizes**: Gradient đẹp nhất với text size lớn (text-xl+)

## 🚀 Quick Start Template

```jsx
import {GradientHeading, GradientText} from '~/components/GradientText';

function MyComponent() {
  return (
    <div className="text-center space-y-4">
      <GradientHeading level={1} variant="cyber" className="text-5xl font-oxanium">
        Amazing Title
      </GradientHeading>
      
      <GradientText as="p" variant="white" className="text-lg">
        Beautiful description text
      </GradientText>
      
      <GradientText variant="neon" animate className="text-sm font-semibold">
        Special offer text
      </GradientText>
    </div>
  );
}
```

---

💡 **Tip**: Combine với `font-oxanium` class để có cyberpunk aesthetic hoàn hảo!
</file>

<file path="docs/KprButton-QuickGuide.md">
# KprButton - Quick Guide

## 🎯 Overview
Cyberpunk-themed button component với 2 variants: Primary và Secondary. Có clip-path đặc trưng và hover animations.

## 🚀 Import & Basic Usage
```jsx
import {KprButton} from '~/components/KprButton';

// Basic buttons
<KprButton variant="primary">Shop Now</KprButton>
<KprButton variant="secondary">Learn More</KprButton>
```

## 🎨 Variants

### Primary Button
- **Style**: Giống `.cart-checkout-button`
- **Background**: Dark gray (#3f3f46)
- **Hover**: White fill animation từ trái qua phải
- **Use case**: CTA chính, checkout, submit

### Secondary Button  
- **Style**: Giống `.cart-discount-form button` + clip path
- **Background**: Transparent với border
- **Hover**: Dark gray fill animation
- **Use case**: Actions phụ, cancel, browse

## ⚙️ Props Reference

```jsx
<KprButton 
  variant="primary"        // 'primary' | 'secondary'
  size="md"               // 'sm' | 'md' | 'lg'
  fullWidth={false}       // boolean - full width
  as="button"             // React.ElementType - button, a, Link, etc.
  className="extra-class" // Additional CSS classes
  href="/shop"            // For links (when as="a")
  onClick={handleClick}   // Event handlers
>
  Button Text
</KprButton>
```

## 📏 Sizes

| Size | Padding | Text Size | Use Case |
|------|---------|-----------|----------|
| `sm` | 16px 32px | 14px | Small actions |
| `md` | 24px 48px | 16px | Standard buttons |
| `lg` | 32px 64px | 18px | Hero CTAs |

## 🔥 Quick Examples

### Hero Section CTA
```jsx
<KprButton variant="primary" size="lg" className="mt-8">
  Explore Collection
</KprButton>
```

### Product Card Actions
```jsx
<div className="flex gap-4">
  <KprButton variant="primary" fullWidth>
    Add to Cart
  </KprButton>
  <KprButton variant="secondary">
    Quick View
  </KprButton>
</div>
```

### Navigation Link
```jsx
<KprButton 
  variant="secondary" 
  as="a" 
  href="/collections/all"
>
  Browse All
</KprButton>
```

### Form Buttons
```jsx
<div className="flex gap-4">
  <KprButton variant="primary" type="submit" fullWidth>
    Submit Order
  </KprButton>
  <KprButton variant="secondary" type="button">
    Cancel
  </KprButton>
</div>
```

### Mobile Menu Actions
```jsx
<KprButton variant="primary" size="sm" fullWidth>
  Sign In
</KprButton>
```

## 🎭 Styling Features

### Clip Path
- Tất cả buttons có cyberpunk clip-path: `polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px)`

### Animations
- **Primary**: White fill từ trái qua phải (0.4s)
- **Secondary**: Dark gray fill từ trái qua phải (0.3s)
- **Text**: Smooth color transition (0.3s)

### Typography
- Font: `Oxanium` (cyberpunk font)
- Weight: `Bold`
- Transform: `Uppercase`

## 🎯 Best Practices

1. **Primary for main actions**: Checkout, submit, add to cart
2. **Secondary for support actions**: Browse, learn more, cancel
3. **Use fullWidth**: Cho mobile forms và card actions
4. **Size appropriately**: 
   - `lg` cho hero sections
   - `md` cho general use
   - `sm` cho compact spaces
5. **Combine với gradient text**: Cho special effects

## 🚨 Migration from existing buttons

```jsx
// Old way
<button className="cart-checkout-button">
  Checkout
</button>

// New way  
<KprButton variant="primary" fullWidth>
  Checkout
</KprButton>
```

---

💡 **Tip**: Combine với `GradientText` để tạo epic cyberpunk buttons!
</file>

<file path="env.d.ts">
/// <reference types="vite/client" />
/// <reference types="react-router" />
/// <reference types="@shopify/oxygen-workers-types" />

// Enhance TypeScript's built-in typings.
import '@total-typescript/ts-reset';

import type {
  HydrogenContext,
  HydrogenSessionData,
  HydrogenEnv,
} from '@shopify/hydrogen';
import type {createAppLoadContext} from '~/lib/context';

declare global {
  /**
   * A global `process` object is only available during build to access NODE_ENV.
   */
  const process: {env: {NODE_ENV: 'production' | 'development'}};

  interface Env extends HydrogenEnv {
    // declare additional Env parameter use in the fetch handler and Remix loader context here
  }
}

declare module 'react-router' {
  interface AppLoadContext
    extends Awaited<ReturnType<typeof createAppLoadContext>> {
    // to change context type, change the return of createAppLoadContext() instead
  }

  // TODO: remove this once we've migrated our loaders to `Route.LoaderArgs` 
  interface LoaderFunctionArgs {
    context: AppLoadContext;
  }

  // TODO: remove this once we've migrated our loaders to `Route.ActionArgs`
  interface ActionFunctionArgs {
    context: AppLoadContext;
  }

  interface SessionData extends HydrogenSessionData {
    // declare local additions to the Remix session data here
  }
}
</file>

<file path="eslint.config.js">
import {fixupConfigRules, fixupPluginRules} from '@eslint/compat';
import eslintComments from 'eslint-plugin-eslint-comments';
import react from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
import jsxA11Y from 'eslint-plugin-jsx-a11y';
import globals from 'globals';
import typescriptEslint from '@typescript-eslint/eslint-plugin';
import _import from 'eslint-plugin-import';
import tsParser from '@typescript-eslint/parser';
import jest from 'eslint-plugin-jest';
import path from 'node:path';
import {fileURLToPath} from 'node:url';
import js from '@eslint/js';
import {FlatCompat} from '@eslint/eslintrc';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
  allConfig: js.configs.all,
});

export default [
  {
    ignores: [
      '**/node_modules/',
      '**/build/',
      '**/*.graphql.d.ts',
      '**/*.graphql.ts',
      '**/*.generated.d.ts',
      '**/.react-router/',
      '**/packages/hydrogen/dist/',
    ],
  },
  ...fixupConfigRules(
    compat.extends(
      'eslint:recommended',
      'plugin:eslint-comments/recommended',
      'plugin:react/recommended',
      'plugin:react-hooks/recommended',
      'plugin:jsx-a11y/recommended',
    ),
  ),
  {
    plugins: {
      'eslint-comments': fixupPluginRules(eslintComments),
      react: fixupPluginRules(react),
      'react-hooks': fixupPluginRules(reactHooks),
      'jsx-a11y': fixupPluginRules(jsxA11Y),
    },
    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.node,
      },
      ecmaVersion: 'latest',
      sourceType: 'module',
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
    rules: {
      'eslint-comments/no-unused-disable': 'error',
      'no-console': [
        'warn',
        {
          allow: ['warn', 'error'],
        },
      ],
      'no-use-before-define': 'off',
      'no-warning-comments': 'off',
      'object-shorthand': [
        'error',
        'always',
        {
          avoidQuotes: true,
        },
      ],
      'no-useless-escape': 'off',
      'no-case-declarations': 'off',
    },
  },
  ...fixupConfigRules(
    compat.extends(
      'plugin:react/recommended',
      'plugin:react/jsx-runtime',
      'plugin:react-hooks/recommended',
      'plugin:jsx-a11y/recommended',
    ),
  ).map((config) => ({
    ...config,
    files: ['**/*.{js,jsx,ts,tsx}'],
  })),
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    plugins: {
      react: fixupPluginRules(react),
      'jsx-a11y': fixupPluginRules(jsxA11Y),
    },
    settings: {
      react: {
        version: 'detect',
      },
      formComponents: ['Form'],
      linkComponents: [
        {
          name: 'Link',
          linkAttribute: 'to',
        },
        {
          name: 'NavLink',
          linkAttribute: 'to',
        },
      ],
      'import/resolver': {
        typescript: {},
      },
    },
    rules: {
      'jsx-a11y/control-has-associated-label': 'off',
      'jsx-a11y/label-has-for': 'off',
      'react/display-name': 'off',
      'react/no-array-index-key': 'warn',
      'react/prop-types': 'off',
      'react/react-in-jsx-scope': 'off',
    },
  },
  ...fixupConfigRules(
    compat.extends(
      'plugin:@typescript-eslint/recommended',
      'plugin:import/recommended',
      'plugin:import/typescript',
    ),
  ).map((config) => ({
    ...config,
    files: ['**/*.{ts,tsx}'],
  })),
  {
    files: ['**/*.{ts,tsx}'],
    plugins: {
      '@typescript-eslint': fixupPluginRules(typescriptEslint),
      import: fixupPluginRules(_import),
    },
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        projectService: {
          allowDefaultProject: ['.graphqlrc.ts'],
        },
        tsconfigRootDir: __dirname,
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
    settings: {
      'import/internal-regex': '^~/',
      'import/resolvers': {
        node: {
          extensions: ['.ts', '.tsx'],
        },
        typescript: {
          alwaysTryTypes: true,
          project: __dirname,
        },
      },
    },
    rules: {
      '@typescript-eslint/ban-ts-comment': 'off',
      '@typescript-eslint/naming-convention': 'off',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'off',
    },
  },
  {
    files: ['**/.eslintrc.cjs'],
    languageOptions: {
      globals: {
        ...globals.node,
      },
    },
  },
  ...compat.extends('plugin:jest/recommended').map((config) => ({
    ...config,
    files: ['**/*.test.*'],
  })),
  {
    files: ['**/*.test.*'],
    plugins: {
      jest,
    },
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
    },
  },
  {
    files: ['**/*.server.*'],
    rules: {
      'react-hooks/rules-of-hooks': 'off',
    },
  },
  ...fixupConfigRules(
    compat.extends(
      'plugin:@typescript-eslint/eslint-recommended',
      'plugin:@typescript-eslint/recommended',
    ),
  ).map((config) => ({
    ...config,
    files: ['**/*.ts', '**/*.tsx'],
  })),
  {
    files: ['**/*.ts', '**/*.tsx'],
    languageOptions: {
      parser: tsParser,
    },
    rules: {
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'default',
          format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
          leadingUnderscore: 'allowSingleOrDouble',
          trailingUnderscore: 'allowSingleOrDouble',
        },
        {
          selector: 'typeLike',
          format: ['PascalCase'],
        },
        {
          selector: 'typeParameter',
          format: ['PascalCase'],
          leadingUnderscore: 'allow',
        },
        {
          selector: 'interface',
          format: ['PascalCase'],
        },
        {
          selector: 'property',
          format: null,
        },
      ],
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/no-empty-interface': 'off',
      '@typescript-eslint/no-empty-object-type': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off',
      '@typescript-eslint/no-unused-vars': 'off',
      'react/prop-types': 'off',
    },
  },
];
</file>

<file path="guides/predictiveSearch/predictiveSearch.md">
# Hydrogen Predictive Search

Our skeleton template ships with predictive search functionality. While [regular search](../search/search.md)
provides paginated search of `pages`, `articles` and `products` inside the `/search` route,
predictive provides real-time results in a aside drawer for `pages`, `articles`, `products`, `collections` and
recommended `queries/suggestions`.

This integration uses the storefront API (SFAPI) [predictiveSearch](https://shopify.dev/docs/api/storefront/latest/queries/vpredictiveSearch) endpoint to retrieve predictive search results based on a search term.

## Components Architecture

![alt text](./predictiveSearch.jpg)

## Components

| File                                                                                             | Description                                                                                                                                            |
| ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------ |
| [`app/components/SearchFormPredictive.tsx`](../../app/components/SearchFormPredictive.tsx)       | A fully customizable form component configured to make form `GET` requests to the `/search` route.                                                    |
| [`app/components/SearchResultsPredictive.tsx`](../../app/components/SearchResultsPredictive.tsx) | A fully customizable search results wrapper, that provides compound components to render `articles`, `pages`, `products`, `collections` and `queries`. |

## Instructions

### 1. Create the search route

Create a new file at `/routes/search.tsx` (if not already created)

### 3. Add `predictiveSearch` query and fetcher

The predictiveSearch fetcher parses the `q` and `limit` formData properties sent
by the `<SearchFormPredictive />` component and performs the predictive search
SFAPI request.

```ts
/**
 * Predictive search query and fragments
 * (adjust as needed)
 */
const PREDICTIVE_SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment PredictiveArticle on Article {
    __typename
    id
    title
    handle
    blog {
      handle
    }
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_COLLECTION_FRAGMENT = `#graphql
  fragment PredictiveCollection on Collection {
    __typename
    id
    title
    handle
    image {
      url
      altText
      width
      height
    }
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PAGE_FRAGMENT = `#graphql
  fragment PredictivePage on Page {
    __typename
    id
    title
    handle
    trackingParameters
  }
` as const;

const PREDICTIVE_SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment PredictiveProduct on Product {
    __typename
    id
    title
    handle
    trackingParameters
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
    }
  }
` as const;

const PREDICTIVE_SEARCH_QUERY_FRAGMENT = `#graphql
  fragment PredictiveQuery on SearchQuerySuggestion {
    __typename
    text
    styledText
    trackingParameters
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/predictiveSearch
const PREDICTIVE_SEARCH_QUERY = `#graphql
  query predictiveSearch(
    $country: CountryCode
    $language: LanguageCode
    $limit: Int!
    $limitScope: PredictiveSearchLimitScope!
    $term: String!
    $types: [PredictiveSearchType!]
  ) @inContext(country: $country, language: $language) {
    predictiveSearch(
      limit: $limit,
      limitScope: $limitScope,
      query: $term,
      types: $types,
    ) {
      articles {
        ...PredictiveArticle
      }
      collections {
        ...PredictiveCollection
      }
      pages {
        ...PredictivePage
      }
      products {
        ...PredictiveProduct
      }
      queries {
        ...PredictiveQuery
      }
    }
  }
  ${PREDICTIVE_SEARCH_ARTICLE_FRAGMENT}
  ${PREDICTIVE_SEARCH_COLLECTION_FRAGMENT}
  ${PREDICTIVE_SEARCH_PAGE_FRAGMENT}
  ${PREDICTIVE_SEARCH_PRODUCT_FRAGMENT}
  ${PREDICTIVE_SEARCH_QUERY_FRAGMENT}
` as const;

/**
 * Predictive search fetcher
 */
async function predictiveSearch({
  request,
  context,
}: Pick<ActionFunctionArgs, 'request' | 'context'>) {
  const {storefront} = context;
  const formData = await request.formData();
  const term = String(formData.get('q') || '');

  const limit = Number(formData.get('limit') || 10);

  // Predictively search articles, collections, pages, products, and queries (suggestions)
  const {predictiveSearch: items, errors} = await storefront.query(
    PREDICTIVE_SEARCH_QUERY,
    {
      variables: {
        // customize search options as needed
        limit,
        limitScope: 'EACH',
        term,
      },
    },
  );

  if (errors) {
    throw new Error(
      `Shopify API errors: ${errors.map(({message}) => message).join(', ')}`,
    );
  }

  if (!items) {
    throw new Error('No predictive search data returned');
  }

  const total = Object.values(items).reduce((acc, {length}) => acc + length, 0);

  return {term, result: {items, total}, error: null};
}
```

### 3. Add a `loader` export to the route

This action receives and processes `GET` requests from the `<SearchFormPredictive />`
component. These request include the search parameter `predictive` to identify them over
regular search requests.

A `q` URL parameter will be used as the search term and appended automatically by
the form if present in it's children prop.

```ts
/**
 * Handles predictive search GET requests
 * requested by the SearchFormPredictive component
 */
export async function loader({request, context}: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const isPredictive = url.searchParams.has('predictive');

  if (!isPredictive) {
    return {}
  }

  const searchPromise = predictiveSearch({request, context})

  searchPromise.catch((error: Error) => {
    console.error(error);
    return {term: '', result: null, error: error.message};
  });

  return await searchPromise;
}
```

### 4. Render the predictive search form and results

Create a SearchAside or similar component to render the form and results.

```ts
import { SearchFormPredictive } from '~/components/SearchFormPredictive';
import { SearchResultsPredictive } from '~/components/SearchResultsPredictive';

function SearchAside() {
  return (
    <Aside type="search" heading="SEARCH">
      <div className="predictive-search">
        <br />
        <SearchFormPredictive>
          {({ fetchResults, goToSearch, inputRef }) => (
            <>
              <input
                name="q"
                onChange={fetchResults}
                onFocus={fetchResults}
                placeholder="Search"
                ref={inputRef}
                type="search"
              />
              &nbsp;
              <button onClick={goToSearch}>
                Search
              </button>
            </>
          )}
        </SearchFormPredictive>

        <SearchResultsPredictive>
          {({ items, total, term, state, inputRef, closeSearch }) => {
            const { articles, collections, pages, products, queries } = items;

            if (state === 'loading' && term.current) {
              return <div>Loading...</div>;
            }

            if (!total) {
              return <SearchResultsPredictive.Empty term={term} />;
            }

            return (
              <>
                <SearchResultsPredictive.Queries
                   queries={queries}
                   term={term}
                   inputRef={inputRef}
                />
                <SearchResultsPredictive.Products
                   products={products}
                   closeSearch={closeSearch}
                   term={term}
                />
                <SearchResultsPredictive.Collections
                   collections={collections}
                   closeSearch={closeSearch}
                   term={term}
                />
                <SearchResultsPredictive.Pages
                   pages={pages}
                   closeSearch={closeSearch}
                   term={term}
                />
                <SearchResultsPredictive.Articles
                   articles={articles}
                   closeSearch={closeSearch}
                   term={term}
                />
                {term.current && total && (
                  <Link onClick={closeSearch} to={`/search?q=${term.current}`}>
                    <p>
                      View all results for <q>{term.current}</q> →
                    </p>
                  </Link>
                )}
              </>
            );
          }}
        </SearchResultsPredictive>
      </div>
    </Aside>
  );
}
```

## Additional Notes

### How to use a different URL search parameter?

- Modify the `name` attribute in the forms input element. e.g

```ts
<input name="query" />`.
```

- Modify the fetchers term variable to parse the new name. e.g

```ts
const term = String(searchParams.get('query') || '');
```

### How to customize the way the results look?

Simply go to `/app/components/SearchResultsPredictive.tsx` and look for the compound
component you would like to modify.

Here we add images to each predictive product result item

```diff
SearchResultsPredictive.Products = function ({
  products,
  closeSearch,
  term,
}: SearchResultsPredictiveProductsProps) {
  if (!products.length) return null;

  return (
    <div className="predictive-search-result" key="products">
      <h5>Products</h5>
      <ul>
        {products.map((product) => {
          const productUrl = urlWithTrackingParams({
            baseUrl: `/products/${product.handle}`,
            trackingParams: product.trackingParameters,
            term: term.current,
          });
+         const price = product?.selectedOrFirstAvailableVariant?.price;
+         const image = product?.selectedOrFirstAvailableVariant?.image;
          return (
            <li className="predictive-search-result-item" key={product.id}>
              <Link to={productUrl} onClick={closeSearch}>
+               {image && (
+                 <Image
+                   alt={image.altText ?? ''}
+                   src={image.url}
+                   width={50}
+                   height={50}
+                 />
+               )}
                <div>
                  <p>{product.title}</p>
                  <small>
+                 {price && (
+                   <Money
+                     data={price}
+                   />
+                 )}
                  </small>
                </div>
              </Link>
            </li>
          );
        })}
      </ul>
    </div>
  )
};
```
</file>

<file path="guides/search/search.md">
# Hydrogen Search

Our skeleton template ships with a `/search` route and a set of components to easily
implement a traditional search flow.

This integration uses the storefront API (SFAPI) [search](https://shopify.dev/docs/api/storefront/latest/queries/search)
endpoint to retrieve search results based on a search term.

## Components Architecture

![alt text](./search.jpg)

## Components

| File                                                                   | Description                                                                                                                 |
| ---------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| [`app/components/SearchForm.tsx`](app/components/SearchForm.tsx)       | A fully customizable form component configured to make (server-side) form `GET` requests to the `/search` route.            |
| [`app/components/SearchResults.tsx`](app/components/SearchResults.tsx) | A fully customizable search results wrapper, that provides compound components to render `articles`, `pages` and `products` |

## Instructions

### 1. Create the search route

Create a new file at `/routes/search.tsx`

### 3. Add `search` query and fetcher

The search fetcher parses the `q` parameter and performs the search SFAPI request.

```ts
/**
 * Regular search query and fragments
 * (adjust as needed)
 */
const SEARCH_PRODUCT_FRAGMENT = `#graphql
  fragment SearchProduct on Product {
    __typename
    handle
    id
    publishedAt
    title
    trackingParameters
    vendor
    selectedOrFirstAvailableVariant(
      selectedOptions: []
      ignoreUnknownOptions: true
      caseInsensitiveMatch: true
    ) {
      id
      image {
        url
        altText
        width
        height
      }
      price {
        amount
        currencyCode
      }
      compareAtPrice {
        amount
        currencyCode
      }
      selectedOptions {
        name
        value
      }
      product {
        handle
        title
      }
    }
  }
` as const;

const SEARCH_PAGE_FRAGMENT = `#graphql
  fragment SearchPage on Page {
     __typename
     handle
    id
    title
    trackingParameters
  }
` as const;

const SEARCH_ARTICLE_FRAGMENT = `#graphql
  fragment SearchArticle on Article {
    __typename
    handle
    id
    title
    trackingParameters
  }
` as const;

const PAGE_INFO_FRAGMENT = `#graphql
  fragment PageInfoFragment on PageInfo {
    hasNextPage
    hasPreviousPage
    startCursor
    endCursor
  }
` as const;

// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/search
export const SEARCH_QUERY = `#graphql
  query Search(
    $country: CountryCode
    $endCursor: String
    $first: Int
    $language: LanguageCode
    $last: Int
    $term: String!
    $startCursor: String
  ) @inContext(country: $country, language: $language) {
    articles: search(
      query: $term,
      types: [ARTICLE],
      first: $first,
    ) {
      nodes {
        ...on Article {
          ...SearchArticle
        }
      }
    }
    pages: search(
      query: $term,
      types: [PAGE],
      first: $first,
    ) {
      nodes {
        ...on Page {
          ...SearchPage
        }
      }
    }
    products: search(
      after: $endCursor,
      before: $startCursor,
      first: $first,
      last: $last,
      query: $term,
      sortKey: RELEVANCE,
      types: [PRODUCT],
      unavailableProducts: HIDE,
    ) {
      nodes {
        ...on Product {
          ...SearchProduct
        }
      }
      pageInfo {
        ...PageInfoFragment
      }
    }
  }
  ${SEARCH_PRODUCT_FRAGMENT}
  ${SEARCH_PAGE_FRAGMENT}
  ${SEARCH_ARTICLE_FRAGMENT}
  ${PAGE_INFO_FRAGMENT}
` as const;

/**
 * Regular search fetcher
 */
async function search({
  request,
  context,
}: Pick<LoaderFunctionArgs, 'request' | 'context'>) {
  const {storefront} = context;
  const url = new URL(request.url);
  const searchParams = new URLSearchParams(url.search);
  const variables = getPaginationVariables(request, {pageBy: 8});
  const term = String(searchParams.get('q') || '');

  // Search articles, pages, and products for the `q` term
  const {errors, ...items} = await storefront.query(SEARCH_QUERY, {
    variables: {...variables, term},
  });

  if (!items) {
    throw new Error('No search data returned from Shopify API');
  }

  if (errors) {
    throw new Error(errors[0].message);
  }

  const total = Object.values(items).reduce((acc, {nodes}) => {
    return acc + nodes.length;
  }, 0);

  return {term, result: {total, items}};
}
```

### 3. Add a `loader` export to the route

This loader receives and processes `GET` requests from the `<SearchForm />` component.

A `q` URL parameter will be used as the search term and appended automatically by
the form if present in it's children prop

```ts
/**
 * Handles regular search GET requests
 * requested by the SearchForm component and /search route visits
 */
export async function loader({request, context}: LoaderFunctionArgs) {
  const url = new URL(request.url);
  const isRegular = !url.searchParams.has('predictive');

  if (!isRegular) {
    return {}
  }

  const searchPromise = regularSearch({request, context});

  searchPromise.catch((error: Error) => {
    console.error(error);
    return {term: '', result: null, error: error.message};
  });

  return await searchPromise;
}
```

### 4. Render the search form and results

Finally, create a default export to render both the search form and the search results

```ts
import {SearchForm} from '~/components/SearchForm';
import {SearchResults} from '~/components/SearchResults';

/**
 * Renders the /search route
 */
export default function SearchPage() {
  const {term, result} = useLoaderData<typeof loader>();

  return (
    <div className="search">
      <h1>Search</h1>
      <SearchForm>
        {({inputRef}) => (
          <>
            <input
              defaultValue={term}
              name="q"
              placeholder="Search…"
              ref={inputRef}
              type="search"
            />
            &nbsp;
            <button type="submit">Search</button>
          </>
        )}
      </SearchForm>
      {!term || !result?.total ? (
        <SearchResults.Empty />
      ) : (
        <SearchResults result={result} term={term}>
          {({articles, pages, products, term}) => (
            <div>
              <SearchResults.Products products={products} term={term} />
              <SearchResults.Pages pages={pages} term={term} />
              <SearchResults.Articles articles={articles} term={term} />
            </div>
          )}
        </SearchResults>
      )}
    </div>
  );
}
```

## Additional Notes

### How to use a different URL search parameter?

- Modify the `name` attribute in the forms input element. e.g

```ts
<input name="query" />`.
```

- Modify the search fetcher term variable to parse the new name. e.g

```ts
const term = String(searchParams.get('query') || '');
```

### How to customize the way the results look?

Simply go to `/app/components/SearchResults.txx` and look for the compound component you
want to modify.

For example, let's render articles in a horizontal flex container

```diff
SearchResults.Pages = function({
  pages,
  term,
}: {
  pages: SearchItems['pages'];
  term: string;
}) {
  if (!pages?.nodes.length) {
    return null;
  }
  return (
    <div className="search-result">
      <h2>Pages</h2>
+     <div className="flex">
        {pages?.nodes?.map((page) => {
          const pageUrl = urlWithTrackingParams({
            baseUrl: `/pages/${page.handle}`,
            trackingParams: page.trackingParameters,
            term,
          });
          return (
            <div className="search-results-item" key={page.id}>
              <Link prefetch="intent" to={pageUrl}>
                {page.title}
              </Link>
            </div>
          );
        })}
      </div>
    </div>
  );
};
```
</file>

<file path="public/images/big-hero-text.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 224 150">
  <!-- Generator: Adobe Illustrator 29.5.0, SVG Export Plug-In . SVG Version: 2.1.0 Build 137)  -->
  <defs>
    <style>
      .st0 {
        fill: #fff;
      }
    </style>
  </defs>
  <g id="GTA_Stack">
    <path id="O" class="st0" d="M154.7,93.5c0-2.4-1.5-4.6-4.3-4.6h-10.8c-2.7,0-4.3,2.1-4.3,4.6v19.4c0,2.1,1.6,4.3,4.3,4.3s10.8,0,10.9,0c2.1,0,4.2-1.7,4.2-4.3v-19.4h0ZM146.1,110.2h-2.1v-14.2h2.1v14.2Z"/>
    <path id="T" class="st0" d="M122.5,88.9h-8.6v1.9h-1.6v7h1.6s0,15.2,0,15.2c0,2.3,1.8,4.3,4.3,4.3h10.8c2.4,0,4.3-1.8,4.3-4.3v-13.4h-8.6v10.6h-2.1v-12.4h10.8v-7h-10.8v-1.9Z"/>
    <path id="U" class="st0" d="M102,110.2h-2.1v-21.3h-8.6v24c0,2.1,1.7,4.3,4.3,4.3s10.8,0,10.9,0c2.3,0,4.2-2.1,4.2-4.3v-24h-8.6v21.3h0Z"/>
    <path id="A" class="st0" d="M84.7,88.9h-10.8c-2.2,0-4.3,1.7-4.3,4.6v4.2h8.6v-1.8h2.1v3.6h-6.4c-2.6,0-4.3,2.1-4.3,4.6v8.8c0,2.5,1.9,4.3,4.3,4.3h15.1v-23.7c0-2.6-1.8-4.6-4.3-4.6h0ZM80.4,110.2h-2.1v-3.6h2.1v3.6Z"/>
    <g id="T1">
      <path class="st0" d="M182.2,82.5v-11.6h-8.6v8.9h-2.1v-10.7h10.8v-7h-10.8v-3.3h-8.6v3.3h-1.7v7h1.7s0,13.3,0,13.3c0,2,1.6,4.3,4.3,4.3h10.8c2.7,0,4.3-2.2,4.3-4.3h0Z"/>
    </g>
    <g id="F">
      <path class="st0" d="M144.5,58.9c-2.2,0-4.3,1.8-4.3,4.3v23.6h8.7v-12.2h10.7v-7h-10.7v-1.7h10.7v-7h-15.1Z"/>
    </g>
    <g id="E">
      <path class="st0" d="M138.1,82.5v-4.4h-8.7v1.7h-2.1v-3.5h10.8v-13.1c0-2.6-2.3-4.3-4.3-4.3h-10.8c-2.5,0-4.3,2.1-4.3,4.3v19.3c0,2.3,1.7,4.3,4.3,4.3h10.8c2.1,0,4.3-1.6,4.3-4.3h0ZM127.2,65.8h2.1v3.5h-2.1v-3.5Z"/>
    </g>
    <g id="T2">
      <path class="st0" d="M94.9,82.5v-11.6h-8.6v8.9h-2.1v-10.7h10.8v-7h-10.8v-3.3h-8.6v3.3h-1.7v7h1.7v13.3c0,2.1,1.7,4.3,4.3,4.3h10.8c2.6,0,4.3-2.1,4.3-4.3h0Z"/>
    </g>
    <path id="D" class="st0" d="M150.9,17.3v7h-6.4c-2,0-4.3,1.6-4.3,4.3v19.2c0,2.5,2,4.3,4.3,4.3h15.1V17.3h-8.6,0ZM150.9,45.1h-2.1v-14h2.1v14Z"/>
    <path id="N" class="st0" d="M138,28.6c0-2.1-1.7-4.3-4.3-4.3s-5.1.6-6.4,1.7v-1.7h-8.6v27.8h8.6v-21h2.1v21h8.7v-23.5h0Z"/>
    <path id="A1" class="st0" d="M116.4,28.6c0-2.8-2.3-4.3-4.3-4.3h-10.8c-2.7,0-4.3,2.2-4.3,4.3v4.3h8.6v-1.8h2.1v3.5s-4,0-6.4,0-4.3,2-4.3,4.3v8.8c0,2.5,2,4.3,4.3,4.3h15.1v-23.5h0ZM107.8,45.1h-2.1v-3.5h2.1s0,3.5,0,3.5Z"/>
    <path id="R__x2F__H" class="st0" d="M112.2,58.8h-6.5v-4.8s-10.8,0-10.8,0v-12.4c0-1.4-.7-2.7-1.8-3.5,1.6-1.1,1.8-2.5,1.8-3.4v-6.1c0-2.4-1.9-4.3-4.3-4.3h-15.1v32.3h8.6v-15h2.1s0,12.9,0,12.9c0,2.2,1.7,4.3,4.5,4.3h6.3v27.9h8.6v-21h2.1v21h8.7v-23.6c0-2.4-1.9-4.3-4.3-4.3h0ZM86.3,34.6h-2.1v-3.5h2.1v3.5Z"/>
    <g id="G">
      <path class="st0" d="M73.3,56.6V24.3s-15.1,0-15.1,0c-2.3,0-4.3,1.9-4.3,4.3v19.2c0,2.3,1.8,4.3,4.3,4.3h6.4v1.9h-10.8v6.9s15.1,0,15.1,0c2.5,0,4.3-2.1,4.3-4.3h0ZM64.7,45.1h-2.1v-14h2.1v14Z"/>
    </g>
  </g>
</svg>
</file>

<file path="public/images/hero-text.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 224 150">
  <!-- Generator: Adobe Illustrator 29.5.0, SVG Export Plug-In . SVG Version: 2.1.0 Build 137)  -->
  <defs>
    <style>
      .st0 {
        fill: #fff;
      }
    </style>
  </defs>
  <g id="GTA_Stack">
    <path id="O" class="st0" d="M154.7,93.5c0-2.4-1.5-4.6-4.3-4.6h-10.8c-2.7,0-4.3,2.1-4.3,4.6v19.4c0,2.1,1.6,4.3,4.3,4.3s10.8,0,10.9,0c2.1,0,4.2-1.7,4.2-4.3v-19.4h0ZM146.1,110.2h-2.1v-14.2h2.1v14.2Z"/>
    <path id="T" class="st0" d="M122.5,88.9h-8.6v1.9h-1.6v7h1.6s0,15.2,0,15.2c0,2.3,1.8,4.3,4.3,4.3h10.8c2.4,0,4.3-1.8,4.3-4.3v-13.4h-8.6v10.6h-2.1v-12.4h10.8v-7h-10.8v-1.9Z"/>
    <path id="U" class="st0" d="M102,110.2h-2.1v-21.3h-8.6v24c0,2.1,1.7,4.3,4.3,4.3s10.8,0,10.9,0c2.3,0,4.2-2.1,4.2-4.3v-24h-8.6v21.3h0Z"/>
    <path id="A" class="st0" d="M84.7,88.9h-10.8c-2.2,0-4.3,1.7-4.3,4.6v4.2h8.6v-1.8h2.1v3.6h-6.4c-2.6,0-4.3,2.1-4.3,4.6v8.8c0,2.5,1.9,4.3,4.3,4.3h15.1v-23.7c0-2.6-1.8-4.6-4.3-4.6h0ZM80.4,110.2h-2.1v-3.6h2.1v3.6Z"/>
    <g id="T1">
      <path class="st0" d="M182.2,82.5v-11.6h-8.6v8.9h-2.1v-10.7h10.8v-7h-10.8v-3.3h-8.6v3.3h-1.7v7h1.7s0,13.3,0,13.3c0,2,1.6,4.3,4.3,4.3h10.8c2.7,0,4.3-2.2,4.3-4.3h0Z"/>
    </g>
    <g id="F">
      <path class="st0" d="M144.5,58.9c-2.2,0-4.3,1.8-4.3,4.3v23.6h8.7v-12.2h10.7v-7h-10.7v-1.7h10.7v-7h-15.1Z"/>
    </g>
    <g id="E">
      <path class="st0" d="M138.1,82.5v-4.4h-8.7v1.7h-2.1v-3.5h10.8v-13.1c0-2.6-2.3-4.3-4.3-4.3h-10.8c-2.5,0-4.3,2.1-4.3,4.3v19.3c0,2.3,1.7,4.3,4.3,4.3h10.8c2.1,0,4.3-1.6,4.3-4.3h0ZM127.2,65.8h2.1v3.5h-2.1v-3.5Z"/>
    </g>
    <g id="T2">
      <path class="st0" d="M94.9,82.5v-11.6h-8.6v8.9h-2.1v-10.7h10.8v-7h-10.8v-3.3h-8.6v3.3h-1.7v7h1.7v13.3c0,2.1,1.7,4.3,4.3,4.3h10.8c2.6,0,4.3-2.1,4.3-4.3h0Z"/>
    </g>
    <path id="D" class="st0" d="M150.9,17.3v7h-6.4c-2,0-4.3,1.6-4.3,4.3v19.2c0,2.5,2,4.3,4.3,4.3h15.1V17.3h-8.6,0ZM150.9,45.1h-2.1v-14h2.1v14Z"/>
    <path id="N" class="st0" d="M138,28.6c0-2.1-1.7-4.3-4.3-4.3s-5.1.6-6.4,1.7v-1.7h-8.6v27.8h8.6v-21h2.1v21h8.7v-23.5h0Z"/>
    <path id="A1" class="st0" d="M116.4,28.6c0-2.8-2.3-4.3-4.3-4.3h-10.8c-2.7,0-4.3,2.2-4.3,4.3v4.3h8.6v-1.8h2.1v3.5s-4,0-6.4,0-4.3,2-4.3,4.3v8.8c0,2.5,2,4.3,4.3,4.3h15.1v-23.5h0ZM107.8,45.1h-2.1v-3.5h2.1s0,3.5,0,3.5Z"/>
    <path id="R__x2F__H" class="st0" d="M112.2,58.8h-6.5v-4.8s-10.8,0-10.8,0v-12.4c0-1.4-.7-2.7-1.8-3.5,1.6-1.1,1.8-2.5,1.8-3.4v-6.1c0-2.4-1.9-4.3-4.3-4.3h-15.1v32.3h8.6v-15h2.1s0,12.9,0,12.9c0,2.2,1.7,4.3,4.5,4.3h6.3v27.9h8.6v-21h2.1v21h8.7v-23.6c0-2.4-1.9-4.3-4.3-4.3h0ZM86.3,34.6h-2.1v-3.5h2.1v3.5Z"/>
    <g id="G">
      <path class="st0" d="M73.3,56.6V24.3s-15.1,0-15.1,0c-2.3,0-4.3,1.9-4.3,4.3v19.2c0,2.3,1.8,4.3,4.3,4.3h6.4v1.9h-10.8v6.9s15.1,0,15.1,0c2.5,0,4.3-2.1,4.3-4.3h0ZM64.7,45.1h-2.1v-14h2.1v14Z"/>
    </g>
  </g>
</svg>
</file>

<file path="public/images/kpr-logo-icon.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 567.01 408">
  <defs>
    <style>
      .cls-1 {
        fill: #fff;
      }
    </style>
  </defs>
  <g id="Layer_1-2" data-name="Layer 1">
    <g>
      <path class="cls-1" d="M291.49,0c-4.04,13.61-10.39,27.44-4.22,41.63,2.6,5.97,10.56,10.71,12.7,17.24l-36.51-16.61c-.29-1.39,5.49-20.27,6.65-22.23,4.13-6.99,15.87-12.74,20.39-20.03h1Z"/>
      <path class="cls-1" d="M339.41,120.7c2.02,1.84,9.3-11.51,11.96-11.97l5.96,42.27c-5.71,16.29-15.5,31.09-27.41,43.49l1.3,8.82-37.91,25.46-56.72,6.65,2.78-35.21-20.75-23.15h8.97c-9.21-11.26-12.18-25.98-14.99-39.94l22-57.32,4.12,28.28,7.38,3.4,16.07-27.57,46.86-17.02c1.32-1.17,3.48-9.58,3.23-11.33-.67-4.76-8.46-17.41-10.56-23.39-.48-1.38-1.97-4.03-.74-5.25l33.24,33.62c1.64,13.02-2.21,26.84-.8,39.7.73,6.64,5.36,13.62,6,20.44ZM281.51,216.47v-32.92l7.99,29.93c.73.66,10.09-4.19,10.01-6.48l-4.02-19.46,8.96,12.96c-3.02-15.88-3.81-19.62,14.56-16.04,5.33-.28,22.48-28.35,22.43-34.36-.03-3.42-5.36-11.5-7.61-14.36-3-3.82-10.21-8.71-12.09-11.35s-3.63-12.84-5.56-16.9c-2.81-5.92-8.52-10.39-10.74-16.72-2.58-.3-1.58,0-2.01,1.44-3.3,11.25-5.11,23.09-7.97,34.46l-8.99-17.95-2.22,1.28-7.73,15.67-9.5-23.91-15.7,25.69c-5,.14-20.88,6.35-23.23,10.2-3.51,5.76,8.39,33.21,13.48,38.39,5.14,5.22,17.86-.13,19.78,6.2s-8.12,26.35-7.8,34.21l17.95-28.92-4.83,29.47,2.08,1.25,12.74-1.79Z"/>
      <path class="cls-1" d="M366.36,212.48l18.28-11.16,32.62-26.26c-6.6.5-13.24,2.79-19.96,1.01,9.17-8.82,18.6-18.16,22.95-30.43-5.66,5.04-9.29,12.08-15.95,15.96,6.4-24.57,5.12-51.41-4.26-75.07-.42-1.06-.29-2.97-1.73-2.74,6.49,43.69-10.72,85.96-44.46,113.69-1.34,1.1-10.64,8.75-11.45,8,19.21-21.54,36.07-46.84,41.46-75.77,7.88-42.3-8.98-85.17-38.46-115.26-.15-.77.92-.6,1.5-.5,3.66.61,14.71,7.24,18.38,9.57,37.21,23.64,57.18,67.31,52,111.15,6.46-4.6,8.99-14.16,10.9-21.52,3.79-14.62,3.88-27.06,5.19-41.7.1-1.09.46-5.5,1.86-5.61,8.97,30.7,2.41,63.43-10.97,91.76,1.87.44,2.37-1.04,3.5-1.98,3.99-3.34,7.55-7.97,11.45-11.5l13.99-22.41c-.98,34.36-23.08,65.66-51.89,82.81-.24,1.8,2.17.9,3.23.74,11.45-1.82,24.39-8.66,34.2-14.71.67-.22.72.95.48,1.48-1.08,2.4-15.04,14.64-18.05,16.89-22.3,16.69-50.3,22.33-77.77,19.53l25.58-4.85,21.31-8.61c.03-.89-6.76-2.49-7.47-2.49h-16.47Z"/>
      <path class="cls-1" d="M185.18,212.48c-2.19.21-5.96,1.83-8.48,2.01l7.99,4.46,19.94,6.01,19.97,3.47c-37.1,4.32-72.94-8.61-96.82-37.4l25.42,11.51c3.34.73,6.95,2.18,10.27,2.71,1.06.17,3.47,1.06,3.23-.74-30.17-16.74-50.71-49.16-52.89-83.8l13.99,22.41,14.94,14.49c-2.91-9.03-7.01-17.74-9.47-26.94-5.83-21.74-7.16-44.14-.49-65.83l3.13,30.28c2.24,11.08,3.9,24.33,9.67,34.23.46.79,3.77,6.86,5.15,5.32-7.14-50.9,22.69-101.9,70.37-120.71l-22.25,31.63c-31.84,57.56-16.4,115.8,27.75,160.9-3.63-1.46-7.38-4.56-10.45-7-35.02-27.74-54.11-72.05-46.46-116.68l-5.7,14.74c-5.86,20.57-5.5,42.23-1.29,63.06-1.88,2.06-11.7-12.47-13.96-12.96,3.98,11,12.9,21.2,21.95,28.43-7.03,1.81-14.01-.68-20.95-1.01l34.62,27.25,17.28,10.16c-5.34.36-11.21-.49-16.47,0Z"/>
      <path class="cls-1" d="M105.81,353.14c3.76-4.26,7.6-8.89,4.95-14.94l-10.93,2.47c3.54-3.45,8.74-13.97,6.49-18.47-.46-.93-15.3-11.58-16.76-12.22s-2.06-1.03-3.68-.28c-1.08.5-11.22,9.07-11.79,10.23-1.58,3.22-7.23,30.74-7.24,34.68,0,2.08.56,1.83,2.34,1.33,1.43-.4,9.46-4.05,10.12-4.86,3-3.72,6.37-17.77,8.55-22.89,1.72-.25,1.06,2.36.97,3.46-.21,2.75-3.42,21.01-4.27,22.18L3.99,405l44.92-47.38-14.97,5.48c3.81-4.84,8.65-8.3,11.52-13.92,1.75-3.44,7.38-19.22,7.5-22.52.12-3.59-2.19-8.75-4.51-11.47l-13.5-8.94c9.54-.27,21.19,2.83,30.46,1.98,1.48-.14,2.87.8,2.48-1.48-23.58-15.37-46.96-31.53-67.89-50.38l59.88,22.94c1.47-10.15,6.58-23.88-6-28.42l-27.93-10.48c24.32,4.74,49.19,2.49,73.86,2.99-.44,1.63-3.49,1.16-5.39,2.08-16.23,7.83-19.79,32.02-16.07,47.78l29.51-24.38c2.32-2.48-.12-9.41,1.11-11.37.25-.4,6.99-2.96,8.51-3.96,8.63-5.63,15.1-13.87,22.26-21.14-2.04,10.84-10.65,19.67-10.99,30.91-4.01-1.57-10.98,5.24-11.95,8.52-.71,2.38,1.01,1.14,2.04,1.04,2.78-.25,5.73-.78,8.42-1.58l.5,1.99-26.96,20.48,30.95,30.92-10.97-2.49c-.6,10.29-.08,20.02,9.04,26.37l8.92,4.55h-32.94Z"/>
      <path class="cls-1" d="M552.03,237.43c-14.19,11.19-34.48,9.55-51.13,13.23-6.6,1.46-9.65,2.94-10.67,10.29-1.39,9.98-.89,21.24-1.08,31.33l75.86-21.93-22.26,12.15c-8.45,6.04-28.03,16.39-27.72,28.24.12,4.72,4.17,16.1,5.8,21.21,3.74,11.71,8.1,25.08,17.23,33.66l-14.96-5,43.92,47.38-95.42-57.76-5.39-28.01,9.01,15.42c1.6,1.32,24.18,11.11,26.41,11.52s1.1.31,1.04-1.02c-.33-7.04-3.8-22.4-7.69-28.25-7.77-11.69-23.66-14.29-35.76-19.63l12.03-3.59-.08-41.76c.57-3.45-8.71-4.51-5.93-6.96,1.37-1.2,9.04-6.21,10.49-6.48,15.27-2.84,40.96,1.23,57.89,0,6.3-.46,12.41-2.32,18.43-4.02Z"/>
      <path class="cls-1" d="M425.26,243.41l1,84.29c.99,5.21,9.06,2.35,11.98,0v-84.29h25.95c-9.07,15.08-3.27,35.25-5.15,52.21l-6.81,4.15,6.77,5.18.98,29.53c-6.03,6.62-15.82,14.64-25.23,14.71-1.12,0-2.78.56-2.51-1.02,4.54-.8,5.35-5.08,5.98-8.98-4.77-1.29-9.53,2.67-13.59,2.96-8.86.62-16.37-17.12-24.33-19.94l.02-1.44c1.19-1.41,2.94-2.64,3.52-4.47,1.47-4.61,1.29-53.49.47-60.43-.4-3.38-2.02-7.92-6.02-7.47.44-.88,3.17-4.98,3.5-4.98h23.46Z"/>
      <path class="cls-1" d="M394.31,243.41c-8.82,10.49,2.86,31.45-16.98,32.42,19.15,5.23,11.03,28.27,13.08,42.8.58,4.09,2.87,5.13,3.9,8.55-10.76,6.15-19.04,18.03-32.93,16.97.55-1.77,2.78-1,4.57-2.9,2.4-2.53,3.14-11.85,3.21-15.54.21-10.62.43-24.34.23-34.86-.19-10.06-3.8-12.84-13.01-15.52v57.36c0,1.15,3.25,5.29,2.99,5.48-12.6-.41-19.19-13.5-28.95-18.96,2.85-3.83,4.6-7.56,5.03-12.41.76-8.47.93-49.28-1.8-55.14-1.08-2.31-2.52-2.52-4.3-3.81-.07-.95,2.04-4.43,2.56-4.43h62.39ZM368.35,269.34v-15.46c0-3.34-9.34-4.18-11.98-3.49v14.46c1.13,2.29,10.71,6.39,11.98,4.49Z"/>
      <path class="cls-1" d="M155.73,243.41v52.37c0,3.75,11.71-1.77,13.02-3.16-1.33-10.08,2.93-35.85-3.51-43.3-.51-.59-1.71-.84-2.51-.95l1.99-4.97h28.95c-1.74,3.36-3.56,6.58-4,10.47-2.7,23.85,2.38,52.06-.44,76.37-2.79,13.49-20.47,20.19-32.5,20.4,4.37-4,11.97-11.69,11.97-17.96v-26.93c0-5.07-13.57,3.72-14.98,4.07-7.37,1.84-17.23-15.31-23.95-17.56l.02-1.44c8.57-8.21,3.41-22.13,5.2-32.72.8-4.72,4.69-9.93,5.75-14.7h14.97Z"/>
      <path class="cls-1" d="M303.47,278.32c.23-1.45-1.73-1.35-2.78-1.7-7.29-2.36-31.15-5.77-32.94-13.98-1.2-5.51,1.77-13.2-6.19-14.75l4.51-4.48,54.38-.02c-.94,4.3,2.58,7.72,2.95,11.59.84,8.94-10.25,10.56-16.43,13.34-1.89-2.38,1.43-1.44,2.07-3.87,3.54-13.32-10.55-15.37-20.53-14.08-.42,4.59.85,10.96,3.99,14.48,6.85,7.69,24.67,7.49,25.97,20.44h-28.45l-1.5,1.5v34.92c0,4.99,11.25,4.01,12.77-1.21,1.35-4.64,1.82-24.62-5.78-25.25,5.95-9.79,22.18-3.12,31.94-3.96-7.07,8.12-4.37,19.84-5.13,29.78-15.31,3.95-23.25,22.34-40.79,21.08,2.75-4.35-1.28-9.01-4.02-12.44-3.41-4.28-9.39-9.95-14.95-10.51-.44-.41,2.9-3.13,3.41-4.06,3.19-5.76,2.33-29.17-1.41-35.14-.58-.92-2.37-.16-2.01-1.69h40.93Z"/>
      <path class="cls-1" d="M259.55,287.3c-12.36-.13-23.04,7.94-33.73,13.17.21,8.18-2.81,18.61,4.76,24.24-10.32,7.96-18.84,20.22-32.92,21.44,1.43-2.16,3.9-2.3,5.21-5.25.98-2.21,1.61-6.65,1.8-9.17,1.88-24.06-1.48-50.53-.04-74.85-.32-3.73-1.87-7.82-5.99-8.5,1.32-3.03,1.99-4.54,5.44-5.01,8.94-1.22,33.63-.85,43.02,0,17.52,1.59,11.31,32.3,12.44,43.94ZM225.6,290.29c3.07-.39,11.35-4.53,12.46-7s.93-28.2-.22-30.67c-1.87-4.01-8.54-1.65-12.24-2.23v39.9Z"/>
      <path class="cls-1" d="M320.35,145.73c2.12,4.78,1.07,12.07-2.05,16.23-5.21,6.94-22.88,2.61-30.8,2.63-.55-2.38.4-1.61,1.3-2.22,5.97-4.07,12.63-8.5,18.99-11.91,2.28-1.22,10.66-6.02,12.56-4.73Z"/>
      <path class="cls-1" d="M272.52,163.59c-14.64,3.23-27.46-.91-26.47-17.96h3.03s23.44,17.96,23.44,17.96Z"/>
    </g>
  </g>
</svg>
</file>

<file path="public/images/kpr-logo-text.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 567.01 175.56">
  <defs>
    <style>
      .cls-1 {
        fill: #fff;
      }
    </style>
  </defs>
  <g id="Layer_1-2" data-name="Layer 1">
    <g>
      <path class="cls-1" d="M105.81,120.71c3.76-4.26,7.6-8.89,4.95-14.94l-10.93,2.47c3.54-3.45,8.74-13.97,6.49-18.47-.46-.93-15.3-11.58-16.76-12.22s-2.06-1.03-3.68-.28c-1.08.5-11.22,9.07-11.79,10.23-1.58,3.22-7.23,30.74-7.24,34.68,0,2.08.56,1.83,2.34,1.33,1.43-.4,9.46-4.05,10.12-4.86,3-3.72,6.37-17.77,8.55-22.89,1.72-.25,1.06,2.36.97,3.46-.21,2.75-3.42,21.01-4.27,22.18L3.99,172.57l44.92-47.38-14.97,5.48c3.81-4.84,8.65-8.3,11.52-13.92,1.75-3.44,7.38-19.22,7.5-22.52.12-3.59-2.19-8.75-4.51-11.47l-13.5-8.94c9.54-.27,21.19,2.83,30.46,1.98,1.48-.14,2.87.8,2.48-1.48C44.31,58.96,20.92,42.8,0,23.95l59.88,22.94c1.47-10.15,6.58-23.88-6-28.42L25.96,7.99c24.32,4.74,49.19,2.49,73.86,2.99-.44,1.63-3.49,1.16-5.39,2.08-16.23,7.83-19.79,32.02-16.07,47.78l29.51-24.38c2.32-2.48-.12-9.41,1.11-11.37.25-.4,6.99-2.96,8.51-3.96,8.63-5.63,15.1-13.87,22.26-21.14-2.04,10.84-10.65,19.67-10.99,30.91-4.01-1.57-10.98,5.24-11.95,8.52-.71,2.38,1.01,1.14,2.04,1.04,2.78-.25,5.73-.78,8.42-1.58l.5,1.99-26.96,20.48,30.95,30.92-10.97-2.49c-.6,10.29-.08,20.02,9.04,26.37l8.92,4.55h-32.94Z"/>
      <path class="cls-1" d="M552.03,5c-14.19,11.19-34.48,9.55-51.13,13.23-6.6,1.46-9.65,2.94-10.67,10.29-1.39,9.98-.89,21.24-1.08,31.33l75.86-21.93-22.26,12.15c-8.45,6.04-28.03,16.39-27.72,28.24.12,4.72,4.17,16.1,5.8,21.21,3.74,11.71,8.1,25.08,17.23,33.66l-14.96-5,43.92,47.38-95.42-57.76-5.39-28.01,9.01,15.42c1.6,1.32,24.18,11.11,26.41,11.52s1.1.31,1.04-1.02c-.33-7.04-3.8-22.4-7.69-28.25-7.77-11.69-23.66-14.29-35.76-19.63l12.03-3.59-.08-41.76c.57-3.45-8.71-4.51-5.93-6.96,1.37-1.2,9.04-6.21,10.49-6.48,15.27-2.84,40.96,1.23,57.89,0,6.3-.46,12.41-2.32,18.43-4.02Z"/>
      <path class="cls-1" d="M425.26,10.97l1,84.29c.99,5.21,9.06,2.35,11.98,0V10.97h25.95c-9.07,15.08-3.27,35.25-5.15,52.21l-6.81,4.15,6.77,5.18.98,29.53c-6.03,6.62-15.82,14.64-25.23,14.71-1.12,0-2.78.56-2.51-1.02,4.54-.8,5.35-5.08,5.98-8.98-4.77-1.29-9.53,2.67-13.59,2.96-8.86.62-16.37-17.12-24.33-19.94l.02-1.44c1.19-1.41,2.94-2.64,3.52-4.47,1.47-4.61,1.29-53.49.47-60.43-.4-3.38-2.02-7.92-6.02-7.47.44-.88,3.17-4.98,3.5-4.98h23.46Z"/>
      <path class="cls-1" d="M394.31,10.97c-8.82,10.49,2.86,31.45-16.98,32.42,19.15,5.23,11.03,28.27,13.08,42.8.58,4.09,2.87,5.13,3.9,8.55-10.76,6.15-19.04,18.03-32.93,16.97.55-1.77,2.78-1,4.57-2.9,2.4-2.53,3.14-11.85,3.21-15.54.21-10.62.43-24.34.23-34.86-.19-10.06-3.8-12.84-13.01-15.52v57.36c0,1.15,3.25,5.29,2.99,5.48-12.6-.41-19.19-13.5-28.95-18.96,2.85-3.83,4.6-7.56,5.03-12.41.76-8.47.93-49.28-1.8-55.14-1.08-2.31-2.52-2.52-4.3-3.81-.07-.95,2.04-4.43,2.56-4.43h62.39ZM368.35,36.91v-15.46c0-3.34-9.34-4.18-11.98-3.49v14.46c1.13,2.29,10.71,6.39,11.98,4.49Z"/>
      <path class="cls-1" d="M155.73,10.97v52.37c0,3.75,11.71-1.77,13.02-3.16-1.33-10.08,2.93-35.85-3.51-43.3-.51-.59-1.71-.84-2.51-.95l1.99-4.97h28.95c-1.74,3.36-3.56,6.58-4,10.47-2.7,23.85,2.38,52.06-.44,76.37-2.79,13.49-20.47,20.19-32.5,20.4,4.37-4,11.97-11.69,11.97-17.96v-26.93c0-5.07-13.57,3.72-14.98,4.07-7.37,1.84-17.23-15.31-23.95-17.56l.02-1.44c8.57-8.21,3.41-22.13,5.2-32.72.8-4.72,4.69-9.93,5.75-14.7h14.97Z"/>
      <path class="cls-1" d="M303.47,45.89c.23-1.45-1.73-1.35-2.78-1.7-7.29-2.36-31.15-5.77-32.94-13.98-1.2-5.51,1.77-13.2-6.19-14.75l4.51-4.48,54.38-.02c-.94,4.3,2.58,7.72,2.95,11.59.84,8.94-10.25,10.56-16.43,13.34-1.89-2.38,1.43-1.44,2.07-3.87,3.54-13.32-10.55-15.37-20.53-14.08-.42,4.59.85,10.96,3.99,14.48,6.85,7.69,24.67,7.49,25.97,20.44h-28.45l-1.5,1.5v34.92c0,4.99,11.25,4.01,12.77-1.21,1.35-4.64,1.82-24.62-5.78-25.25,5.95-9.79,22.18-3.12,31.94-3.96-7.07,8.12-4.37,19.84-5.13,29.78-15.31,3.95-23.25,22.34-40.79,21.08,2.75-4.35-1.28-9.01-4.02-12.44-3.41-4.28-9.39-9.95-14.95-10.51-.44-.41,2.9-3.13,3.41-4.06,3.19-5.76,2.33-29.17-1.41-35.14-.58-.92-2.37-.16-2.01-1.69h40.93Z"/>
      <path class="cls-1" d="M259.55,54.87c-12.36-.13-23.04,7.94-33.73,13.17.21,8.18-2.81,18.61,4.76,24.24-10.32,7.96-18.84,20.22-32.92,21.44,1.43-2.16,3.9-2.3,5.21-5.25.98-2.21,1.61-6.65,1.8-9.17,1.88-24.06-1.48-50.53-.04-74.85-.32-3.73-1.87-7.82-5.99-8.5,1.32-3.03,1.99-4.54,5.44-5.01,8.94-1.22,33.63-.85,43.02,0,17.52,1.59,11.31,32.3,12.44,43.94ZM225.6,57.86c3.07-.39,11.35-4.53,12.46-7s.93-28.2-.22-30.67c-1.87-4.01-8.54-1.65-12.24-2.23v39.9Z"/>
    </g>
  </g>
</svg>
</file>

<file path="public/images/kpr-logo.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_2" data-name="Layer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 339.39 235.43">
  <defs>
    <style>
      .cls-1 {
        fill: #fff;
      }
    </style>
  </defs>
  <g id="Layer_1-2" data-name="Layer 1">
    <g>
      <path class="cls-1" d="M177.68,0c-4.04,13.61-10.39,27.44-4.22,41.63,2.6,5.97,10.56,10.71,12.7,17.24l-36.51-16.61c-.29-1.39,5.49-20.27,6.65-22.23,4.13-6.99,15.87-12.74,20.39-20.03h1Z"/>
      <path class="cls-1" d="M225.6,120.7c2.02,1.84,9.3-11.51,11.96-11.97l5.96,42.27c-5.71,16.29-15.5,31.09-27.41,43.49l1.3,8.82-37.91,25.46-56.72,6.65,2.78-35.21-20.75-23.15h8.97c-9.21-11.26-12.18-25.98-14.99-39.94l22-57.32,4.12,28.28,7.38,3.4,16.07-27.57,46.86-17.02c1.32-1.17,3.48-9.58,3.23-11.33-.67-4.76-8.46-17.41-10.56-23.39-.48-1.38-1.97-4.03-.74-5.25l33.24,33.62c1.64,13.02-2.21,26.84-.8,39.7.73,6.64,5.36,13.62,6,20.44ZM167.7,216.47v-32.92l7.99,29.93c.73.66,10.09-4.19,10.01-6.48l-4.02-19.46,8.96,12.96c-3.02-15.88-3.81-19.62,14.56-16.04,5.33-.28,22.48-28.35,22.43-34.36-.03-3.42-5.36-11.5-7.61-14.36-3-3.82-10.21-8.71-12.09-11.35s-3.63-12.84-5.56-16.9c-2.81-5.92-8.52-10.39-10.74-16.72-2.58-.3-1.58,0-2.01,1.44-3.3,11.25-5.11,23.09-7.97,34.46l-8.99-17.95-2.22,1.28-7.73,15.67-9.5-23.91-15.7,25.69c-5,.14-20.88,6.35-23.23,10.2-3.51,5.76,8.39,33.21,13.48,38.39,5.14,5.22,17.86-.13,19.78,6.2s-8.12,26.35-7.8,34.21l17.95-28.92-4.83,29.47,2.08,1.25,12.74-1.79Z"/>
      <path class="cls-1" d="M252.55,212.48l18.28-11.16,32.62-26.26c-6.6.5-13.24,2.79-19.96,1.01,9.17-8.82,18.6-18.16,22.95-30.43-5.66,5.04-9.29,12.08-15.95,15.96,6.4-24.57,5.12-51.41-4.26-75.07-.42-1.06-.29-2.97-1.73-2.74,6.49,43.69-10.72,85.96-44.46,113.69-1.34,1.1-10.64,8.75-11.45,8,19.21-21.54,36.07-46.84,41.46-75.77,7.88-42.3-8.98-85.17-38.46-115.26-.15-.77.92-.6,1.5-.5,3.66.61,14.71,7.24,18.38,9.57,37.21,23.64,57.18,67.31,52,111.15,6.46-4.6,8.99-14.16,10.9-21.52,3.79-14.62,3.88-27.06,5.19-41.7.1-1.09.46-5.5,1.86-5.61,8.97,30.7,2.41,63.43-10.97,91.76,1.87.44,2.37-1.04,3.5-1.98,3.99-3.34,7.55-7.97,11.45-11.5l13.99-22.41c-.98,34.36-23.08,65.66-51.89,82.81-.24,1.8,2.17.9,3.23.74,11.45-1.82,24.39-8.66,34.2-14.71.67-.22.72.95.48,1.48-1.08,2.4-15.04,14.64-18.05,16.89-22.3,16.69-50.3,22.33-77.77,19.53l25.58-4.85,21.31-8.61c.03-.89-6.76-2.49-7.47-2.49h-16.47Z"/>
      <path class="cls-1" d="M71.36,212.48c-2.19.21-5.96,1.83-8.48,2.01l7.99,4.46,19.94,6.01,19.97,3.47c-37.1,4.32-72.94-8.61-96.82-37.4l25.42,11.51c3.34.73,6.95,2.18,10.27,2.71,1.06.17,3.47,1.06,3.23-.74C22.72,187.78,2.18,155.35,0,120.71l13.99,22.41,14.94,14.49c-2.91-9.03-7.01-17.74-9.47-26.94-5.83-21.74-7.16-44.14-.49-65.83l3.13,30.28c2.24,11.08,3.9,24.33,9.67,34.23.46.79,3.77,6.86,5.15,5.32-7.14-50.9,22.69-101.9,70.37-120.71l-22.25,31.63c-31.84,57.56-16.4,115.8,27.75,160.9-3.63-1.46-7.38-4.56-10.45-7-35.02-27.74-54.11-72.05-46.46-116.68l-5.7,14.74c-5.86,20.57-5.5,42.23-1.29,63.06-1.88,2.06-11.7-12.47-13.96-12.96,3.98,11,12.9,21.2,21.95,28.43-7.03,1.81-14.01-.68-20.95-1.01l34.62,27.25,17.28,10.16c-5.34.36-11.21-.49-16.47,0Z"/>
      <path class="cls-1" d="M206.54,145.73c2.12,4.78,1.07,12.07-2.05,16.23-5.21,6.94-22.88,2.61-30.8,2.63-.55-2.38.4-1.61,1.3-2.22,5.97-4.07,12.63-8.5,18.99-11.91,2.28-1.22,10.66-6.02,12.56-4.73Z"/>
      <path class="cls-1" d="M158.71,163.59c-14.64,3.23-27.46-.91-26.47-17.96h3.03s23.44,17.96,23.44,17.96Z"/>
    </g>
  </g>
</svg>
</file>

<file path="public/images/mask.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 224 150">
  <!-- Generator: Adobe Illustrator 29.5.0, SVG Export Plug-In . SVG Version: 2.1.0 Build 137)  -->
  <defs>
    <style>
      .st0 {
        fill: #fff;
      }
    </style>
  </defs>
  <g id="GTA_Stack">
    <path id="O" class="st0" d="M154.7,93.5c0-2.4-1.5-4.6-4.3-4.6h-10.8c-2.7,0-4.3,2.1-4.3,4.6v19.4c0,2.1,1.6,4.3,4.3,4.3s10.8,0,10.9,0c2.1,0,4.2-1.7,4.2-4.3v-19.4h0ZM146.1,110.2h-2.1v-14.2h2.1v14.2Z"/>
    <path id="T" class="st0" d="M122.5,88.9h-8.6v1.9h-1.6v7h1.6s0,15.2,0,15.2c0,2.3,1.8,4.3,4.3,4.3h10.8c2.4,0,4.3-1.8,4.3-4.3v-13.4h-8.6v10.6h-2.1v-12.4h10.8v-7h-10.8v-1.9Z"/>
    <path id="U" class="st0" d="M102,110.2h-2.1v-21.3h-8.6v24c0,2.1,1.7,4.3,4.3,4.3s10.8,0,10.9,0c2.3,0,4.2-2.1,4.2-4.3v-24h-8.6v21.3h0Z"/>
    <path id="A" class="st0" d="M84.7,88.9h-10.8c-2.2,0-4.3,1.7-4.3,4.6v4.2h8.6v-1.8h2.1v3.6h-6.4c-2.6,0-4.3,2.1-4.3,4.6v8.8c0,2.5,1.9,4.3,4.3,4.3h15.1v-23.7c0-2.6-1.8-4.6-4.3-4.6h0ZM80.4,110.2h-2.1v-3.6h2.1v3.6Z"/>
    <g id="T1">
      <path class="st0" d="M182.2,82.5v-11.6h-8.6v8.9h-2.1v-10.7h10.8v-7h-10.8v-3.3h-8.6v3.3h-1.7v7h1.7s0,13.3,0,13.3c0,2,1.6,4.3,4.3,4.3h10.8c2.7,0,4.3-2.2,4.3-4.3h0Z"/>
    </g>
    <g id="F">
      <path class="st0" d="M144.5,58.9c-2.2,0-4.3,1.8-4.3,4.3v23.6h8.7v-12.2h10.7v-7h-10.7v-1.7h10.7v-7h-15.1Z"/>
    </g>
    <g id="E">
      <path class="st0" d="M138.1,82.5v-4.4h-8.7v1.7h-2.1v-3.5h10.8v-13.1c0-2.6-2.3-4.3-4.3-4.3h-10.8c-2.5,0-4.3,2.1-4.3,4.3v19.3c0,2.3,1.7,4.3,4.3,4.3h10.8c2.1,0,4.3-1.6,4.3-4.3h0ZM127.2,65.8h2.1v3.5h-2.1v-3.5Z"/>
    </g>
    <g id="T2">
      <path class="st0" d="M94.9,82.5v-11.6h-8.6v8.9h-2.1v-10.7h10.8v-7h-10.8v-3.3h-8.6v3.3h-1.7v7h1.7v13.3c0,2.1,1.7,4.3,4.3,4.3h10.8c2.6,0,4.3-2.1,4.3-4.3h0Z"/>
    </g>
    <path id="D" class="st0" d="M150.9,17.3v7h-6.4c-2,0-4.3,1.6-4.3,4.3v19.2c0,2.5,2,4.3,4.3,4.3h15.1V17.3h-8.6,0ZM150.9,45.1h-2.1v-14h2.1v14Z"/>
    <path id="N" class="st0" d="M138,28.6c0-2.1-1.7-4.3-4.3-4.3s-5.1.6-6.4,1.7v-1.7h-8.6v27.8h8.6v-21h2.1v21h8.7v-23.5h0Z"/>
    <path id="A1" class="st0" d="M116.4,28.6c0-2.8-2.3-4.3-4.3-4.3h-10.8c-2.7,0-4.3,2.2-4.3,4.3v4.3h8.6v-1.8h2.1v3.5s-4,0-6.4,0-4.3,2-4.3,4.3v8.8c0,2.5,2,4.3,4.3,4.3h15.1v-23.5h0ZM107.8,45.1h-2.1v-3.5h2.1s0,3.5,0,3.5Z"/>
    <path id="R__x2F__H" class="st0" d="M112.2,58.8h-6.5v-4.8s-10.8,0-10.8,0v-12.4c0-1.4-.7-2.7-1.8-3.5,1.6-1.1,1.8-2.5,1.8-3.4v-6.1c0-2.4-1.9-4.3-4.3-4.3h-15.1v32.3h8.6v-15h2.1s0,12.9,0,12.9c0,2.2,1.7,4.3,4.5,4.3h6.3v27.9h8.6v-21h2.1v21h8.7v-23.6c0-2.4-1.9-4.3-4.3-4.3h0ZM86.3,34.6h-2.1v-3.5h2.1v3.5Z"/>
    <g id="G">
      <path class="st0" d="M73.3,56.6V24.3s-15.1,0-15.1,0c-2.3,0-4.3,1.9-4.3,4.3v19.2c0,2.3,1.8,4.3,4.3,4.3h6.4v1.9h-10.8v6.9s15.1,0,15.1,0c2.5,0,4.3-2.1,4.3-4.3h0ZM64.7,45.1h-2.1v-14h2.1v14Z"/>
    </g>
  </g>
</svg>
</file>

<file path="public/images/menu.svg">
<svg width="450" height="450" viewBox="0 0 450 450" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="344" height="75" transform="translate(53 120)" fill="white"/>
<rect width="344" height="75" transform="translate(53 120)" fill="white"/>
<rect width="344" height="75" transform="translate(53 255)" fill="white"/>
<rect width="344" height="75" transform="translate(53 255)" fill="white"/>
</svg>
</file>

<file path="public/images/nav-logo.svg">
<svg width="46" height="35" viewBox="0 0 46 35" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_9055_52)">
<path d="M46.2661 0.800781H34.7236V34.4008H46.2661V0.800781Z" fill="white"/>
<path d="M33.9162 0.800781L17.3358 34.4008L0.776855 0.800781H12.3139L17.3332 11.5445L22.3766 0.800781H33.9162Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_9055_52">
<rect width="46" height="35" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="public/images/play.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#6e6a6b" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather feather-play"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>
</file>

<file path="public/images/ps-logo.svg">
<svg width="93" height="20" viewBox="0 0 93 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_15840_6239)">
<mask id="mask0_15840_6239" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="93" height="21">
<path d="M92.51 0.5H0V20.5H92.51V0.5Z" fill="white"/>
</mask>
<g mask="url(#mask0_15840_6239)">
<path d="M56.9502 16.0002C58.7302 16.0002 60.1802 14.5602 60.1802 12.7702V7.22023C60.1802 6.15023 61.0502 5.28023 62.1202 5.28023H68.3802C68.3802 5.28023 68.4702 5.24023 68.4702 5.19023V4.08023C68.4702 4.08023 68.4302 3.99023 68.3802 3.99023H60.8402C59.0602 3.99023 57.6102 5.43023 57.6102 7.22023V12.7702C57.6102 13.8402 56.7402 14.7102 55.6702 14.7102H49.5002C49.5002 14.7102 49.4102 14.7502 49.4102 14.8002V15.9102C49.4102 15.9102 49.4502 16.0002 49.5002 16.0002H56.9502Z" fill="white"/>
<path d="M71.0491 8.51V4.09C71.0491 4.09 71.0891 4 71.1391 4H88.1791C88.1791 4 88.2691 4.04 88.2691 4.09V5.2C88.2691 5.2 88.2291 5.29 88.1791 5.29H73.6991C73.6991 5.29 73.6091 5.33 73.6091 5.38V8.26C73.6091 8.77 74.0191 9.18 74.5291 9.18H85.3091C87.1991 9.18 88.7191 10.71 88.7191 12.59C88.7191 14.47 87.1891 16 85.3091 16H71.1291C71.1291 16 71.0391 15.96 71.0391 15.91V14.8C71.0391 14.8 71.0791 14.71 71.1291 14.71H84.0291C85.2091 14.71 86.1591 13.76 86.1591 12.58C86.1591 11.4 85.1891 10.44 84.0091 10.44H72.9891C71.9191 10.44 71.0491 9.57 71.0491 8.5V8.51Z" fill="white"/>
<path d="M45.7401 9.17C46.8101 9.17 47.6801 8.3 47.6801 7.23C47.6801 6.16 46.8101 5.29 45.7401 5.29H32.6701C32.6701 5.29 32.5801 5.25 32.5801 5.2V4.09C32.5801 4.09 32.6201 4 32.6701 4H47.0301C48.8101 4 50.2601 5.44 50.2601 7.23C50.2601 9.02 48.8201 10.46 47.0301 10.46H37.1001C36.0301 10.46 35.1601 11.33 35.1601 12.4V15.92C35.1601 15.92 35.1201 16.01 35.0701 16.01H32.6801C32.6801 16.01 32.5901 15.97 32.5901 15.92V12.4C32.5901 10.62 34.0301 9.17 35.8201 9.17H45.7501H45.7401Z" fill="white"/>
<path d="M9.68945 0V18.66L13.9194 20V4.35C13.9194 3.61 14.2494 3.12 14.7794 3.29C15.4694 3.48 15.5994 4.16 15.5994 4.89V11.14C18.2294 12.41 20.2994 11.14 20.2994 7.78C20.2994 4.42 19.0894 2.82 15.5094 1.59C14.0994 1.12 11.4894 0.33 9.68945 0Z" fill="white"/>
<path d="M14.7188 17.2696L21.5087 14.8496C22.2787 14.5696 22.3988 14.1796 21.7688 13.9796C21.1388 13.7696 20.0087 13.8296 19.2387 14.1096L14.7188 15.6996V13.1596L14.9787 13.0696C14.9787 13.0696 16.2887 12.6096 18.1287 12.4096C19.9687 12.2096 22.2187 12.4396 23.9887 13.0996C25.9787 13.7296 26.2088 14.6596 25.6988 15.2996C25.1888 15.9396 23.9488 16.3996 23.9488 16.3996L14.7287 19.7096V17.2696H14.7188Z" fill="white"/>
<path d="M1.93945 17.0095C-0.100542 16.4395 -0.440542 15.2395 0.489458 14.5395C1.34945 13.9095 2.80945 13.4295 2.80945 13.4295L8.85945 11.2695V13.7295L4.50945 15.2895C3.73945 15.5695 3.61945 15.9495 4.23945 16.1595C4.86945 16.3695 5.98945 16.3095 6.76945 16.0295L8.85945 15.2795V17.4695C8.71945 17.4895 8.56945 17.5195 8.43945 17.5395C6.34945 17.8895 4.12945 17.7395 1.93945 17.0195V17.0095Z" fill="white"/>
<path d="M24.2598 18C24.8498 18 25.2598 18.44 25.2598 19C25.2598 19.56 24.8598 20 24.2598 20C23.6598 20 23.2598 19.56 23.2598 19C23.2598 18.44 23.6698 18 24.2598 18ZM24.2598 19.85C24.7598 19.85 25.0998 19.47 25.0998 19C25.0998 18.53 24.7698 18.15 24.2598 18.15C23.7498 18.15 23.4198 18.53 23.4198 19C23.4198 19.47 23.7498 19.85 24.2598 19.85ZM23.8598 18.42H24.3198C24.5298 18.42 24.6898 18.48 24.6898 18.72C24.6898 18.86 24.6198 18.96 24.4798 19C24.5598 19.02 24.6098 19.08 24.6498 19.21C24.6898 19.34 24.7298 19.46 24.7598 19.57H24.5498C24.5198 19.48 24.4798 19.34 24.4598 19.26C24.4298 19.13 24.3898 19.08 24.2098 19.08H24.0698V19.57H23.8598V18.41V18.42ZM24.0698 18.94H24.2498C24.3998 18.94 24.4898 18.88 24.4898 18.75C24.4898 18.59 24.3798 18.57 24.2698 18.57H24.0698V18.94Z" fill="white"/>
<path d="M91.3295 14.94H91.5095C91.6595 14.94 91.7495 14.88 91.7495 14.75C91.7495 14.59 91.6395 14.57 91.5295 14.57H91.3295V14.94ZM91.1195 14.42H91.5795C91.7895 14.42 91.9495 14.48 91.9495 14.72C91.9495 14.86 91.8795 14.96 91.7395 15C91.8195 15.02 91.8695 15.08 91.9095 15.21C91.9495 15.34 91.9895 15.46 92.0195 15.57H91.8095C91.7795 15.48 91.7395 15.34 91.7195 15.26C91.6895 15.13 91.6495 15.08 91.4695 15.08H91.3295V15.57H91.1195V14.41V14.42ZM91.5195 15.85C92.0195 15.85 92.3595 15.47 92.3595 15C92.3595 14.53 92.0195 14.15 91.5195 14.15C91.0195 14.15 90.6795 14.53 90.6795 15C90.6795 15.47 91.0095 15.85 91.5195 15.85ZM91.5195 14C92.1095 14 92.5195 14.44 92.5195 15C92.5195 15.56 92.1195 16 91.5195 16C90.9195 16 90.5195 15.56 90.5195 15C90.5195 14.44 90.9295 14 91.5195 14Z" fill="white"/>
</g>
</g>
<defs>
<clipPath id="clip0_15840_6239">
<rect width="93" height="20" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="public/images/x-logo.svg">
<svg width="158" height="20" viewBox="0 0 158 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_15840_6253)">
<mask id="mask0_15840_6253" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="158" height="20">
<path d="M157.82 0H0.5V20H157.82V0Z" fill="white"/>
</mask>
<g mask="url(#mask0_15840_6253)">
<path d="M10.5 8.02C10.5 8.02 10.53 8.02 10.53 8.04C13.52 10.31 18.64 15.94 17.08 17.53C15.32 19.07 13.02 20 10.5 20C7.98 20 5.68 19.07 3.92 17.53C2.36 15.94 7.48 10.31 10.47 8.04C10.47 8.04 10.49 8.02 10.5 8.02ZM15.71 1.46C14.18 0.55 12.52 0 10.5 0C8.48 0 6.82 0.55 5.29 1.46C5.27 1.47 5.26 1.49 5.27 1.51C5.27 1.53 5.3 1.53 5.32 1.53C7.26 1.11 10.2 2.78 10.48 2.95H10.5C10.5 2.95 10.51 2.95 10.52 2.95C10.8 2.78 13.74 1.11 15.68 1.53C15.7 1.53 15.72 1.53 15.73 1.51C15.73 1.49 15.73 1.47 15.71 1.46ZM3.5 2.87C3.5 2.87 3.47 2.89 3.46 2.9C1.63 4.71 0.5 7.22 0.5 10C0.5 12.28 1.26 14.38 2.54 16.06C2.55 16.08 2.58 16.09 2.59 16.08C2.61 16.08 2.61 16.05 2.6 16.03C1.84 13.67 5.74 7.96 7.75 5.56C7.75 5.56 7.76 5.54 7.76 5.53C7.76 5.52 7.76 5.51 7.74 5.5C4.7 2.46 3.67 2.78 3.5 2.87ZM13.25 5.49C13.25 5.49 13.23 5.51 13.23 5.52C13.23 5.53 13.23 5.54 13.24 5.55C15.25 7.95 19.15 13.66 18.39 16.02C18.39 16.04 18.39 16.06 18.4 16.07C18.42 16.08 18.44 16.07 18.45 16.05C19.73 14.37 20.49 12.27 20.49 9.99C20.49 7.22 19.36 4.7 17.53 2.89C17.52 2.88 17.5 2.86 17.49 2.86C17.32 2.77 16.29 2.45 13.24 5.49H13.25ZM35.3 16.16H33.25L29.73 11.31L26.21 16.16H24.16L28.71 9.9L24.52 4.14H26.57L29.74 8.5L32.91 4.14H34.96L30.77 9.9L35.32 16.16H35.3ZM45.92 12.74C45.92 13.8 45.57 14.64 44.88 15.24C44.19 15.85 43.19 16.15 41.9 16.15H36.26V10.8H33.58L34.69 9.27H36.25V4.14H41.65C42.86 4.14 43.8 4.43 44.45 5C45.1 5.57 45.42 6.34 45.42 7.27C45.42 8.43 44.9 9.3 43.86 9.88C44.53 10.14 45.04 10.52 45.38 11.01C45.73 11.51 45.9 12.09 45.9 12.75L45.92 12.74ZM38.1 9.27H41.55C42.24 9.27 42.77 9.11 43.12 8.81C43.47 8.5 43.64 8.04 43.64 7.42C43.64 6.89 43.46 6.47 43.1 6.17C42.74 5.87 42.22 5.72 41.55 5.72H38.1V9.27ZM44.07 12.71C44.07 12.08 43.88 11.6 43.5 11.28C43.12 10.96 42.55 10.8 41.79 10.8H38.09V14.57H41.79C42.52 14.57 43.09 14.41 43.48 14.09C43.87 13.77 44.06 13.3 44.06 12.71H44.07ZM58.27 10.15C58.27 11.08 58.14 11.93 57.87 12.69C57.6 13.44 57.2 14.12 56.67 14.7C56.13 15.28 55.5 15.72 54.8 16C54.09 16.29 53.29 16.43 52.42 16.43C51.55 16.43 50.73 16.28 50.02 16C49.31 15.71 48.69 15.27 48.16 14.7C47.62 14.13 47.21 13.46 46.94 12.7C46.67 11.95 46.53 11.09 46.53 10.16C46.53 9.23 46.67 8.38 46.94 7.62C47.21 6.86 47.62 6.18 48.16 5.6C48.69 5.03 49.31 4.59 50.02 4.31C50.73 4.02 51.53 3.88 52.42 3.88C53.31 3.88 54.09 4.02 54.8 4.31C55.51 4.6 56.14 5.03 56.67 5.6C57.2 6.18 57.61 6.86 57.87 7.62C58.14 8.38 58.27 9.23 58.27 10.16V10.15ZM48.44 10.15C48.44 11.56 48.81 12.7 49.53 13.52C50.24 14.35 51.21 14.78 52.41 14.78C53.61 14.78 54.58 14.36 55.29 13.52C56 12.71 56.36 11.57 56.36 10.15C56.36 8.73 56 7.58 55.29 6.76C54.57 5.94 53.6 5.52 52.41 5.52C51.22 5.52 50.25 5.94 49.53 6.76C48.81 7.61 48.44 8.75 48.44 10.15ZM64.07 9.9L68.26 4.14H66.21L63.04 8.5L59.87 4.14H57.82L62.01 9.9L57.46 16.16H59.51L63.03 11.31L66.55 16.16H68.6L64.05 9.9H64.07ZM83.9 5.79V9.27H89.87V10.8H83.9V14.5H90.65V16.15H82.06V4.14H90.65V5.79H83.9ZM79.68 10.59C79.08 10.04 78.08 9.61 76.72 9.32L75.68 9.1C74.69 8.89 74 8.63 73.63 8.33C73.27 8.05 73.08 7.64 73.08 7.1C73.08 6.56 73.29 6.16 73.7 5.87C74.11 5.58 74.71 5.44 75.49 5.44C76.49 5.44 77.23 5.62 77.68 5.98C78.13 6.34 78.38 6.91 78.44 7.68V7.7H80.26V7.68C80.24 6.5 79.82 5.56 79.03 4.89C78.24 4.22 77.04 3.88 75.48 3.88C74.18 3.88 73.13 4.18 72.37 4.77C71.61 5.36 71.22 6.16 71.22 7.15C71.22 8.14 71.54 8.92 72.17 9.49C72.8 10.05 73.74 10.46 74.97 10.71L76 10.93C77.01 11.15 77.73 11.41 78.11 11.69C78.5 11.97 78.69 12.38 78.69 12.9C78.69 13.54 78.45 14.04 77.98 14.38C77.51 14.72 76.82 14.89 75.95 14.89C74.89 14.89 74.08 14.66 73.54 14.22C73 13.78 72.72 13.1 72.7 12.21V12.19H70.86V12.21C70.87 13.59 71.32 14.65 72.2 15.37C73.08 16.09 74.33 16.45 75.91 16.45C77.37 16.45 78.52 16.13 79.35 15.49C80.18 14.85 80.59 13.96 80.59 12.85C80.59 11.92 80.29 11.17 79.68 10.61V10.59ZM101.7 14.68L101.58 12.81C101.56 12.15 101.41 11.61 101.14 11.21C100.88 10.82 100.46 10.54 99.91 10.37C100.52 10.17 101.01 9.81 101.35 9.33C101.7 8.83 101.88 8.21 101.88 7.48C101.88 6.45 101.51 5.62 100.77 5.03C100.04 4.44 99.01 4.14 97.74 4.14H92.49V16.16H94.33V11.23H97.8C98.49 11.23 98.99 11.39 99.3 11.7C99.61 12.02 99.78 12.56 99.82 13.33L99.87 14.61C99.88 15.31 100 15.82 100.23 16.15C100.46 16.48 102.12 16.15 102.12 16.15L102.1 16.12C101.89 15.76 101.75 15.27 101.7 14.66V14.68ZM94.33 5.72H97.65C98.41 5.72 98.99 5.88 99.4 6.2C99.8 6.52 100.01 7 100.01 7.63C100.01 8.26 99.81 8.79 99.42 9.15C99.03 9.5 98.48 9.68 97.79 9.68H94.34V5.71L94.33 5.72ZM103.54 16.16H105.38V4.14H103.54V16.16ZM115.8 5.79V4.14H107.21V16.16H115.8V14.51H109.05V10.81H115.02V9.28H109.05V5.8H115.8V5.79ZM125.59 10.59C124.99 10.04 123.99 9.61 122.63 9.32L121.59 9.1C120.6 8.89 119.91 8.63 119.54 8.33C119.18 8.05 118.99 7.64 118.99 7.1C118.99 6.56 119.2 6.16 119.61 5.87C120.02 5.58 120.62 5.44 121.4 5.44C122.4 5.44 123.14 5.62 123.59 5.98C124.04 6.34 124.29 6.91 124.35 7.68V7.7H126.17V7.68C126.15 6.5 125.73 5.56 124.94 4.89C124.15 4.22 122.95 3.88 121.39 3.88C120.09 3.88 119.04 4.18 118.28 4.77C117.52 5.36 117.13 6.16 117.13 7.15C117.13 8.14 117.45 8.92 118.08 9.49C118.71 10.05 119.65 10.46 120.88 10.71L121.91 10.93C122.92 11.15 123.64 11.41 124.02 11.69C124.41 11.97 124.6 12.38 124.6 12.9C124.6 13.54 124.36 14.04 123.89 14.38C123.42 14.72 122.73 14.89 121.86 14.89C120.8 14.89 119.99 14.66 119.45 14.22C118.91 13.78 118.63 13.1 118.61 12.21V12.19H116.77V12.21C116.78 13.59 117.23 14.65 118.11 15.37C118.99 16.09 120.24 16.45 121.82 16.45C123.28 16.45 124.43 16.13 125.26 15.49C126.09 14.85 126.5 13.96 126.5 12.85C126.5 11.92 126.2 11.17 125.59 10.61V10.59ZM145.14 2.64H144.22V17.67H145.14V2.64ZM136.73 9.9L140.92 4.14H138.87L135.7 8.5L132.53 4.14H130.48L134.67 9.9L130.12 16.16H132.17L135.69 11.31L139.21 16.16H141.26L136.71 9.9H136.73ZM156.91 10.59C156.31 10.04 155.31 9.61 153.95 9.32L152.91 9.1C151.92 8.89 151.23 8.63 150.86 8.33C150.5 8.05 150.31 7.64 150.31 7.1C150.31 6.56 150.52 6.16 150.93 5.87C151.34 5.58 151.94 5.44 152.72 5.44C153.72 5.44 154.46 5.62 154.91 5.98C155.36 6.34 155.61 6.91 155.67 7.68V7.7H157.49V7.68C157.47 6.5 157.05 5.56 156.26 4.89C155.47 4.22 154.27 3.88 152.71 3.88C151.41 3.88 150.36 4.18 149.6 4.77C148.84 5.36 148.45 6.16 148.45 7.15C148.45 8.14 148.77 8.92 149.4 9.49C150.03 10.05 150.97 10.46 152.2 10.71L153.23 10.93C154.24 11.15 154.96 11.41 155.34 11.69C155.73 11.97 155.92 12.38 155.92 12.9C155.92 13.54 155.68 14.04 155.21 14.38C154.74 14.72 154.05 14.89 153.18 14.89C152.12 14.89 151.31 14.66 150.77 14.22C150.23 13.78 149.95 13.1 149.93 12.21V12.19H148.09V12.21C148.1 13.59 148.55 14.65 149.43 15.37C150.31 16.09 151.56 16.45 153.14 16.45C154.6 16.45 155.75 16.13 156.58 15.49C157.41 14.85 157.82 13.96 157.82 12.85C157.82 11.92 157.52 11.17 156.91 10.61V10.59Z" fill="white"/>
</g>
</g>
<defs>
<clipPath id="clip0_15840_6253">
<rect width="158" height="20" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="react-router.config.ts">
import type {Config} from '@react-router/dev/config';

export default {
  appDirectory: 'app',
  buildDirectory: 'dist',
  ssr: true,
} satisfies Config;
</file>

<file path="README.md">
# Hydrogen template: Skeleton

Hydrogen is Shopify’s stack for headless commerce. Hydrogen is designed to dovetail with [Remix](https://remix.run/), Shopify’s full stack web framework. This template contains a **minimal setup** of components, queries and tooling to get started with Hydrogen.

[Check out Hydrogen docs](https://shopify.dev/custom-storefronts/hydrogen)
[Get familiar with Remix](https://remix.run/docs/en/v1)

## What's included

- Remix
- Hydrogen
- Oxygen
- Vite
- Shopify CLI
- ESLint
- Prettier
- GraphQL generator
- TypeScript and JavaScript flavors
- Minimal setup of components and routes

## Getting started

**Requirements:**

- Node.js version 18.0.0 or higher

```bash
npm create @shopify/hydrogen@latest
```

## Building for production

```bash
npm run build
```

## Local development

```bash
npm run dev
```

## Setup for using Customer Account API (`/account` section)

Follow step 1 and 2 of <https://shopify.dev/docs/custom-storefronts/building-with-the-customer-account-api/hydrogen#step-1-set-up-a-public-domain-for-local-development>
</file>

<file path="server.ts">
// Virtual entry point for the app
import {storefrontRedirect} from '@shopify/hydrogen';
import {createRequestHandler} from '@shopify/remix-oxygen';
import {createAppLoadContext} from '~/lib/context';

/**
 * Export a fetch handler in module format.
 */
export default {
  async fetch(
    request: Request,
    env: Env,
    executionContext: ExecutionContext,
  ): Promise<Response> {
    try {
      const appLoadContext = await createAppLoadContext(
        request,
        env,
        executionContext,
      );

      /**
       * Create a Remix request handler and pass
       * Hydrogen's Storefront client to the loader context.
       */
      const handleRequest = createRequestHandler({
        // eslint-disable-next-line import/no-unresolved
        build: await import('virtual:react-router/server-build'),
        mode: process.env.NODE_ENV,
        getLoadContext: () => appLoadContext,
      });

      const response = await handleRequest(request);

      if (appLoadContext.session.isPending) {
        response.headers.set(
          'Set-Cookie',
          await appLoadContext.session.commit(),
        );
      }

      if (response.status === 404) {
        /**
         * Check for redirects only when there's a 404 from the app.
         * If the redirect doesn't exist, then `storefrontRedirect`
         * will pass through the 404 response.
         */
        return storefrontRedirect({
          request,
          response,
          storefront: appLoadContext.storefront,
        });
      }

      return response;
    } catch (error) {
      console.error(error);
      return new Response('An unexpected error occurred', {status: 500});
    }
  },
};
</file>

<file path="storefrontapi.generated.d.ts">
/* eslint-disable eslint-comments/disable-enable-pair */
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
import type * as StorefrontAPI from '@shopify/hydrogen/storefront-api-types';

export type MoneyFragment = Pick<
  StorefrontAPI.MoneyV2,
  'currencyCode' | 'amount'
>;

export type CartLineFragment = Pick<
  StorefrontAPI.CartLine,
  'id' | 'quantity'
> & {
  attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
  cost: {
    totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    amountPerQuantity: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    compareAtAmountPerQuantity?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
    >;
  };
  merchandise: Pick<
    StorefrontAPI.ProductVariant,
    'id' | 'availableForSale' | 'requiresShipping' | 'title'
  > & {
    compareAtPrice?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
    >;
    price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    image?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>
    >;
    product: Pick<StorefrontAPI.Product, 'handle' | 'title' | 'id' | 'vendor'>;
    selectedOptions: Array<
      Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
    >;
  };
};

export type CartLineComponentFragment = Pick<
  StorefrontAPI.ComponentizableCartLine,
  'id' | 'quantity'
> & {
  attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
  cost: {
    totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    amountPerQuantity: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    compareAtAmountPerQuantity?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
    >;
  };
  merchandise: Pick<
    StorefrontAPI.ProductVariant,
    'id' | 'availableForSale' | 'requiresShipping' | 'title'
  > & {
    compareAtPrice?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
    >;
    price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    image?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>
    >;
    product: Pick<StorefrontAPI.Product, 'handle' | 'title' | 'id' | 'vendor'>;
    selectedOptions: Array<
      Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
    >;
  };
};

export type CartApiQueryFragment = Pick<
  StorefrontAPI.Cart,
  'updatedAt' | 'id' | 'checkoutUrl' | 'totalQuantity' | 'note'
> & {
  appliedGiftCards: Array<
    Pick<StorefrontAPI.AppliedGiftCard, 'lastCharacters'> & {
      amountUsed: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    }
  >;
  buyerIdentity: Pick<
    StorefrontAPI.CartBuyerIdentity,
    'countryCode' | 'email' | 'phone'
  > & {
    customer?: StorefrontAPI.Maybe<
      Pick<
        StorefrontAPI.Customer,
        'id' | 'email' | 'firstName' | 'lastName' | 'displayName'
      >
    >;
  };
  lines: {
    nodes: Array<
      | (Pick<StorefrontAPI.CartLine, 'id' | 'quantity'> & {
          attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
          cost: {
            totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
            amountPerQuantity: Pick<
              StorefrontAPI.MoneyV2,
              'currencyCode' | 'amount'
            >;
            compareAtAmountPerQuantity?: StorefrontAPI.Maybe<
              Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
            >;
          };
          merchandise: Pick<
            StorefrontAPI.ProductVariant,
            'id' | 'availableForSale' | 'requiresShipping' | 'title'
          > & {
            compareAtPrice?: StorefrontAPI.Maybe<
              Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
            >;
            price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
            image?: StorefrontAPI.Maybe<
              Pick<
                StorefrontAPI.Image,
                'id' | 'url' | 'altText' | 'width' | 'height'
              >
            >;
            product: Pick<
              StorefrontAPI.Product,
              'handle' | 'title' | 'id' | 'vendor'
            >;
            selectedOptions: Array<
              Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
            >;
          };
        })
      | (Pick<StorefrontAPI.ComponentizableCartLine, 'id' | 'quantity'> & {
          attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
          cost: {
            totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
            amountPerQuantity: Pick<
              StorefrontAPI.MoneyV2,
              'currencyCode' | 'amount'
            >;
            compareAtAmountPerQuantity?: StorefrontAPI.Maybe<
              Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
            >;
          };
          merchandise: Pick<
            StorefrontAPI.ProductVariant,
            'id' | 'availableForSale' | 'requiresShipping' | 'title'
          > & {
            compareAtPrice?: StorefrontAPI.Maybe<
              Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
            >;
            price: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
            image?: StorefrontAPI.Maybe<
              Pick<
                StorefrontAPI.Image,
                'id' | 'url' | 'altText' | 'width' | 'height'
              >
            >;
            product: Pick<
              StorefrontAPI.Product,
              'handle' | 'title' | 'id' | 'vendor'
            >;
            selectedOptions: Array<
              Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
            >;
          };
        })
    >;
  };
  cost: {
    subtotalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    totalAmount: Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>;
    totalDutyAmount?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
    >;
    totalTaxAmount?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.MoneyV2, 'currencyCode' | 'amount'>
    >;
  };
  attributes: Array<Pick<StorefrontAPI.Attribute, 'key' | 'value'>>;
  discountCodes: Array<
    Pick<StorefrontAPI.CartDiscountCode, 'code' | 'applicable'>
  >;
};

export type MenuItemFragment = Pick<
  StorefrontAPI.MenuItem,
  'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
>;

export type ChildMenuItemFragment = Pick<
  StorefrontAPI.MenuItem,
  'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
>;

export type ParentMenuItemFragment = Pick<
  StorefrontAPI.MenuItem,
  'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
> & {
  items: Array<
    Pick<
      StorefrontAPI.MenuItem,
      'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
    >
  >;
};

export type MenuFragment = Pick<StorefrontAPI.Menu, 'id'> & {
  items: Array<
    Pick<
      StorefrontAPI.MenuItem,
      'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
    > & {
      items: Array<
        Pick<
          StorefrontAPI.MenuItem,
          'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
        >
      >;
    }
  >;
};

export type ShopFragment = Pick<
  StorefrontAPI.Shop,
  'id' | 'name' | 'description'
> & {
  primaryDomain: Pick<StorefrontAPI.Domain, 'url'>;
  brand?: StorefrontAPI.Maybe<{
    logo?: StorefrontAPI.Maybe<{
      image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
    }>;
  }>;
};

export type HeaderQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  headerMenuHandle: StorefrontAPI.Scalars['String']['input'];
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type HeaderQuery = {
  shop: Pick<StorefrontAPI.Shop, 'id' | 'name' | 'description'> & {
    primaryDomain: Pick<StorefrontAPI.Domain, 'url'>;
    brand?: StorefrontAPI.Maybe<{
      logo?: StorefrontAPI.Maybe<{
        image?: StorefrontAPI.Maybe<Pick<StorefrontAPI.Image, 'url'>>;
      }>;
    }>;
  };
  menu?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Menu, 'id'> & {
      items: Array<
        Pick<
          StorefrontAPI.MenuItem,
          'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
        > & {
          items: Array<
            Pick<
              StorefrontAPI.MenuItem,
              'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
            >
          >;
        }
      >;
    }
  >;
};

export type FooterQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  footerMenuHandle: StorefrontAPI.Scalars['String']['input'];
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type FooterQuery = {
  menu?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Menu, 'id'> & {
      items: Array<
        Pick<
          StorefrontAPI.MenuItem,
          'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
        > & {
          items: Array<
            Pick<
              StorefrontAPI.MenuItem,
              'id' | 'resourceId' | 'tags' | 'title' | 'type' | 'url'
            >
          >;
        }
      >;
    }
  >;
};

export type FeaturedCollectionFragment = Pick<
  StorefrontAPI.Collection,
  'id' | 'title' | 'handle'
> & {
  image?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>
  >;
};

export type FeaturedCollectionQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type FeaturedCollectionQuery = {
  collections: {
    nodes: Array<
      Pick<StorefrontAPI.Collection, 'id' | 'title' | 'handle'> & {
        image?: StorefrontAPI.Maybe<
          Pick<
            StorefrontAPI.Image,
            'id' | 'url' | 'altText' | 'width' | 'height'
          >
        >;
      }
    >;
  };
};

export type RecommendedProductFragment = Pick<
  StorefrontAPI.Product,
  'id' | 'title' | 'handle'
> & {
  priceRange: {
    minVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
  };
  featuredImage?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>
  >;
};

export type RecommendedProductsQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type RecommendedProductsQuery = {
  products: {
    nodes: Array<
      Pick<StorefrontAPI.Product, 'id' | 'title' | 'handle'> & {
        priceRange: {
          minVariantPrice: Pick<
            StorefrontAPI.MoneyV2,
            'amount' | 'currencyCode'
          >;
        };
        featuredImage?: StorefrontAPI.Maybe<
          Pick<
            StorefrontAPI.Image,
            'id' | 'url' | 'altText' | 'width' | 'height'
          >
        >;
      }
    >;
  };
};

export type ArticleQueryVariables = StorefrontAPI.Exact<{
  articleHandle: StorefrontAPI.Scalars['String']['input'];
  blogHandle: StorefrontAPI.Scalars['String']['input'];
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type ArticleQuery = {
  blog?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Blog, 'handle'> & {
      articleByHandle?: StorefrontAPI.Maybe<
        Pick<
          StorefrontAPI.Article,
          'handle' | 'title' | 'contentHtml' | 'publishedAt'
        > & {
          author?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.ArticleAuthor, 'name'>
          >;
          image?: StorefrontAPI.Maybe<
            Pick<
              StorefrontAPI.Image,
              'id' | 'altText' | 'url' | 'width' | 'height'
            >
          >;
          seo?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.Seo, 'description' | 'title'>
          >;
        }
      >;
    }
  >;
};

export type BlogQueryVariables = StorefrontAPI.Exact<{
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  blogHandle: StorefrontAPI.Scalars['String']['input'];
  first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  startCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
  endCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
}>;

export type BlogQuery = {
  blog?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Blog, 'title' | 'handle'> & {
      seo?: StorefrontAPI.Maybe<
        Pick<StorefrontAPI.Seo, 'title' | 'description'>
      >;
      articles: {
        nodes: Array<
          Pick<
            StorefrontAPI.Article,
            'contentHtml' | 'handle' | 'id' | 'publishedAt' | 'title'
          > & {
            author?: StorefrontAPI.Maybe<
              Pick<StorefrontAPI.ArticleAuthor, 'name'>
            >;
            image?: StorefrontAPI.Maybe<
              Pick<
                StorefrontAPI.Image,
                'id' | 'altText' | 'url' | 'width' | 'height'
              >
            >;
            blog: Pick<StorefrontAPI.Blog, 'handle'>;
          }
        >;
        pageInfo: Pick<
          StorefrontAPI.PageInfo,
          'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'
        >;
      };
    }
  >;
};

export type ArticleItemFragment = Pick<
  StorefrontAPI.Article,
  'contentHtml' | 'handle' | 'id' | 'publishedAt' | 'title'
> & {
  author?: StorefrontAPI.Maybe<Pick<StorefrontAPI.ArticleAuthor, 'name'>>;
  image?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>
  >;
  blog: Pick<StorefrontAPI.Blog, 'handle'>;
};

export type BlogsQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  endCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
  first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  startCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
}>;

export type BlogsQuery = {
  blogs: {
    pageInfo: Pick<
      StorefrontAPI.PageInfo,
      'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'
    >;
    nodes: Array<
      Pick<StorefrontAPI.Blog, 'title' | 'handle'> & {
        seo?: StorefrontAPI.Maybe<
          Pick<StorefrontAPI.Seo, 'title' | 'description'>
        >;
      }
    >;
  };
};

export type MoneyProductItemFragment = Pick<
  StorefrontAPI.MoneyV2,
  'amount' | 'currencyCode'
>;

export type ProductItemFragment = Pick<
  StorefrontAPI.Product,
  'id' | 'handle' | 'title'
> & {
  featuredImage?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>
  >;
  priceRange: {
    minVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
    maxVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
  };
};

export type CollectionQueryVariables = StorefrontAPI.Exact<{
  handle: StorefrontAPI.Scalars['String']['input'];
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  startCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
  endCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
}>;

export type CollectionQuery = {
  collection?: StorefrontAPI.Maybe<
    Pick<
      StorefrontAPI.Collection,
      'id' | 'handle' | 'title' | 'description'
    > & {
      products: {
        nodes: Array<
          Pick<StorefrontAPI.Product, 'id' | 'handle' | 'title'> & {
            featuredImage?: StorefrontAPI.Maybe<
              Pick<
                StorefrontAPI.Image,
                'id' | 'altText' | 'url' | 'width' | 'height'
              >
            >;
            priceRange: {
              minVariantPrice: Pick<
                StorefrontAPI.MoneyV2,
                'amount' | 'currencyCode'
              >;
              maxVariantPrice: Pick<
                StorefrontAPI.MoneyV2,
                'amount' | 'currencyCode'
              >;
            };
          }
        >;
        pageInfo: Pick<
          StorefrontAPI.PageInfo,
          'hasPreviousPage' | 'hasNextPage' | 'endCursor' | 'startCursor'
        >;
      };
    }
  >;
};

export type CollectionFragment = Pick<
  StorefrontAPI.Collection,
  'id' | 'title' | 'handle'
> & {
  image?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Image, 'id' | 'url' | 'altText' | 'width' | 'height'>
  >;
};

export type StoreCollectionsQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  endCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
  first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  startCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
}>;

export type StoreCollectionsQuery = {
  collections: {
    nodes: Array<
      Pick<StorefrontAPI.Collection, 'id' | 'title' | 'handle'> & {
        image?: StorefrontAPI.Maybe<
          Pick<
            StorefrontAPI.Image,
            'id' | 'url' | 'altText' | 'width' | 'height'
          >
        >;
      }
    >;
    pageInfo: Pick<
      StorefrontAPI.PageInfo,
      'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'
    >;
  };
};

export type MoneyCollectionItemFragment = Pick<
  StorefrontAPI.MoneyV2,
  'amount' | 'currencyCode'
>;

export type CollectionItemFragment = Pick<
  StorefrontAPI.Product,
  'id' | 'handle' | 'title'
> & {
  featuredImage?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Image, 'id' | 'altText' | 'url' | 'width' | 'height'>
  >;
  priceRange: {
    minVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
    maxVariantPrice: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
  };
};

export type CatalogQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  startCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
  endCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
}>;

export type CatalogQuery = {
  products: {
    nodes: Array<
      Pick<StorefrontAPI.Product, 'id' | 'handle' | 'title'> & {
        featuredImage?: StorefrontAPI.Maybe<
          Pick<
            StorefrontAPI.Image,
            'id' | 'altText' | 'url' | 'width' | 'height'
          >
        >;
        priceRange: {
          minVariantPrice: Pick<
            StorefrontAPI.MoneyV2,
            'amount' | 'currencyCode'
          >;
          maxVariantPrice: Pick<
            StorefrontAPI.MoneyV2,
            'amount' | 'currencyCode'
          >;
        };
      }
    >;
    pageInfo: Pick<
      StorefrontAPI.PageInfo,
      'hasPreviousPage' | 'hasNextPage' | 'startCursor' | 'endCursor'
    >;
  };
};

export type PageQueryVariables = StorefrontAPI.Exact<{
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  handle: StorefrontAPI.Scalars['String']['input'];
}>;

export type PageQuery = {
  page?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.Page, 'handle' | 'id' | 'title' | 'body'> & {
      seo?: StorefrontAPI.Maybe<
        Pick<StorefrontAPI.Seo, 'description' | 'title'>
      >;
    }
  >;
};

export type PolicyFragment = Pick<
  StorefrontAPI.ShopPolicy,
  'body' | 'handle' | 'id' | 'title' | 'url'
>;

export type PolicyQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  privacyPolicy: StorefrontAPI.Scalars['Boolean']['input'];
  refundPolicy: StorefrontAPI.Scalars['Boolean']['input'];
  shippingPolicy: StorefrontAPI.Scalars['Boolean']['input'];
  termsOfService: StorefrontAPI.Scalars['Boolean']['input'];
}>;

export type PolicyQuery = {
  shop: {
    privacyPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>
    >;
    shippingPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>
    >;
    termsOfService?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>
    >;
    refundPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'body' | 'handle' | 'id' | 'title' | 'url'>
    >;
  };
};

export type PolicyItemFragment = Pick<
  StorefrontAPI.ShopPolicy,
  'id' | 'title' | 'handle'
>;

export type PoliciesQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type PoliciesQuery = {
  shop: {
    privacyPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>
    >;
    shippingPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>
    >;
    termsOfService?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>
    >;
    refundPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicy, 'id' | 'title' | 'handle'>
    >;
    subscriptionPolicy?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ShopPolicyWithDefault, 'id' | 'title' | 'handle'>
    >;
  };
};

export type ProductVariantFragment = Pick<
  StorefrontAPI.ProductVariant,
  'availableForSale' | 'id' | 'sku' | 'title'
> & {
  compareAtPrice?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
  >;
  image?: StorefrontAPI.Maybe<
    {__typename: 'Image'} & Pick<
      StorefrontAPI.Image,
      'id' | 'url' | 'altText' | 'width' | 'height'
    >
  >;
  price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
  product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
  selectedOptions: Array<Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>>;
  unitPrice?: StorefrontAPI.Maybe<
    Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
  >;
};

export type ProductFragment = Pick<
  StorefrontAPI.Product,
  | 'id'
  | 'title'
  | 'vendor'
  | 'handle'
  | 'descriptionHtml'
  | 'description'
  | 'encodedVariantExistence'
  | 'encodedVariantAvailability'
> & {
  options: Array<
    Pick<StorefrontAPI.ProductOption, 'name'> & {
      optionValues: Array<
        Pick<StorefrontAPI.ProductOptionValue, 'name'> & {
          firstSelectableVariant?: StorefrontAPI.Maybe<
            Pick<
              StorefrontAPI.ProductVariant,
              'availableForSale' | 'id' | 'sku' | 'title'
            > & {
              compareAtPrice?: StorefrontAPI.Maybe<
                Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
              >;
              image?: StorefrontAPI.Maybe<
                {__typename: 'Image'} & Pick<
                  StorefrontAPI.Image,
                  'id' | 'url' | 'altText' | 'width' | 'height'
                >
              >;
              price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
              product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
              selectedOptions: Array<
                Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
              >;
              unitPrice?: StorefrontAPI.Maybe<
                Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
              >;
            }
          >;
          swatch?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.ProductOptionValueSwatch, 'color'> & {
              image?: StorefrontAPI.Maybe<{
                previewImage?: StorefrontAPI.Maybe<
                  Pick<StorefrontAPI.Image, 'url'>
                >;
              }>;
            }
          >;
        }
      >;
    }
  >;
  selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<
    Pick<
      StorefrontAPI.ProductVariant,
      'availableForSale' | 'id' | 'sku' | 'title'
    > & {
      compareAtPrice?: StorefrontAPI.Maybe<
        Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
      >;
      image?: StorefrontAPI.Maybe<
        {__typename: 'Image'} & Pick<
          StorefrontAPI.Image,
          'id' | 'url' | 'altText' | 'width' | 'height'
        >
      >;
      price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
      product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
      selectedOptions: Array<
        Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
      >;
      unitPrice?: StorefrontAPI.Maybe<
        Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
      >;
    }
  >;
  adjacentVariants: Array<
    Pick<
      StorefrontAPI.ProductVariant,
      'availableForSale' | 'id' | 'sku' | 'title'
    > & {
      compareAtPrice?: StorefrontAPI.Maybe<
        Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
      >;
      image?: StorefrontAPI.Maybe<
        {__typename: 'Image'} & Pick<
          StorefrontAPI.Image,
          'id' | 'url' | 'altText' | 'width' | 'height'
        >
      >;
      price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
      product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
      selectedOptions: Array<
        Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
      >;
      unitPrice?: StorefrontAPI.Maybe<
        Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
      >;
    }
  >;
  seo: Pick<StorefrontAPI.Seo, 'description' | 'title'>;
};

export type ProductQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  handle: StorefrontAPI.Scalars['String']['input'];
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  selectedOptions:
    | Array<StorefrontAPI.SelectedOptionInput>
    | StorefrontAPI.SelectedOptionInput;
}>;

export type ProductQuery = {
  product?: StorefrontAPI.Maybe<
    Pick<
      StorefrontAPI.Product,
      | 'id'
      | 'title'
      | 'vendor'
      | 'handle'
      | 'descriptionHtml'
      | 'description'
      | 'encodedVariantExistence'
      | 'encodedVariantAvailability'
    > & {
      options: Array<
        Pick<StorefrontAPI.ProductOption, 'name'> & {
          optionValues: Array<
            Pick<StorefrontAPI.ProductOptionValue, 'name'> & {
              firstSelectableVariant?: StorefrontAPI.Maybe<
                Pick<
                  StorefrontAPI.ProductVariant,
                  'availableForSale' | 'id' | 'sku' | 'title'
                > & {
                  compareAtPrice?: StorefrontAPI.Maybe<
                    Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
                  >;
                  image?: StorefrontAPI.Maybe<
                    {__typename: 'Image'} & Pick<
                      StorefrontAPI.Image,
                      'id' | 'url' | 'altText' | 'width' | 'height'
                    >
                  >;
                  price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
                  product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
                  selectedOptions: Array<
                    Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
                  >;
                  unitPrice?: StorefrontAPI.Maybe<
                    Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
                  >;
                }
              >;
              swatch?: StorefrontAPI.Maybe<
                Pick<StorefrontAPI.ProductOptionValueSwatch, 'color'> & {
                  image?: StorefrontAPI.Maybe<{
                    previewImage?: StorefrontAPI.Maybe<
                      Pick<StorefrontAPI.Image, 'url'>
                    >;
                  }>;
                }
              >;
            }
          >;
        }
      >;
      selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<
        Pick<
          StorefrontAPI.ProductVariant,
          'availableForSale' | 'id' | 'sku' | 'title'
        > & {
          compareAtPrice?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
          >;
          image?: StorefrontAPI.Maybe<
            {__typename: 'Image'} & Pick<
              StorefrontAPI.Image,
              'id' | 'url' | 'altText' | 'width' | 'height'
            >
          >;
          price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
          product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
          selectedOptions: Array<
            Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
          >;
          unitPrice?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
          >;
        }
      >;
      adjacentVariants: Array<
        Pick<
          StorefrontAPI.ProductVariant,
          'availableForSale' | 'id' | 'sku' | 'title'
        > & {
          compareAtPrice?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
          >;
          image?: StorefrontAPI.Maybe<
            {__typename: 'Image'} & Pick<
              StorefrontAPI.Image,
              'id' | 'url' | 'altText' | 'width' | 'height'
            >
          >;
          price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
          product: Pick<StorefrontAPI.Product, 'title' | 'handle'>;
          selectedOptions: Array<
            Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
          >;
          unitPrice?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
          >;
        }
      >;
      seo: Pick<StorefrontAPI.Seo, 'description' | 'title'>;
    }
  >;
};

export type SearchProductFragment = {__typename: 'Product'} & Pick<
  StorefrontAPI.Product,
  'handle' | 'id' | 'publishedAt' | 'title' | 'trackingParameters' | 'vendor'
> & {
    selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ProductVariant, 'id'> & {
        image?: StorefrontAPI.Maybe<
          Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>
        >;
        price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
        compareAtPrice?: StorefrontAPI.Maybe<
          Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
        >;
        selectedOptions: Array<
          Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
        >;
        product: Pick<StorefrontAPI.Product, 'handle' | 'title'>;
      }
    >;
  };

export type SearchPageFragment = {__typename: 'Page'} & Pick<
  StorefrontAPI.Page,
  'handle' | 'id' | 'title' | 'trackingParameters'
>;

export type SearchArticleFragment = {__typename: 'Article'} & Pick<
  StorefrontAPI.Article,
  'handle' | 'id' | 'title' | 'trackingParameters'
>;

export type PageInfoFragmentFragment = Pick<
  StorefrontAPI.PageInfo,
  'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'
>;

export type RegularSearchQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  endCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
  first?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  last?: StorefrontAPI.InputMaybe<StorefrontAPI.Scalars['Int']['input']>;
  term: StorefrontAPI.Scalars['String']['input'];
  startCursor?: StorefrontAPI.InputMaybe<
    StorefrontAPI.Scalars['String']['input']
  >;
}>;

export type RegularSearchQuery = {
  articles: {
    nodes: Array<
      {__typename: 'Article'} & Pick<
        StorefrontAPI.Article,
        'handle' | 'id' | 'title' | 'trackingParameters'
      >
    >;
  };
  pages: {
    nodes: Array<
      {__typename: 'Page'} & Pick<
        StorefrontAPI.Page,
        'handle' | 'id' | 'title' | 'trackingParameters'
      >
    >;
  };
  products: {
    nodes: Array<
      {__typename: 'Product'} & Pick<
        StorefrontAPI.Product,
        | 'handle'
        | 'id'
        | 'publishedAt'
        | 'title'
        | 'trackingParameters'
        | 'vendor'
      > & {
          selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.ProductVariant, 'id'> & {
              image?: StorefrontAPI.Maybe<
                Pick<
                  StorefrontAPI.Image,
                  'url' | 'altText' | 'width' | 'height'
                >
              >;
              price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
              compareAtPrice?: StorefrontAPI.Maybe<
                Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>
              >;
              selectedOptions: Array<
                Pick<StorefrontAPI.SelectedOption, 'name' | 'value'>
              >;
              product: Pick<StorefrontAPI.Product, 'handle' | 'title'>;
            }
          >;
        }
    >;
    pageInfo: Pick<
      StorefrontAPI.PageInfo,
      'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'
    >;
  };
};

export type PredictiveArticleFragment = {__typename: 'Article'} & Pick<
  StorefrontAPI.Article,
  'id' | 'title' | 'handle' | 'trackingParameters'
> & {
    blog: Pick<StorefrontAPI.Blog, 'handle'>;
    image?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>
    >;
  };

export type PredictiveCollectionFragment = {__typename: 'Collection'} & Pick<
  StorefrontAPI.Collection,
  'id' | 'title' | 'handle' | 'trackingParameters'
> & {
    image?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>
    >;
  };

export type PredictivePageFragment = {__typename: 'Page'} & Pick<
  StorefrontAPI.Page,
  'id' | 'title' | 'handle' | 'trackingParameters'
>;

export type PredictiveProductFragment = {__typename: 'Product'} & Pick<
  StorefrontAPI.Product,
  'id' | 'title' | 'handle' | 'trackingParameters'
> & {
    selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<
      Pick<StorefrontAPI.ProductVariant, 'id'> & {
        image?: StorefrontAPI.Maybe<
          Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>
        >;
        price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
      }
    >;
  };

export type PredictiveQueryFragment = {
  __typename: 'SearchQuerySuggestion';
} & Pick<
  StorefrontAPI.SearchQuerySuggestion,
  'text' | 'styledText' | 'trackingParameters'
>;

export type PredictiveSearchQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
  limit: StorefrontAPI.Scalars['Int']['input'];
  limitScope: StorefrontAPI.PredictiveSearchLimitScope;
  term: StorefrontAPI.Scalars['String']['input'];
  types?: StorefrontAPI.InputMaybe<
    | Array<StorefrontAPI.PredictiveSearchType>
    | StorefrontAPI.PredictiveSearchType
  >;
}>;

export type PredictiveSearchQuery = {
  predictiveSearch?: StorefrontAPI.Maybe<{
    articles: Array<
      {__typename: 'Article'} & Pick<
        StorefrontAPI.Article,
        'id' | 'title' | 'handle' | 'trackingParameters'
      > & {
          blog: Pick<StorefrontAPI.Blog, 'handle'>;
          image?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>
          >;
        }
    >;
    collections: Array<
      {__typename: 'Collection'} & Pick<
        StorefrontAPI.Collection,
        'id' | 'title' | 'handle' | 'trackingParameters'
      > & {
          image?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.Image, 'url' | 'altText' | 'width' | 'height'>
          >;
        }
    >;
    pages: Array<
      {__typename: 'Page'} & Pick<
        StorefrontAPI.Page,
        'id' | 'title' | 'handle' | 'trackingParameters'
      >
    >;
    products: Array<
      {__typename: 'Product'} & Pick<
        StorefrontAPI.Product,
        'id' | 'title' | 'handle' | 'trackingParameters'
      > & {
          selectedOrFirstAvailableVariant?: StorefrontAPI.Maybe<
            Pick<StorefrontAPI.ProductVariant, 'id'> & {
              image?: StorefrontAPI.Maybe<
                Pick<
                  StorefrontAPI.Image,
                  'url' | 'altText' | 'width' | 'height'
                >
              >;
              price: Pick<StorefrontAPI.MoneyV2, 'amount' | 'currencyCode'>;
            }
          >;
        }
    >;
    queries: Array<
      {__typename: 'SearchQuerySuggestion'} & Pick<
        StorefrontAPI.SearchQuerySuggestion,
        'text' | 'styledText' | 'trackingParameters'
      >
    >;
  }>;
};

export type StoreRobotsQueryVariables = StorefrontAPI.Exact<{
  country?: StorefrontAPI.InputMaybe<StorefrontAPI.CountryCode>;
  language?: StorefrontAPI.InputMaybe<StorefrontAPI.LanguageCode>;
}>;

export type StoreRobotsQuery = {shop: Pick<StorefrontAPI.Shop, 'id'>};

interface GeneratedQueryTypes {
  '#graphql\n  fragment Shop on Shop {\n    id\n    name\n    description\n    primaryDomain {\n      url\n    }\n    brand {\n      logo {\n        image {\n          url\n        }\n      }\n    }\n  }\n  query Header(\n    $country: CountryCode\n    $headerMenuHandle: String!\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    shop {\n      ...Shop\n    }\n    menu(handle: $headerMenuHandle) {\n      ...Menu\n    }\n  }\n  #graphql\n  fragment MenuItem on MenuItem {\n    id\n    resourceId\n    tags\n    title\n    type\n    url\n  }\n  fragment ChildMenuItem on MenuItem {\n    ...MenuItem\n  }\n  fragment ParentMenuItem on MenuItem {\n    ...MenuItem\n    items {\n      ...ChildMenuItem\n    }\n  }\n  fragment Menu on Menu {\n    id\n    items {\n      ...ParentMenuItem\n    }\n  }\n\n': {
    return: HeaderQuery;
    variables: HeaderQueryVariables;
  };
  '#graphql\n  query Footer(\n    $country: CountryCode\n    $footerMenuHandle: String!\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    menu(handle: $footerMenuHandle) {\n      ...Menu\n    }\n  }\n  #graphql\n  fragment MenuItem on MenuItem {\n    id\n    resourceId\n    tags\n    title\n    type\n    url\n  }\n  fragment ChildMenuItem on MenuItem {\n    ...MenuItem\n  }\n  fragment ParentMenuItem on MenuItem {\n    ...MenuItem\n    items {\n      ...ChildMenuItem\n    }\n  }\n  fragment Menu on Menu {\n    id\n    items {\n      ...ParentMenuItem\n    }\n  }\n\n': {
    return: FooterQuery;
    variables: FooterQueryVariables;
  };
  '#graphql\n  fragment FeaturedCollection on Collection {\n    id\n    title\n    image {\n      id\n      url\n      altText\n      width\n      height\n    }\n    handle\n  }\n  query FeaturedCollection($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    collections(first: 1, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...FeaturedCollection\n      }\n    }\n  }\n': {
    return: FeaturedCollectionQuery;
    variables: FeaturedCollectionQueryVariables;
  };
  '#graphql\n  fragment RecommendedProduct on Product {\n    id\n    title\n    handle\n    priceRange {\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      id\n      url\n      altText\n      width\n      height\n    }\n  }\n  query RecommendedProducts ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    products(first: 4, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...RecommendedProduct\n      }\n    }\n  }\n': {
    return: RecommendedProductsQuery;
    variables: RecommendedProductsQueryVariables;
  };
  '#graphql\n  query Article(\n    $articleHandle: String!\n    $blogHandle: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    blog(handle: $blogHandle) {\n      handle\n      articleByHandle(handle: $articleHandle) {\n        handle\n        title\n        contentHtml\n        publishedAt\n        author: authorV2 {\n          name\n        }\n        image {\n          id\n          altText\n          url\n          width\n          height\n        }\n        seo {\n          description\n          title\n        }\n      }\n    }\n  }\n': {
    return: ArticleQuery;
    variables: ArticleQueryVariables;
  };
  '#graphql\n  query Blog(\n    $language: LanguageCode\n    $blogHandle: String!\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(language: $language) {\n    blog(handle: $blogHandle) {\n      title\n      handle\n      seo {\n        title\n        description\n      }\n      articles(\n        first: $first,\n        last: $last,\n        before: $startCursor,\n        after: $endCursor\n      ) {\n        nodes {\n          ...ArticleItem\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          hasNextPage\n          endCursor\n          startCursor\n        }\n\n      }\n    }\n  }\n  fragment ArticleItem on Article {\n    author: authorV2 {\n      name\n    }\n    contentHtml\n    handle\n    id\n    image {\n      id\n      altText\n      url\n      width\n      height\n    }\n    publishedAt\n    title\n    blog {\n      handle\n    }\n  }\n': {
    return: BlogQuery;
    variables: BlogQueryVariables;
  };
  '#graphql\n  query Blogs(\n    $country: CountryCode\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    blogs(\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      nodes {\n        title\n        handle\n        seo {\n          title\n          description\n        }\n      }\n    }\n  }\n': {
    return: BlogsQuery;
    variables: BlogsQueryVariables;
  };
  '#graphql\n  #graphql\n  fragment MoneyProductItem on MoneyV2 {\n    amount\n    currencyCode\n  }\n  fragment ProductItem on Product {\n    id\n    handle\n    title\n    featuredImage {\n      id\n      altText\n      url\n      width\n      height\n    }\n    priceRange {\n      minVariantPrice {\n        ...MoneyProductItem\n      }\n      maxVariantPrice {\n        ...MoneyProductItem\n      }\n    }\n  }\n\n  query Collection(\n    $handle: String!\n    $country: CountryCode\n    $language: LanguageCode\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      id\n      handle\n      title\n      description\n      products(\n        first: $first,\n        last: $last,\n        before: $startCursor,\n        after: $endCursor\n      ) {\n        nodes {\n          ...ProductItem\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          endCursor\n          startCursor\n        }\n      }\n    }\n  }\n': {
    return: CollectionQuery;
    variables: CollectionQueryVariables;
  };
  '#graphql\n  fragment Collection on Collection {\n    id\n    title\n    handle\n    image {\n      id\n      url\n      altText\n      width\n      height\n    }\n  }\n  query StoreCollections(\n    $country: CountryCode\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    collections(\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...Collection\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n': {
    return: StoreCollectionsQuery;
    variables: StoreCollectionsQueryVariables;
  };
  '#graphql\n  query Catalog(\n    $country: CountryCode\n    $language: LanguageCode\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    products(first: $first, last: $last, before: $startCursor, after: $endCursor) {\n      nodes {\n        ...CollectionItem\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n  #graphql\n  fragment MoneyCollectionItem on MoneyV2 {\n    amount\n    currencyCode\n  }\n  fragment CollectionItem on Product {\n    id\n    handle\n    title\n    featuredImage {\n      id\n      altText\n      url\n      width\n      height\n    }\n    priceRange {\n      minVariantPrice {\n        ...MoneyCollectionItem\n      }\n      maxVariantPrice {\n        ...MoneyCollectionItem\n      }\n    }\n  }\n\n': {
    return: CatalogQuery;
    variables: CatalogQueryVariables;
  };
  '#graphql\n  query Page(\n    $language: LanguageCode,\n    $country: CountryCode,\n    $handle: String!\n  )\n  @inContext(language: $language, country: $country) {\n    page(handle: $handle) {\n      handle\n      id\n      title\n      body\n      seo {\n        description\n        title\n      }\n    }\n  }\n': {
    return: PageQuery;
    variables: PageQueryVariables;
  };
  '#graphql\n  fragment Policy on ShopPolicy {\n    body\n    handle\n    id\n    title\n    url\n  }\n  query Policy(\n    $country: CountryCode\n    $language: LanguageCode\n    $privacyPolicy: Boolean!\n    $refundPolicy: Boolean!\n    $shippingPolicy: Boolean!\n    $termsOfService: Boolean!\n  ) @inContext(language: $language, country: $country) {\n    shop {\n      privacyPolicy @include(if: $privacyPolicy) {\n        ...Policy\n      }\n      shippingPolicy @include(if: $shippingPolicy) {\n        ...Policy\n      }\n      termsOfService @include(if: $termsOfService) {\n        ...Policy\n      }\n      refundPolicy @include(if: $refundPolicy) {\n        ...Policy\n      }\n    }\n  }\n': {
    return: PolicyQuery;
    variables: PolicyQueryVariables;
  };
  '#graphql\n  fragment PolicyItem on ShopPolicy {\n    id\n    title\n    handle\n  }\n  query Policies ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    shop {\n      privacyPolicy {\n        ...PolicyItem\n      }\n      shippingPolicy {\n        ...PolicyItem\n      }\n      termsOfService {\n        ...PolicyItem\n      }\n      refundPolicy {\n        ...PolicyItem\n      }\n      subscriptionPolicy {\n        id\n        title\n        handle\n      }\n    }\n  }\n': {
    return: PoliciesQuery;
    variables: PoliciesQueryVariables;
  };
  '#graphql\n  query Product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...Product\n    }\n  }\n  #graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n    encodedVariantExistence\n    encodedVariantAvailability\n    options {\n      name\n      optionValues {\n        name\n        firstSelectableVariant {\n          ...ProductVariant\n        }\n        swatch {\n          color\n          image {\n            previewImage {\n              url\n            }\n          }\n        }\n      }\n    }\n    selectedOrFirstAvailableVariant(selectedOptions: $selectedOptions, ignoreUnknownOptions: true, caseInsensitiveMatch: true) {\n      ...ProductVariant\n    }\n    adjacentVariants (selectedOptions: $selectedOptions) {\n      ...ProductVariant\n    }\n    seo {\n      description\n      title\n    }\n  }\n  #graphql\n  fragment ProductVariant on ProductVariant {\n    availableForSale\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    id\n    image {\n      __typename\n      id\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    product {\n      title\n      handle\n    }\n    selectedOptions {\n      name\n      value\n    }\n    sku\n    title\n    unitPrice {\n      amount\n      currencyCode\n    }\n  }\n\n\n': {
    return: ProductQuery;
    variables: ProductQueryVariables;
  };
  '#graphql\n  query RegularSearch(\n    $country: CountryCode\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $term: String!\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    articles: search(\n      query: $term,\n      types: [ARTICLE],\n      first: $first,\n    ) {\n      nodes {\n        ...on Article {\n          ...SearchArticle\n        }\n      }\n    }\n    pages: search(\n      query: $term,\n      types: [PAGE],\n      first: $first,\n    ) {\n      nodes {\n        ...on Page {\n          ...SearchPage\n        }\n      }\n    }\n    products: search(\n      after: $endCursor,\n      before: $startCursor,\n      first: $first,\n      last: $last,\n      query: $term,\n      sortKey: RELEVANCE,\n      types: [PRODUCT],\n      unavailableProducts: HIDE,\n    ) {\n      nodes {\n        ...on Product {\n          ...SearchProduct\n        }\n      }\n      pageInfo {\n        ...PageInfoFragment\n      }\n    }\n  }\n  #graphql\n  fragment SearchProduct on Product {\n    __typename\n    handle\n    id\n    publishedAt\n    title\n    trackingParameters\n    vendor\n    selectedOrFirstAvailableVariant(\n      selectedOptions: []\n      ignoreUnknownOptions: true\n      caseInsensitiveMatch: true\n    ) {\n      id\n      image {\n        url\n        altText\n        width\n        height\n      }\n      price {\n        amount\n        currencyCode\n      }\n      compareAtPrice {\n        amount\n        currencyCode\n      }\n      selectedOptions {\n        name\n        value\n      }\n      product {\n        handle\n        title\n      }\n    }\n  }\n\n  #graphql\n  fragment SearchPage on Page {\n     __typename\n     handle\n    id\n    title\n    trackingParameters\n  }\n\n  #graphql\n  fragment SearchArticle on Article {\n    __typename\n    handle\n    id\n    title\n    trackingParameters\n  }\n\n  #graphql\n  fragment PageInfoFragment on PageInfo {\n    hasNextPage\n    hasPreviousPage\n    startCursor\n    endCursor\n  }\n\n': {
    return: RegularSearchQuery;
    variables: RegularSearchQueryVariables;
  };
  '#graphql\n  query PredictiveSearch(\n    $country: CountryCode\n    $language: LanguageCode\n    $limit: Int!\n    $limitScope: PredictiveSearchLimitScope!\n    $term: String!\n    $types: [PredictiveSearchType!]\n  ) @inContext(country: $country, language: $language) {\n    predictiveSearch(\n      limit: $limit,\n      limitScope: $limitScope,\n      query: $term,\n      types: $types,\n    ) {\n      articles {\n        ...PredictiveArticle\n      }\n      collections {\n        ...PredictiveCollection\n      }\n      pages {\n        ...PredictivePage\n      }\n      products {\n        ...PredictiveProduct\n      }\n      queries {\n        ...PredictiveQuery\n      }\n    }\n  }\n  #graphql\n  fragment PredictiveArticle on Article {\n    __typename\n    id\n    title\n    handle\n    blog {\n      handle\n    }\n    image {\n      url\n      altText\n      width\n      height\n    }\n    trackingParameters\n  }\n\n  #graphql\n  fragment PredictiveCollection on Collection {\n    __typename\n    id\n    title\n    handle\n    image {\n      url\n      altText\n      width\n      height\n    }\n    trackingParameters\n  }\n\n  #graphql\n  fragment PredictivePage on Page {\n    __typename\n    id\n    title\n    handle\n    trackingParameters\n  }\n\n  #graphql\n  fragment PredictiveProduct on Product {\n    __typename\n    id\n    title\n    handle\n    trackingParameters\n    selectedOrFirstAvailableVariant(\n      selectedOptions: []\n      ignoreUnknownOptions: true\n      caseInsensitiveMatch: true\n    ) {\n      id\n      image {\n        url\n        altText\n        width\n        height\n      }\n      price {\n        amount\n        currencyCode\n      }\n    }\n  }\n\n  #graphql\n  fragment PredictiveQuery on SearchQuerySuggestion {\n    __typename\n    text\n    styledText\n    trackingParameters\n  }\n\n': {
    return: PredictiveSearchQuery;
    variables: PredictiveSearchQueryVariables;
  };
  '#graphql\n  query StoreRobots($country: CountryCode, $language: LanguageCode)\n   @inContext(country: $country, language: $language) {\n    shop {\n      id\n    }\n  }\n': {
    return: StoreRobotsQuery;
    variables: StoreRobotsQueryVariables;
  };
}

interface GeneratedMutationTypes {}

declare module '@shopify/hydrogen' {
  interface StorefrontQueries extends GeneratedQueryTypes {}
  interface StorefrontMutations extends GeneratedMutationTypes {}
}
</file>

<file path="tailwind.config.js">
// Xóa dòng này:
// import { Config } from 'tailwindcss';

const config = {
  content: [
    "./app/**/*.{js,jsx,ts,tsx}",
    // Nếu components nằm trong app/components thì không cần dòng dưới
    // "./components/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          primary: '#fc2839',
          secondary: '#111117',
        },
      },
      fontFamily: {
        oxanium: ['Oxanium', 'sans-serif'],
        'source-sans': ['Source Sans 3', 'sans-serif'],
      },
      fontSize: {
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
        '4xl': ['2.25rem', { lineHeight: '2.75rem' }],
      },
    },
  },
  plugins: [],
};

export default config;
</file>

<file path="app/components/AddToCartButton.tsx">
import { type FetcherWithComponents } from 'react-router';
import {CartForm, type OptimisticCartLineInput} from '@shopify/hydrogen';

export function AddToCartButton({
  analytics,
  children,
  disabled,
  lines,
  onClick,
}: {
  analytics?: unknown;
  children: React.ReactNode;
  disabled?: boolean;
  lines: Array<OptimisticCartLineInput>;
  onClick?: () => void;
}) {
  return (
    <CartForm route="/cart" inputs={{lines}} action={CartForm.ACTIONS.LinesAdd}>
      {(fetcher: FetcherWithComponents<any>) => (
        <>
          <input
            name="analytics"
            type="hidden"
            value={JSON.stringify(analytics)}
          />
          <button className='bg-black text-white px-4 py-2 rounded-md hover:bg-gray-800 cursor-pointer'
            type="submit"
            onClick={onClick}
            disabled={disabled ?? fetcher.state !== 'idle'}
          >
            {children}
          </button>
        </>
      )}
    </CartForm>
  );
}
</file>

<file path="app/components/sections/Hero.tsx">
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { useGSAP } from "@gsap/react";

import { useMaskSettings } from '../../constants';
import Intro from "./Intro"

// Register ScrollTrigger plugin
gsap.registerPlugin(ScrollTrigger); 

const Hero = () => {
  const { initialMaskPos, initialMaskSize, maskPos, maskSize } = useMaskSettings();

  useGSAP(() => {
    gsap.set('.mask-wrapper', {
      maskPosition: initialMaskPos,
      maskSize: initialMaskSize,
    });

    gsap.set('.mask-logo', { marginTop: '-100vh', opacity: 0 });

    gsap.set('.entrance-message', { marginTop: '0vh' });

    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: '.hero-section',
        start: 'top top',
        end: '+=200%',
        scrub: 2.5,
        pin: true,
      }
    })

    tl
      .to('.fade-out', { opacity: 0, ease: 'power1.inOut' })
      .to('.scale-out', { scale: 1, ease: 'power1.inOut' })
      .to('.mask-wrapper', { maskSize, ease: 'power1.inOut' }, '<')
      .to('.mask-wrapper', { opacity: 0 })
      .to('.overlay-logo', { opacity: 1, onComplete: () => {
        gsap.to('.overlay-logo', { opacity: 0 });
      } }, '<')
      .to('.entrance-message', { duration: 1, ease: 'power1.inOut', maskImage: 'radial-gradient(circle at 50% 0vh, black 50%, transparent 100%)' }, '<')
  });

  return (
    <section className="hero-section">
      <div className="size-full mask-wrapper">
        <img src="/images/kpr-bg.jpg" alt="background" className="scale-out" />
        <img src="/images/kpr-logo.svg" alt="hero-logo" className="title-logo fade-out" />
        <img  src="/images/kpr-logo-icon.svg" alt="trailer" className="trailer-logo fade-out" />
        <div className="play-img fade-out">
          <img src="/images/play.png" alt="play" className="w-7 ml-1" />
        </div>
      </div>

      <div>
        <img src="/images/kpr-logo-text.svg" alt="logo" className="size-full object-cover mask-logo" />
      </div>

      <div className="fake-logo-wrapper">
        <img src="/images/kpr-logo-text.svg" className="overlay-logo" alt="logo" />
      </div>

      <Intro />
    </section>
  )
}

export default Hero
</file>

<file path="vite.config.ts">
import {defineConfig} from 'vite';
import {hydrogen} from '@shopify/hydrogen/vite';
import {oxygen} from '@shopify/mini-oxygen/vite';
import {reactRouter} from '@react-router/dev/vite';
import tsconfigPaths from 'vite-tsconfig-paths';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  plugins: [
    tailwindcss(),
    hydrogen(),
    oxygen(),
    reactRouter(),
    tsconfigPaths(),
  ],
  build: {
    // Allow a strict Content-Security-Policy
    // withtout inlining assets as base64:
    assetsInlineLimit: 0,
  },
  ssr: {
    optimizeDeps: {
      /**
       * Include dependencies here if they throw CJS<>ESM errors.
       * For example, for the following error:
       *
       * > ReferenceError: module is not defined
       * >   at /Users/.../node_modules/example-dep/index.js:1:1
       *
       * Include 'example-dep' in the array below.
       * @see https://vitejs.dev/config/dep-optimization-options
       */
      include: ['react-responsive', 'matchmediaquery'],
    },
  },
  optimizeDeps: {
    include: ['react-responsive', 'matchmediaquery'],
  },
});
</file>

<file path="app/components/Aside.tsx">
import {
  createContext,
  type ReactNode,
  useContext,
  useEffect,
  useState,
} from 'react';
import {X} from 'lucide-react';

type AsideType = 'search' | 'cart' | 'mobile' | 'mobile-menu' | 'closed';
type AsideContextValue = {
  type: AsideType;
  open: (mode: AsideType) => void;
  close: () => void;
};

/**
 * A side bar component with Overlay
 * @example
 * ```jsx
 * <Aside type="search" heading="SEARCH">
 *  <input type="search" />
 *  ...
 * </Aside>
 * ```
 */
export function Aside({
  children,
  heading,
  type,
}: {
  children?: React.ReactNode;
  type: AsideType;
  heading: React.ReactNode;
}) {
  const {type: activeType, close} = useAside();
  const expanded = type === activeType;
  
  // Determine positioning and spacing based on aside type
  const isMobileMenu = type === 'mobile-menu' || type === 'mobile';
  const positionClasses = isMobileMenu
    ? 'left-0 right-auto mr-6'  // For mobile menu: stick to left, margin on right
    : 'right-0 left-auto ml-6'; // For cart/search: stick to right, margin on left
  const transformClasses = isMobileMenu
    ? expanded ? 'translate-x-0 opacity-100' : '-translate-x-full opacity-0'
    : expanded ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0';

  useEffect(() => {
    const abortController = new AbortController();

    if (expanded) {
      document.addEventListener(
        'keydown',
        function handler(event: KeyboardEvent) {
          if (event.key === 'Escape') {
            close();
          }
        },
        {signal: abortController.signal},
      );
    }
    return () => abortController.abort();
  }, [close, expanded]);

  return (
    <div
      aria-modal
      className={`
        fixed inset-0 z-50 transition-all duration-300 ease-in-out
        ${expanded ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}
      `}
      role="dialog"
      data-type={type}
    >
      {/* Backdrop */}
      <button 
        className={`
          absolute inset-0 bg-black/60 backdrop-blur-sm 
          transition-opacity duration-300 ease-in-out
          ${expanded ? 'opacity-100' : 'opacity-0'}
        `}
        onClick={close}
        onKeyDown={(e) => {
          if (e.key === 'Enter' || e.key === 'Space') {
            close();
          }
        }}
        aria-label="Close panel"
      />

      {/* Panel */}
      <div 
        className={`
          fixed top-6 bottom-6 ${positionClasses} w-[calc(100%-1.5rem)] sm:w-[480px] bg-black
          transform transition-all duration-300 ease-in-out
          ${transformClasses}
          overflow-y-auto
          clip-path-aside
          text-white
          shadow-[0_0_30px_rgba(255,255,255,0.1)]
          cyberpunk-scrollbar
        `}
      >
        {/* Header */}
        <header className="sticky top-0 z-10 flex items-center justify-between p-6 bg-black/80 backdrop-blur-sm">
          <h3 className="text-white font-oxanium text-2xl uppercase tracking-wider">{heading}</h3>
          <button 
            onClick={close} 
            className="text-white hover:text-neutral-400 transition-colors cursor-pointer"
            aria-label="Close"
          >
            <X className="w-6 h-6" />
          </button>
        </header>

        {/* Content */}
        <main className="relative text-white">
          {children}
        </main>
      </div>
    </div>
  );
}

const AsideContext = createContext<AsideContextValue | null>(null);

Aside.Provider = function AsideProvider({children}: {children: ReactNode}) {
  const [type, setType] = useState<AsideType>('closed');

  return (
    <AsideContext.Provider
      value={{
        type,
        open: setType,
        close: () => setType('closed'),
      }}
    >
      {children}
    </AsideContext.Provider>
  );
};

export function useAside() {
  const aside = useContext(AsideContext);
  if (!aside) {
    throw new Error('useAside must be used within an AsideProvider');
  }
  return aside;
}
</file>

<file path="app/components/CartLineItem.tsx">
import type {CartLineUpdateInput} from '@shopify/hydrogen/storefront-api-types';
import type {CartLayout} from '~/components/CartMain';
import {CartForm, Image, type OptimisticCartLine} from '@shopify/hydrogen';
import {useVariantUrl} from '~/lib/variants';
import {Link} from 'react-router';
import {ProductPrice} from './ProductPrice';
import {useAside} from './Aside';
import type {CartApiQueryFragment} from 'storefrontapi.generated';

type CartLine = OptimisticCartLine<CartApiQueryFragment>;

/**
 * A single line item in the cart. It displays the product image, title, price.
 * It also provides controls to update the quantity or remove the line item.
 */
export function CartLineItem({
  layout,
  line,
}: {
  layout: CartLayout;
  line: CartLine;
}) {
  const {id, merchandise} = line;
  const {product, title, image, selectedOptions} = merchandise;
  const lineItemUrl = useVariantUrl(product.handle, selectedOptions);
  const {close} = useAside();

  return (
    <li key={id} className="cart-line">
      {image && (
        <Image
          alt={title}
          aspectRatio="1/1"
          data={image}
          height={100}
          loading="lazy"
          width={100}
        />
      )}

      <div className="cart-line-content">
        <div>
          <Link
            prefetch="intent"
            to={lineItemUrl}
            onClick={() => {
              if (layout === 'aside') {
                close();
              }
            }}
          >
            <p>
              <strong>{product.title}</strong>
            </p>
          </Link>
          <ProductPrice price={line?.cost?.totalAmount} />
          <ul>
            {selectedOptions.map((option) => (
              <li key={option.name}>
                <small>
                  {option.name}: {option.value}
                </small>
              </li>
            ))}
          </ul>
        </div>
        <CartLineQuantity line={line} />
      </div>
    </li>
  );
}

/**
 * Provides the controls to update the quantity of a line item in the cart.
 * These controls are disabled when the line item is new, and the server
 * hasn't yet responded that it was successfully added to the cart.
 */
function CartLineQuantity({line}: {line: CartLine}) {
  if (!line || typeof line?.quantity === 'undefined') return null;
  const {id: lineId, quantity, isOptimistic} = line;
  const prevQuantity = Number(Math.max(0, quantity - 1).toFixed(0));
  const nextQuantity = Number((quantity + 1).toFixed(0));

  return (
    <div className="cart-line-quantity">
      <small>Quantity:&nbsp;</small>
      <CartLineUpdateButton lines={[{id: lineId, quantity: prevQuantity}]}> 
        <button
          aria-label="Decrease quantity"
          disabled={quantity <= 1 || !!isOptimistic}
          name="decrease-quantity"
          value={prevQuantity}
        >
          <span>&#8722;</span>
        </button>
      </CartLineUpdateButton>
      <span style={{minWidth: 24, display: 'inline-block', textAlign: 'center'}}>{quantity}</span>
      <CartLineUpdateButton lines={[{id: lineId, quantity: nextQuantity}]}> 
        <button
          aria-label="Increase quantity"
          name="increase-quantity"
          value={nextQuantity}
          disabled={!!isOptimistic}
        >
          <span>&#43;</span>
        </button>
      </CartLineUpdateButton>
      &nbsp;
      <CartLineRemoveButton lineIds={[lineId]} disabled={!!isOptimistic} />
    </div>
  );
}

/**
 * A button that removes a line item from the cart. It is disabled
 * when the line item is new, and the server hasn't yet responded
 * that it was successfully added to the cart.
 */
function CartLineRemoveButton({
  lineIds,
  disabled,
}: {
  lineIds: string[];
  disabled: boolean;
}) {
  return (
    <CartForm
      fetcherKey={getUpdateKey(lineIds)}
      route="/cart"
      action={CartForm.ACTIONS.LinesRemove}
      inputs={{lineIds}}
    >
      <button disabled={disabled} type="submit">
        Remove
      </button>
    </CartForm>
  );
}

function CartLineUpdateButton({
  children,
  lines,
}: {
  children: React.ReactNode;
  lines: CartLineUpdateInput[];
}) {
  const lineIds = lines.map((line) => line.id);

  return (
    <CartForm
      fetcherKey={getUpdateKey(lineIds)}
      route="/cart"
      action={CartForm.ACTIONS.LinesUpdate}
      inputs={{lines}}
    >
      {children}
    </CartForm>
  );
}

/**
 * Returns a unique key for the update action. This is used to make sure actions modifying the same line
 * items are not run concurrently, but cancel each other. For example, if the user clicks "Increase quantity"
 * and "Decrease quantity" in rapid succession, the actions will cancel each other and only the last one will run.
 * @param lineIds - line ids affected by the update
 * @returns
 */
function getUpdateKey(lineIds: string[]) {
  return [CartForm.ACTIONS.LinesUpdate, ...lineIds].join('-');
}
</file>

<file path="app/components/CartSummary.tsx">
import type {CartApiQueryFragment} from 'storefrontapi.generated';
import type {CartLayout} from '~/components/CartMain';
import {CartForm, Money, type OptimisticCart} from '@shopify/hydrogen';
import {useRef} from 'react';
import {FetcherWithComponents} from 'react-router';

type CartSummaryProps = {
  cart: OptimisticCart<CartApiQueryFragment | null>;
  layout: CartLayout;
};

export function CartSummary({cart, layout}: CartSummaryProps) {
  const className =
    layout === 'page' ? 'cart-summary-page' : 'cart-summary-aside';

  return (
    <div aria-labelledby="cart-summary" className={className}>
      <div className="cart-summary-content">
        <h4>Totals</h4>
        <dl className="cart-subtotal">
          <dt>Subtotal</dt>
          <dd>
            {cart.cost?.subtotalAmount?.amount ? (
              <Money data={cart.cost?.subtotalAmount} />
            ) : (
              '-'
            )}
          </dd>
        </dl>
        
        <div>
          <form className="cart-discount-form">
            <input 
              type="text" 
              name="discountCode" 
              placeholder="Discount code"
              aria-label="Discount code"
            />
            <button type="submit">Apply</button>
          </form>
        </div>
      </div>
      <CartCheckoutActions checkoutUrl={cart.checkoutUrl} />
    </div>
  );
}

function CartCheckoutActions({checkoutUrl}: {checkoutUrl?: string}) {
  if (!checkoutUrl) return null;

  return (
    <div>
      <a href={checkoutUrl} className="cart-checkout-button">
        <span>Continue to Checkout</span>
        
      </a>
    </div>
  );
}

function CartDiscounts({
  discountCodes,
}: {
  discountCodes?: CartApiQueryFragment['discountCodes'];
}) {
  const codes: string[] =
    discountCodes
      ?.filter((discount) => discount.applicable)
      ?.map(({code}) => code) || [];

  return (
    <div>
      {/* Have existing discount, display it with a remove option */}
      <dl hidden={!codes.length}>
        <div>
          <dt>Discount(s)</dt>
          <UpdateDiscountForm>
            <div className="cart-discount">
              <code>{codes?.join(', ')}</code>
              &nbsp;
              <button>Remove</button>
            </div>
          </UpdateDiscountForm>
        </div>
      </dl>

      {/* Show an input to apply a discount */}
      <UpdateDiscountForm discountCodes={codes}>
        <div>
          <input type="text" name="discountCode" placeholder="Discount code" />
          &nbsp;
          <button type="submit">Apply</button>
        </div>
      </UpdateDiscountForm>
    </div>
  );
}

function UpdateDiscountForm({
  discountCodes,
  children,
}: {
  discountCodes?: string[];
  children: React.ReactNode;
}) {
  return (
    <CartForm
      route="/cart"
      action={CartForm.ACTIONS.DiscountCodesUpdate}
      inputs={{
        discountCodes: discountCodes || [],
      }}
    >
      {children}
    </CartForm>
  );
}

function CartGiftCard({
  giftCardCodes,
}: {
  giftCardCodes: CartApiQueryFragment['appliedGiftCards'] | undefined;
}) {
  const appliedGiftCardCodes = useRef<string[]>([]);
  const giftCardCodeInput = useRef<HTMLInputElement>(null);
  const codes: string[] =
    giftCardCodes?.map(({lastCharacters}) => `***${lastCharacters}`) || [];

  function saveAppliedCode(code: string) {
    const formattedCode = code.replace(/\s/g, ''); // Remove spaces
    if (!appliedGiftCardCodes.current.includes(formattedCode)) {
      appliedGiftCardCodes.current.push(formattedCode);
    }
    giftCardCodeInput.current!.value = '';
  }

  function removeAppliedCode() {
    appliedGiftCardCodes.current = [];
  }

  return (
    <div>
      {/* Have existing gift card applied, display it with a remove option */}
      <dl hidden={!codes.length}>
        <div>
          <dt>Applied Gift Card(s)</dt>
          <UpdateGiftCardForm>
            <div className="cart-discount">
              <code>{codes?.join(', ')}</code>
              &nbsp;
              <button onSubmit={() => removeAppliedCode}>Remove</button>
            </div>
          </UpdateGiftCardForm>
        </div>
      </dl>

      {/* Show an input to apply a discount */}
      <UpdateGiftCardForm
        giftCardCodes={appliedGiftCardCodes.current}
        saveAppliedCode={saveAppliedCode}
      >
        <div>
          <input
            type="text"
            name="giftCardCode"
            placeholder="Gift card code"
            ref={giftCardCodeInput}
          />
          &nbsp;
          <button type="submit">Apply</button>
        </div>
      </UpdateGiftCardForm>
    </div>
  );
}

function UpdateGiftCardForm({
  giftCardCodes,
  saveAppliedCode,
  children,
}: {
  giftCardCodes?: string[];
  saveAppliedCode?: (code: string) => void;
  removeAppliedCode?: () => void;
  children: React.ReactNode;
}) {
  return (
    <CartForm
      route="/cart"
      action={CartForm.ACTIONS.GiftCardCodesUpdate}
      inputs={{
        giftCardCodes: giftCardCodes || [],
      }}
    >
      {(fetcher: FetcherWithComponents<any>) => {
        const code = fetcher.formData?.get('giftCardCode');
        if (code && saveAppliedCode) {
          saveAppliedCode(code as string);
        }
        return children;
      }}
    </CartForm>
  );
}
</file>

<file path="app/components/PageLayout.tsx">
import {Await, Link} from 'react-router';
import {Suspense, useId} from 'react';
import type {
  CartApiQueryFragment,
  FooterQuery,
  HeaderQuery,
} from 'storefrontapi.generated';
import {Aside} from '~/components/Aside';
import {Footer} from '~/components/Footer';
import {KprHeader, HeaderMenu} from '~/components/KprHeader';
import {CartMain} from '~/components/CartMain';
import {
  SEARCH_ENDPOINT,
  SearchFormPredictive,
} from '~/components/SearchFormPredictive';
import {SearchResultsPredictive} from '~/components/SearchResultsPredictive';

interface PageLayoutProps {
  cart: Promise<CartApiQueryFragment | null>;
  footer: Promise<FooterQuery | null>;
  header: HeaderQuery;
  isLoggedIn: Promise<boolean>;
  publicStoreDomain: string;
  children?: React.ReactNode;
}

export function PageLayout({
  cart,
  children = null,
  footer,
  header,
  isLoggedIn,
  publicStoreDomain,
}: PageLayoutProps) {
  return (
    <div className="bg-black text-white min-h-screen">
      <Aside.Provider>
        <CartAside cart={cart} />
        <SearchAside />
        <MobileMenuAside header={header} publicStoreDomain={publicStoreDomain} />
        {/* Temporarily hidden header for Hero testing */}
        {/* {header && (
          <KprHeader
            header={header}
            cart={cart}
            isLoggedIn={isLoggedIn}
            publicStoreDomain={publicStoreDomain}
          />
        )} */}
        <main className="min-h-screen bg-black text-white">
          
          {children}
        </main>
        <Footer
          footer={footer}
          header={header}
          publicStoreDomain={publicStoreDomain}
        />
      </Aside.Provider>
    </div>
  );
}

function CartAside({cart}: {cart: PageLayoutProps['cart']}) {
  return (
    <Aside type="cart" heading="CART">
      <Suspense fallback={<p>Loading cart ...</p>}>
        <Await resolve={cart}>
          {(cart) => {
            return <CartMain cart={cart} layout="aside" />;
          }}
        </Await>
      </Suspense>
    </Aside>
  );
}

function SearchAside() {
  const queriesDatalistId = useId();
  return (
    <Aside type="search" heading="SEARCH">
      <div className="predictive-search">
        <br />
        <SearchFormPredictive>
          {({fetchResults, goToSearch, inputRef}) => (
            <>
              <input
                name="q"
                onChange={fetchResults}
                onFocus={fetchResults}
                placeholder="Search"
                ref={inputRef}
                type="search"
                list={queriesDatalistId}
              />
              &nbsp;
              <button onClick={goToSearch}>Search</button>
            </>
          )}
        </SearchFormPredictive>

        <SearchResultsPredictive>
          {({items, total, term, state, closeSearch}) => {
            const {articles, collections, pages, products, queries} = items;

            if (state === 'loading' && term.current) {
              return <div>Loading...</div>;
            }

            if (!total) {
              return <SearchResultsPredictive.Empty term={term} />;
            }

            return (
              <>
                <SearchResultsPredictive.Queries
                  queries={queries}
                  queriesDatalistId={queriesDatalistId}
                />
                <SearchResultsPredictive.Products
                  products={products}
                  closeSearch={closeSearch}
                  term={term}
                />
                <SearchResultsPredictive.Collections
                  collections={collections}
                  closeSearch={closeSearch}
                  term={term}
                />
                <SearchResultsPredictive.Pages
                  pages={pages}
                  closeSearch={closeSearch}
                  term={term}
                />
                <SearchResultsPredictive.Articles
                  articles={articles}
                  closeSearch={closeSearch}
                  term={term}
                />
                {term.current && total ? (
                  <Link
                    onClick={closeSearch}
                    to={`${SEARCH_ENDPOINT}?q=${term.current}`}
                  >
                    <p>
                      View all results for <q>{term.current}</q>
                      &nbsp; →
                    </p>
                  </Link>
                ) : null}
              </>
            );
          }}
        </SearchResultsPredictive>
      </div>
    </Aside>
  );
}

function MobileMenuAside({
  header,
  publicStoreDomain,
}: {
  header: PageLayoutProps['header'];
  publicStoreDomain: PageLayoutProps['publicStoreDomain'];
}) {
  return (
    header.menu &&
    header.shop.primaryDomain?.url && (
      <Aside type="mobile" heading="MENU">
        <HeaderMenu
          menu={header.menu}
          viewport="mobile"
          primaryDomainUrl={header.shop.primaryDomain.url}
          publicStoreDomain={publicStoreDomain}
        />
      </Aside>
    )
  );
}
</file>

<file path="app/components/sections/TraditionalVideo.tsx">
import gsap from 'gsap';
import { useGSAP } from '@gsap/react';
import { useRef, useEffect } from "react"

const TraditionalVideo = () => {
  const videoRef = useRef<HTMLVideoElement>(null);

  useGSAP(() => {
    gsap.set('.traditional-video-wrapper', { marginTop: '-150vh', opacity: 0 });

    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: '.traditional-video-wrapper',
        start: 'top top',
        end: '+=200% top',
        scrub: true,
        pin: true,
      }
    });

    tl.to('.hero-section', { delay: 0.5, opacity: 0, ease: 'power1.inOut' });
    tl.to('.traditional-video-wrapper', { opacity: 1, duration: 2, ease: 'power1.inOut' });

    // Wait for video metadata to load, then add scrubbing
    const video = videoRef.current;
    if (video) {
      const handleLoadedMetadata = () => {
        tl.to(video, { 
          currentTime: video.duration, 
          duration: 3, 
          ease: 'none' // Use 'none' for smooth scrubbing
        }, '<');
      };

      if (video.readyState >= 1) {
        // Metadata already loaded
        handleLoadedMetadata();
      } else {
        // Wait for metadata to load
        video.addEventListener('loadedmetadata', handleLoadedMetadata, { once: true });
      }
    }
  }, []);

  // Handle video setup
  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    // Ensure video is properly configured
    video.muted = true;
    video.defaultMuted = true;
    video.playsInline = true;
    
    // Prevent video from auto-playing
    video.pause();
    
    const handleCanPlay = () => {
      // Set initial frame
      video.currentTime = 0;
    };

    video.addEventListener('canplay', handleCanPlay, { once: true });

    return () => {
      video.removeEventListener('canplay', handleCanPlay);
    };
  }, []);

  return (
    <section className="traditional-video-wrapper">
      <div className="h-dvh">
        <video 
          ref={videoRef}
          muted
          playsInline
          preload="auto"
          src="/videos/outputtest.mp4"
          className="traditional-video"
        />
      </div>
    </section>
  )
}

export default TraditionalVideo
</file>

<file path="app/root.tsx">
import {Analytics, getShopAnalytics, useNonce} from '@shopify/hydrogen';
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {
  Outlet,
  useRouteError,
  isRouteErrorResponse,
  type ShouldRevalidateFunction,
  Links,
  Meta,
  Scripts,
  ScrollRestoration,
  useRouteLoaderData,
} from 'react-router';
import favicon from '~/assets/favicon.svg';
import {FOOTER_QUERY, HEADER_QUERY} from '~/lib/fragments';
import resetStyles from '~/styles/reset.css?url';
import appStyles from '~/styles/app.css?url';
import tailwindCss from './styles/tailwind.css?url';
import {PageLayout} from './components/PageLayout';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

export type RootLoader = typeof loader;

gsap.registerPlugin(ScrollTrigger);

/**
 * This is important to avoid re-fetching root queries on sub-navigations
 */
export const shouldRevalidate: ShouldRevalidateFunction = ({
  formMethod,
  currentUrl,
  nextUrl,
}) => {
  // revalidate when a mutation is performed e.g add to cart, login...
  if (formMethod && formMethod !== 'GET') return true;

  // revalidate when manually revalidating via useRevalidator
  if (currentUrl.toString() === nextUrl.toString()) return true;

  // Defaulting to no revalidation for root loader data to improve performance.
  // When using this feature, you risk your UI getting out of sync with your server.
  // Use with caution. If you are uncomfortable with this optimization, update the
  // line below to `return defaultShouldRevalidate` instead.
  // For more details see: https://remix.run/docs/en/main/route/should-revalidate
  return false;
};

/**
 * The main and reset stylesheets are added in the Layout component
 * to prevent a bug in development HMR updates.
 *
 * This avoids the "failed to execute 'insertBefore' on 'Node'" error
 * that occurs after editing and navigating to another page.
 *
 * It's a temporary fix until the issue is resolved.
 * https://github.com/remix-run/remix/issues/9242
 */
export function links() {
  return [
    {
      rel: 'preconnect',
      href: 'https://cdn.shopify.com',
    },
    {
      rel: 'preconnect',
      href: 'https://shop.app',
    },
    {rel: 'icon', type: 'image/svg+xml', href: favicon},
  ];
}

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  const {storefront, env} = args.context;

  return {
    ...deferredData,
    ...criticalData,
    publicStoreDomain: env.PUBLIC_STORE_DOMAIN,
    shop: getShopAnalytics({
      storefront,
      publicStorefrontId: env.PUBLIC_STOREFRONT_ID,
    }),
    consent: {
      checkoutDomain: env.PUBLIC_CHECKOUT_DOMAIN,
      storefrontAccessToken: env.PUBLIC_STOREFRONT_API_TOKEN,
      withPrivacyBanner: false,
      // localize the privacy banner
      country: args.context.storefront.i18n.country,
      language: args.context.storefront.i18n.language,
    },
  };
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context}: LoaderFunctionArgs) {
  const {storefront} = context;

  const [header] = await Promise.all([
    storefront.query(HEADER_QUERY, {
      cache: storefront.CacheLong(),
      variables: {
        headerMenuHandle: 'main-menu', // Adjust to your header menu handle
      },
    }),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {header};
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  const {storefront, customerAccount, cart} = context;

  // defer the footer query (below the fold)
  const footer = storefront
    .query(FOOTER_QUERY, {
      cache: storefront.CacheLong(),
      variables: {
        footerMenuHandle: 'footer', // Adjust to your footer menu handle
      },
    })
    .catch((error) => {
      // Log query errors, but don't throw them so the page can still render
      console.error(error);
      return null;
    });
  return {
    cart: cart.get(),
    isLoggedIn: customerAccount.isLoggedIn(),
    footer,
  };
}

export function Layout({children}: {children?: React.ReactNode}) {
  const nonce = useNonce();
  const data = useRouteLoaderData<RootLoader>('root');

  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <link rel="stylesheet" href={tailwindCss}></link>
        <link rel="stylesheet" href={resetStyles}></link>
        <link rel="stylesheet" href={appStyles}></link>
        <Meta />
        <Links />
      </head>
      <body className="bg-black text-white min-h-screen">
        {data ? (
          <Analytics.Provider
            cart={data.cart}
            shop={data.shop}
            consent={data.consent}
          >
            <PageLayout {...data}>{children}</PageLayout>
          </Analytics.Provider>
        ) : (
          children
        )}
        <ScrollRestoration nonce={nonce} />
        <Scripts nonce={nonce} />
      </body>
    </html>
  );
}

export default function App() {
  return <Outlet />;
}

export function ErrorBoundary() {
  const error = useRouteError();
  let errorMessage = 'Unknown error';
  let errorStatus = 500;

  if (isRouteErrorResponse(error)) {
    errorMessage = error?.data?.message ?? error.data;
    errorStatus = error.status;
  } else if (error instanceof Error) {
    errorMessage = error.message;
  }

  return (
    <div className="route-error">
      <h1>Oops</h1>
      <h2>{errorStatus}</h2>
      {errorMessage && (
        <fieldset>
          <pre>{errorMessage}</pre>
        </fieldset>
      )}
    </div>
  );
}
</file>

<file path="app/styles/reset.css">
/* Dark Theme Reset */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html {
  background-color: #000000;
  color: #ffffff;
}

body {
  margin: 0;
  padding: 0;
  background-color: #000000;
  color: #ffffff;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  min-height: 100vh;
}

/* Ensure all major containers have dark background */
#root,
[data-react-root],
.app {
  background-color: #000000;
  color: #ffffff;
  min-height: 100vh;
}

/* Reset button and form elements to inherit dark theme */

input,
textarea,
select {
  background-color: inherit;
  color: inherit;
  border: 1px solid #333333;
}

/* Ensure links are visible on dark background */
a {
  color: #ffffff;
}

a:hover {
  color: #cccccc;
}
</file>

<file path="package.json">
{
  "name": "kyperus-storefront",
  "private": true,
  "sideEffects": false,
  "version": "2025.5.1",
  "type": "module",
  "scripts": {
    "build": "shopify hydrogen build --codegen",
    "dev": "shopify hydrogen dev --codegen",
    "preview": "shopify hydrogen preview --build",
    "lint": "eslint --no-error-on-unmatched-pattern .",
    "typecheck": "tsc --noEmit",
    "codegen": "shopify hydrogen codegen"
  },
  "prettier": "@shopify/prettier-config",
  "dependencies": {
    "@gsap/react": "^2.1.2",
    "@shopify/hydrogen": "2025.5.0",
    "@shopify/remix-oxygen": "^3.0.0",
    "graphql": "^16.10.0",
    "graphql-tag": "^2.12.6",
    "gsap": "^3.13.0",
    "isbot": "^5.1.22",
    "lenis": "^1.3.4",
    "lucide-react": "^0.523.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-responsive": "^10.0.1",
    "react-router": "7.6.0",
    "react-router-dom": "7.6.0",
    "tailwindcss": "^4.1.10"
  },
  "devDependencies": {
    "@eslint/compat": "^1.2.5",
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@graphql-codegen/cli": "5.0.2",
    "@react-router/dev": "7.6.0",
    "@react-router/fs-routes": "7.6.0",
    "@shopify/cli": "~3.80.4",
    "@shopify/hydrogen-codegen": "^0.3.3",
    "@shopify/mini-oxygen": "^3.2.1",
    "@shopify/oxygen-workers-types": "^4.1.6",
    "@shopify/prettier-config": "^1.1.2",
    "@tailwindcss/vite": "^4.1.10",
    "@total-typescript/ts-reset": "^0.6.1",
    "@types/eslint": "^9.6.1",
    "@types/react": "^18.2.22",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^8.21.0",
    "@typescript-eslint/parser": "^8.21.0",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-import-resolver-typescript": "^3.7.0",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jest": "^28.11.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.1.0",
    "globals": "^15.14.0",
    "prettier": "^3.4.2",
    "typescript": "^5.2.2",
    "vite": "^6.2.4",
    "vite-tsconfig-paths": "^4.3.1"
  },
  "engines": {
    "node": ">=18.0.0"
  },
  "browserslist": [
    "defaults"
  ]
}
</file>

<file path="tsconfig.json">
{
  "include": [
    "./**/*.d.ts",
    "./**/*.ts",
    "./**/*.tsx",
    ".react-router/types/**/*"
, "tailwind.config.js", "app/constants/index.js"  ],
  "compilerOptions": {
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ES2022"
    ],
    "isolatedModules": true,
    "esModuleInterop": true,
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "module": "ES2022",
    "target": "ES2022",
    "strict": true,
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "types": [
      "@shopify/oxygen-workers-types",
      "react-router",
      "vite/client"
    ],
    "paths": {
      "~/*": [
        "app/*"
      ]
    },
    "noEmit": true,
    "rootDirs": [".", "./.react-router/types"]
  }
}
</file>

<file path="app/components/Header.tsx">
import {Suspense, useState} from 'react';
import {Await, NavLink, useAsyncValue} from 'react-router';
import {
  type CartViewPayload,
  useAnalytics,
  useOptimisticCart,
} from '@shopify/hydrogen';
import type {HeaderQuery, CartApiQueryFragment} from 'storefrontapi.generated';
import {useAside} from '~/components/Aside';
import {useEffect} from 'react';
import {Menu, Search as SearchIcon, Skull, Hexagon} from 'lucide-react';
import {MatrixNavLink} from './MatrixNavLink';
import {MobileMenu} from './MobileMenu';

interface HeaderProps {
  header: HeaderQuery;
  cart: Promise<CartApiQueryFragment | null>;
  isLoggedIn: Promise<boolean>;
  publicStoreDomain: string;
}

type Viewport = 'desktop' | 'mobile';

export function Header({
  header,
  isLoggedIn,
  cart,
  publicStoreDomain,
}: HeaderProps) {
  const {shop, menu} = header;
  const [isScrolled, setIsScrolled] = useState(false);
  const [isScrollingUp, setIsScrollingUp] = useState(false);
  const [lastScrollY, setLastScrollY] = useState(0);
  const {type: asideType, open} = useAside();

  useEffect(() => {
    const root = document.documentElement;
    root.style.setProperty('--announcement-height', isScrolled ? '0' : '40px');
    root.style.setProperty('--header-height', 'auto');

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      setIsScrolled(currentScrollY > 50);
      setIsScrollingUp(currentScrollY < lastScrollY);
      setLastScrollY(currentScrollY);
    };

    window.addEventListener('scroll', handleScroll, {passive: true});

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [lastScrollY, isScrolled, asideType]);

  return (
    <>
      <div
        className={`sticky top-0 z-40 w-full bg-black transition-transform duration-500 ease-in-out
        ${isScrolled && !isScrollingUp ? '-translate-y-full' : 'translate-y-0'}`}
      >
        {/* Announcement */}
        <div
          className={`announcement-bar overflow-hidden transition-all duration-300 ease-in-out bg-black text-white border-b border-white/10 ${isScrolled ? 'h-0 py-0 border-opacity-0' : 'h-8 py-1 border-opacity-100'}`}
        >
          <div className="container mx-auto text-center px-4 text-sm">
            <p className="font-oxanium text-[14px] leading-tight sm:text-[16px] font-light tracking-wider">
              Free shipping on orders over $100
            </p>
          </div>
        </div>
        {/* Main Header */}
        <header
          className={`h-auto transition-all duration-500 ease-in-out ${isScrolled ? 'bg-black/80 backdrop-blur-lg shadow-md border-transparent' : 'bg-black border-b border-neutral-800'}`}
        >
          <div className="container mx-auto">
            {/* Header Content */}
            <div
              className={`relative flex items-center justify-between px-4 sm:px-6 transition-all duration-300 ease-in-out max-lg:py-6 lg:py-2`}
            >
              {/* Mobile Menu Toggle */}
              <div className="lg:hidden">
                <button
                  onClick={() => open('mobile-menu')}
                  className="p-2 -ml-2 text-white hover:text-neutral-400 transition-colors"
                >
                  <Menu className="w-6 h-6" />
                </button>
              </div>

              {/* Desktop Navigation */}
              <div className="hidden lg:flex lg:w-1/3">
                <HeaderMenu
                  menu={menu}
                  viewport="desktop"
                  primaryDomainUrl={header.shop.primaryDomain.url}
                  publicStoreDomain={publicStoreDomain}
                />
              </div>

              {/* Logo - Responsive for both mobile and desktop */}
              <div className="max-lg:absolute max-lg:left-1/2 max-lg:-translate-x-1/2 lg:w-1/3 lg:flex lg:items-center lg:justify-center">
                <NavLink
                  prefetch="intent"
                  to="/"
                  className="block"
                >
                  <img 
                    src="/images/logo_kyperus_w.png" 
                    alt={shop.name}
                    className={`h-auto transition-all duration-300 ease-in-out ${isScrolled ? 'w-24' : 'w-[120px]'}`}
                  />
                </NavLink>
              </div>

              {/* Right actions - Search and Cart */}
              <div className="lg:w-1/3 lg:flex lg:items-center lg:justify-end">
                <HeaderCtas isLoggedIn={isLoggedIn} cart={cart} />
              </div>
            </div>
          </div>
        </header>
      </div>

      {/* Mobile Menu */}
      <MobileMenu
        menu={menu}
        publicStoreDomain={publicStoreDomain}
        primaryDomainUrl={header.shop.primaryDomain.url}
      />
    </>
  );
}

export function HeaderMenu({
  menu,
  primaryDomainUrl,
  viewport,
  publicStoreDomain,
}: {
  menu: HeaderProps['header']['menu'];
  primaryDomainUrl: HeaderProps['header']['shop']['primaryDomain']['url'];
  viewport: Viewport;
  publicStoreDomain: HeaderProps['publicStoreDomain'];
}) {
  const {close} = useAside();

  const desktopClassName =
    'flex items-center gap-6 text-sm uppercase justify-center text-white';
  const mobileClassName =
    'flex flex-col items-center justify-center space-y-4 text-sm uppercase';

  return (
    <nav
      className={viewport === 'desktop' ? desktopClassName : mobileClassName}
      role="navigation"
    >
      {viewport === 'mobile' && (
        <div className="w-full text-center">
          <MatrixNavLink to="/" onClick={() => close()}>
            Home
          </MatrixNavLink>
        </div>
      )}
      {viewport === 'desktop' &&
        menu?.items.map((item) => {
          if (!item.url) return null;
          const url =
            item.url.includes('myshopify.com') ||
            item.url.includes(publicStoreDomain) ||
            item.url.includes(primaryDomainUrl)
              ? new URL(item.url).pathname
              : item.url;
          return (
            <MatrixNavLink
              key={item.id}
              to={url}
              onClick={() => close()}
            >
              {item.title}
            </MatrixNavLink>
          );
        })}
    </nav>
  );
}

function HeaderCtas({
  isLoggedIn,
  cart,
}: Pick<HeaderProps, 'isLoggedIn' | 'cart'>) {
  return (
    <nav className="flex items-center gap-4 text-white" role="navigation">
      <SearchToggle />
      <CartToggle cart={cart} />
    </nav>
  );
}

function SearchToggle() {
  const {open} = useAside();
  return (
    <button 
      className="relative group header-icon-button" 
      onClick={() => open('search')}
      aria-label="Search"
    >
      <Hexagon className="w-12 h-12 text-white/20 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 group-hover:text-white/30 transition-colors" strokeWidth={1} />
      <SearchIcon className="w-6 h-6 relative z-10 group-hover:text-neutral-400 transition-colors" strokeWidth={1.5} />
    </button>
  );
}

function CartBadge({count}: {count: number | null}) {
  const {open} = useAside();
  const {publish, shop, cart, prevCart} = useAnalytics();

  return (
    <button
      className="relative group header-icon-button"
      onClick={() => {
        open('cart');
        publish('cart_viewed', {
          cart,
          prevCart,
          shop,
          url: window.location.href || '',
        } as CartViewPayload);
      }}
      aria-label="Cart"
    >
      <Hexagon className="w-12 h-12 text-white/20 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 group-hover:text-white/30 transition-colors" strokeWidth={1} />
      <Skull className="w-6 h-6 relative z-10 group-hover:text-neutral-400 transition-colors" strokeWidth={1.5} />
      {count !== null && count > 0 && (
        <span className="absolute -top-2 -right-2 bg-white text-black text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold z-20">
          {count}
        </span>
      )}
    </button>
  );
}

function CartToggle({cart}: Pick<HeaderProps, 'cart'>) {
  return (
    <Suspense fallback={<CartBadge count={null} />}>
      <Await resolve={cart}>
        <CartBanner />
      </Await>
    </Suspense>
  );
}

function CartBanner() {
  const originalCart = useAsyncValue() as CartApiQueryFragment | null;
  const cart = useOptimisticCart(originalCart);
  return <CartBadge count={cart?.totalQuantity ?? 0} />;
}

const FALLBACK_HEADER_MENU = {
  id: 'gid://shopify/Menu/199655587896',
  items: [
    {
      id: 'gid://shopify/MenuItem/461609500728',
      resourceId: null,
      tags: [],
      title: 'Collections',
      type: 'HTTP',
      url: '/collections',
      items: [],
    },
    {
      id: 'gid://shopify/MenuItem/461609533496',
      resourceId: null,
      tags: [],
      title: 'Blog',
      type: 'HTTP',
      url: '/blogs/journal',
      items: [],
    },
    {
      id: 'gid://shopify/MenuItem/461609566264',
      resourceId: null,
      tags: [],
      title: 'Policies',
      type: 'HTTP',
      url: '/policies',
      items: [],
    },
    {
      id: 'gid://shopify/MenuItem/461609599032',
      resourceId: 'gid://shopify/Page/92591030328',
      tags: [],
      title: 'About',
      type: 'PAGE',
      url: '/pages/about',
      items: [],
    },
  ],
};

function activeLinkStyle({
  isActive,
  isPending,
}: {
  isActive: boolean;
  isPending: boolean;
}) {
  return {
    fontWeight: isActive ? 'bold' : undefined,
    color: isPending ? 'grey' : 'black',
  };
}
</file>

<file path="app/routes/_index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import { Await, useLoaderData, Link, type MetaFunction } from 'react-router';
import {Suspense} from 'react';
import {Image, Money} from '@shopify/hydrogen';
import type {
  FeaturedCollectionFragment,
  RecommendedProductsQuery,
} from 'storefrontapi.generated';
import {ProductItem} from '~/components/ProductItem';

export const meta: MetaFunction = () => {
  return [{title: 'Hydrogen | Home'}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context}: LoaderFunctionArgs) {
  const [{collections}] = await Promise.all([
    context.storefront.query(FEATURED_COLLECTION_QUERY),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {
    featuredCollection: collections.nodes[0],
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  const recommendedProducts = context.storefront
    .query(RECOMMENDED_PRODUCTS_QUERY)
    .catch((error) => {
      // Log query errors, but don't throw them so the page can still render
      console.error(error);
      return null;
    });

  return {
    recommendedProducts,
  };
}

export default function Homepage() {
  const data = useLoaderData<typeof loader>();
  return (
    
    <div className="home">
      <FeaturedCollection collection={data.featuredCollection} />
      <RecommendedProducts products={data.recommendedProducts} />
    </div>
  );
}

function FeaturedCollection({
  collection,
}: {
  collection: FeaturedCollectionFragment;
}) {
  if (!collection) return null;
  const image = collection?.image;
  return (
    <Link
      className="featured-collection"
      to={`/collections/${collection.handle}`}
    >
      {image && (
        <div className="featured-collection-image">
          <Image data={image} sizes="100vw" />
        </div>
      )}
      <h1>{collection.title}</h1>
    </Link>
  );
}

function RecommendedProducts({
  products,
}: {
  products: Promise<RecommendedProductsQuery | null>;
}) {
  return (
    <div className="recommended-products">
      <h2>Recommended Products</h2>
      <Suspense fallback={<div>Loading...</div>}>
        <Await resolve={products}>
          {(response) => (
            <div className="recommended-products-grid">
              {response
                ? response.products.nodes.map((product) => (
                    <ProductItem key={product.id} product={product} />
                  ))
                : null}
            </div>
          )}
        </Await>
      </Suspense>
      <br />
    </div>
  );
}

const FEATURED_COLLECTION_QUERY = `#graphql
  fragment FeaturedCollection on Collection {
    id
    title
    image {
      id
      url
      altText
      width
      height
    }
    handle
  }
  query FeaturedCollection($country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    collections(first: 1, sortKey: UPDATED_AT, reverse: true) {
      nodes {
        ...FeaturedCollection
      }
    }
  }
` as const;

const RECOMMENDED_PRODUCTS_QUERY = `#graphql
  fragment RecommendedProduct on Product {
    id
    title
    handle
    priceRange {
      minVariantPrice {
        amount
        currencyCode
      }
    }
    featuredImage {
      id
      url
      altText
      width
      height
    }
  }
  query RecommendedProducts ($country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    products(first: 4, sortKey: UPDATED_AT, reverse: true) {
      nodes {
        ...RecommendedProduct
      }
    }
  }
` as const;
</file>

<file path="app/styles/tailwind.css">
/**
 * Configure Tailwind v4 in this file using CSS variables and directives:
 * https://tailwindcss.com/docs/v4-beta#css-first-configuration
 */

@import 'tailwindcss';

@theme {
  --font-sans: "IBM Plex Sans", sans-serif;
  --font-long: "Oxanium", sans-serif;
  --font-round-bold: "Round Bold", sans-serif;
  --color-yellow: #fff9cb;
  --color-pink: #ffb0c4;
  --breakpoint-sm: 40rem;
  --breakpoint-xs: 20rem;
  --breakpoint-3xl: 120rem;
}

body {
  width: 100dvw;
  overflow-x: hidden;
  font-family: "IBM Plex Sans", sans-serif;
  background-color: black;
}

main {
  background: linear-gradient(
    223.17deg,
    rgb(28, 24, 41) 0%,
    rgb(27, 24, 40) 8.61%,
    rgb(25, 23, 36) 17.21%,
    rgb(22, 21, 32) 25.82%,
    rgb(20, 19, 28) 34.42%,
    rgb(18, 18, 24) 43.03%,
    rgb(17, 17, 23) 51.63%
  );
}
@layer utilities {
  .flex-center {
    @apply flex justify-center items-center;
  }
  .col-center {
    @apply flex flex-col justify-center items-center;
  }
  .abs-center {
    @apply absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2;
  }
}

@layer components {
  main {
    @apply w-dvw overflow-x-hidden;
  }
 
  .gradient-title {
    @apply md:text-[8rem] text-[5rem] font-round-bold !font-extrabold uppercase md:leading-[7rem] leading-[4.5rem] text-center bg-gradient-to-r from-white/20 via-white/80 to-white/20 bg-clip-text text-transparent w-8/10 ;
  }
  .hero-section {
    @apply w-dvw h-dvh relative overflow-hidden;

    .scale-out {
      @apply object-cover md:scale-105 h-screen w-full;
      object-position: center center; /* Căn giữa ảnh */
    }
    .title-logo {
      @apply absolute top-1/14 left-1/2 -translate-x-1/2 -translate-y-1/2 h-20 md:scale-125 object-cover;
    }
    .trailer-logo {
      @apply absolute bottom-2.5 w-48 left-1/2 -translate-x-1/2;
    }
    .play-img {
      @apply rounded-full md:size-28 size-20 bg-white absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex justify-center items-center;
    }
    .fake-logo-wrapper {
      @apply absolute z-50 xs:top-[9.5rem] sm:top-[12.8rem] md:top-[8.5rem] 2xl:top-44 3xl:top-48 left-1/2 -translate-x-1/2;
    }
    .overlay-logo {
      @apply size-full object-cover opacity-0 w-60 md:w-60 2xl:w-72 3xl:w-80;
    }
  }
  .traditional-video-wrapper {
    .traditional-video {
      @apply size-full object-cover md:[object-position:50%_center] [object-position:75%_center];
    }
  }
  .entrance-message {
    @apply absolute inset-0 w-full h-dvh overflow-hidden z-20 opacity-100;

    .entrance-logo {
      @apply 2xl:w-72 3xl:w-80 md:w-60 w-48 absolute xs:top-[5rem] sm:top-[5rem] md:top-[8.5rem] 2xl:top-20 3xl:top-15 left-1/2 -translate-x-1/2;
    }

    .text-wrapper {
      @apply mt-40 md:mt-60 2xl:mt-44 3xl:top-48 flex justify-center;
    }
  }
  .traditional-concept {
    @apply relative z-10 lg:ps-40 2xl:ps-80 ps-10 py-40 mt-60 flex lg:flex-row flex-col justify-between gap-5 w-dvw overflow-x-hidden;

    h1 {
      @apply font-long uppercase text-6xl mb-20 bg-gradient-to-r from-white/20 via-white/80 to-white/20 bg-clip-text text-transparent;
    }
    h2 {
      @apply text-pink md:text-5xl text-3xl mb-7 md:pe-20 pe-10;
    }
    p {
      @apply text-white md:text-2xl text-lg md:pe-28 pe-14;
    }
    .traditional-concept-1 {
      @apply bg-yellow lg:h-[80vh] w-auto -translate-x-5;

      img {
        @apply size-full object-cover [object-position:5%_center] hover:scale-[0.98] transition duration-700 ease-in-out;
      }
    }
    .traditional-concept-2 {
      @apply bg-yellow h-[90vh] w-auto md:mt-36 mt-20 -translate-x-5;

      img {
        @apply size-full object-cover [object-position:80%_center] hover:scale-x-[0.97] hover:scale-y-[0.98] transition duration-700 ease-in-out;
      }
    }
    .traditional-concept-3 {
      @apply bg-yellow h-[50vh] md:w-[60%] -translate-x-5;

      img {
        @apply size-full object-cover [object-position:42%_center] hover:scale-[0.97] transition duration-700 ease-in-out;
      }
    }
  }
  .lucia {
    @apply relative;
  }
  .lucia-life {
    @apply relative z-10 py-40 mt-60 flex lg:flex-row flex-col justify-between gap-5 w-dvw overflow-x-hidden;

    h1 {
      @apply text-yellow font-long uppercase text-8xl mb-20;
    }
    h2 {
      @apply text-pink md:text-5xl text-3xl mb-7 md:pe-20 pe-10;
    }
    p {
      @apply text-white md:text-2xl text-lg md:pe-28 pe-14;
    }
    p:last-of-type {
      @apply md:hidden block xl:block;
    }
    .lucia-1 {
      @apply bg-yellow lg:h-[80vh] w-auto -translate-x-5;

      img {
        @apply size-full object-cover [object-position:85%_center] hover:scale-[0.98] transition duration-700 ease-in-out;
      }
    }
    .lucia-2 {
      @apply bg-yellow lg:h-[60vh] lg:w-[70%] w-[80%] md:my-36 my-20 lg:-translate-x-5 translate-x-5;

      img {
        @apply size-full object-cover [object-position:50%_center] hover:scale-x-[0.98] hover:scale-y-[0.98] transition duration-700 ease-in-out;
      }
    }
    .lucia-3 {
      @apply bg-yellow lg:h-[90vh] md:w-[60%] -translate-x-5;

      img {
        @apply size-full object-cover [object-position:62%_center] hover:scale-x-[0.98] hover:scale-y-[0.99] transition duration-700 ease-in-out;
      }
    }
  }
  .post-card {
    @apply relative flex justify-center items-center pb-80 shadow-2xl;

    .animated-gradient-bg {
      @apply absolute w-full md:h-[200vh] h-[220vh] left-0 xl:-bottom-1/2 md:-bottom-5/6;
    }

    .post-card-wrapper {
      @apply xl:mx-56 md:mx-12 mx-5 xl:h-[85vh] md:h-[40vh] h-[30vh] w-full flex justify-center items-center overflow-hidden relative;

      video {
        @apply w-full h-full 2xl:scale-x-105 object-cover;
      }

      img {
        @apply absolute z-10 w-full h-full;
      }

      button {
        @apply rounded-full bg-white absolute left-1/2 -translate-x-1/2 md:bottom-16 -bottom-28 md:w-fit w-2/3 px-5 md:px-7 py-4 text-lg;
      }
    }
  }
  .final {
    @apply relative h-dvh overflow-hidden;

    .final-content {
      @apply scale-110;
    }
  }

  .final-message {
    @apply absolute w-full h-dvh overflow-hidden z-50 opacity-100;
  }
}

.black-gradient-bg {
  background: linear-gradient(
    223.17deg,
    rgb(28, 24, 41) 0%,
    rgb(27, 24, 40) 8.61%,
    rgb(25, 23, 36) 17.21%,
    rgb(22, 21, 32) 25.82%,
    rgb(20, 19, 28) 34.42%,
    rgb(18, 18, 24) 43.03%,
    rgb(17, 17, 23) 51.63%
  );
}

.entrance-message {
  mask-image: radial-gradient(circle at 50% 100vh, black 0%, transparent 0%);
  mask-repeat: no-repeat;
  mask-size: 100% 100%;
}

.mask-wrapper {
  mask-image: url("/images/kpr-logo-text.svg");
  mask-repeat: no-repeat;
}

.animated-gradient-bg {
  background: linear-gradient(135deg, #1e2a52 0%, #6e4b91 100%);
}

.traditional-concept-content {
  background: radial-gradient(ellipse, #111117 20%, transparent 70%);
}

.lucia-life-content {
  background: radial-gradient(ellipse, #111117 20%, transparent 70%);
}


/* KprButton Styles */
.kpr-button {
  background: #333333;
  color: white;
  padding: 1rem;
  text-align: center;
  text-transform: uppercase;
  font-family: 'Oxanium', sans-serif;
  font-weight: bold;
  cursor: pointer;
  text-decoration: none;
  display: block;
  margin-top: auto;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  position: relative;
  overflow: hidden;
}

/* Primary Button (similar to .cart-checkout-button) */
.kpr-button-primary::after {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  right: 2px;
  bottom: 2px;
  background: #333333;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  z-index: 1;
}

.kpr-button-primary::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: white;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  transform: translateX(-100%);
  transition: transform 0.4s ease;
  z-index: 2;
}

.kpr-button-primary:hover::before {
  transform: translateX(0);
}

.kpr-button-primary:hover span {
  color: black;
}

/* Secondary Button (similar to .cart-discount-form button with clip path) */
.kpr-button-secondary {
  border: 1px solid rgba(255, 255, 255, 0.6);
  color: white;
  padding: 0.5rem 1.5rem;
  font-family: 'Oxanium', sans-serif;
  text-transform: uppercase;
  cursor: pointer;
  transition: all 0.3s ease;
  background: transparent;
  position: relative;
  overflow: hidden;
}

.kpr-button-secondary::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: #333333;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  transform: translateX(-100%);
  transition: transform 0.3s ease;
  z-index: 1;
  
}

.kpr-button-secondary:hover::before {
  transform: translateX(0);
  
}

.kpr-button-secondary span {
  position: relative;
  z-index: 2;
  transition: color 0.3s ease;
}

.kpr-button-secondary:hover span {
  color: white;
}
</file>

<file path="app/routes/($locale)._index.tsx">
import {type LoaderFunctionArgs} from '@shopify/remix-oxygen';
import {Await, useLoaderData, Link, type MetaFunction} from 'react-router';
import {Suspense} from 'react';
import {Image, Money} from '@shopify/hydrogen';
import type {
  FeaturedCollectionFragment,
  RecommendedProductsQuery,
} from 'storefrontapi.generated';
import {ProductItem} from '~/components/ProductItem';
import {GradientText, GradientHeading} from '~/components/GradientText';
import {KprButton} from '~/components/KprButton';
import TraditionalVideo from '~/components/sections/TraditionalVideo';
import Hero from '~/components/sections/Hero';
import TraditionalConcept from '~/components/sections/TraditionalConcept';




export const meta: MetaFunction = () => {
  return [{title: 'Hydrogen | Home'}];
};

export async function loader(args: LoaderFunctionArgs) {
  // Start fetching non-critical data without blocking time to first byte
  const deferredData = loadDeferredData(args);

  // Await the critical data required to render initial state of the page
  const criticalData = await loadCriticalData(args);

  return {...deferredData, ...criticalData};
}

/**
 * Load data necessary for rendering content above the fold. This is the critical data
 * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.
 */
async function loadCriticalData({context}: LoaderFunctionArgs) {
  const [{collections}] = await Promise.all([
    context.storefront.query(FEATURED_COLLECTION_QUERY),
    // Add other queries here, so that they are loaded in parallel
  ]);

  return {
    featuredCollection: collections.nodes[0],
  };
}

/**
 * Load data for rendering content below the fold. This data is deferred and will be
 * fetched after the initial page load. If it's unavailable, the page should still 200.
 * Make sure to not throw any errors here, as it will cause the page to 500.
 */
function loadDeferredData({context}: LoaderFunctionArgs) {
  const recommendedProducts = context.storefront
    .query(RECOMMENDED_PRODUCTS_QUERY)
    .catch((error) => {
      // Log query errors, but don't throw them so the page can still render
      console.error(error);
      return null;
    });

  return {
    recommendedProducts,
  };
}

export default function Homepage() {
  const data = useLoaderData<typeof loader>();
  return (
    <>
    <Hero />
    <TraditionalVideo />
    <TraditionalConcept />
    <div className="home">
      <RecommendedProducts products={data.recommendedProducts} />
      <RecommendedProducts products={data.recommendedProducts} />
      <RecommendedProducts products={data.recommendedProducts} />
      <RecommendedProducts products={data.recommendedProducts} />
      <RecommendedProducts products={data.recommendedProducts} />
    </div>
    </>
  );
}

function FeaturedCollection({
  collection,
}: {
  collection: FeaturedCollectionFragment;
}) {
  if (!collection) return null;
  const image = collection?.image;
  return (
    <Link
      className="featured-collection"
      to={`/collections/${collection.handle}`}
    >
      {image && (
        <div className="featured-collection-image">
          <Image data={image} sizes="100vw" />
        </div>
      )}
      <h1>{collection.title}</h1>
    </Link>
  );
}

function RecommendedProducts({
  products,
}: {
  products: Promise<RecommendedProductsQuery | null>;
}) {
  return (
    <div className="recommended-products">
      <GradientHeading level={2} variant="cyber" className="text-4xl font-bold text-center mb-5 underline font-oxanium">
        Recommended Products II
      </GradientHeading>
      <Suspense fallback={<div>Loading...</div>}>
        <Await resolve={products}>
          {(response) => (
            <div className="recommended-products-grid">
              {response
                ? response.products.nodes.map((product) => (
                    <ProductItem key={product.id} product={product} />
                  ))
                : null}
            </div>
          )}
        </Await>
      </Suspense>
      <br />
    </div>
  );
}

const FEATURED_COLLECTION_QUERY = `#graphql
  fragment FeaturedCollection on Collection {
    id
    title
    image {
      id
      url
      altText
      width
      height
    }
    handle
  }
  query FeaturedCollection($country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    collections(first: 1, sortKey: UPDATED_AT, reverse: true) {
      nodes {
        ...FeaturedCollection
      }
    }
  }
` as const;

const RECOMMENDED_PRODUCTS_QUERY = `#graphql
  fragment RecommendedProduct on Product {
    id
    title
    handle
    priceRange {
      minVariantPrice {
        amount
        currencyCode
      }
    }
    featuredImage {
      id
      url
      altText
      width
      height
    }
  }
  query RecommendedProducts ($country: CountryCode, $language: LanguageCode)
    @inContext(country: $country, language: $language) {
    products(first: 4, sortKey: UPDATED_AT, reverse: true) {
      nodes {
        ...RecommendedProduct
      }
    }
  }
` as const;
</file>

<file path="app/styles/app.css">
@import './fonts.css';

/* Dark Theme Base */


/* Matrix Navigation Styles */
.matrix-active {
  position: relative;
}

.matrix-active .matrix-active-indicator {
  opacity: 1;
}

/* Cyberpunk Scrollbar Styles */
.cyberpunk-scrollbar {
  scrollbar-width: thin;
  scrollbar-color: #333333 rgba(0, 0, 0, 0.2);
}

.cyberpunk-scrollbar::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

.cyberpunk-scrollbar::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(5px);
}

.cyberpunk-scrollbar::-webkit-scrollbar-thumb {
  background: linear-gradient(
    to bottom,
    #333333,
    #444444
  );
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
  clip-path: polygon(
    0 5px,
    5px 0,
    100% 0,
    100% calc(100% - 5px),
    calc(100% - 5px) 100%,
    0 100%
  );
}

.cyberpunk-scrollbar::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(
    to bottom,
    #444444,
    #555555
  );
  box-shadow: 0 0 15px rgba(255, 255, 255, 0.15);
}

/* Mobile menu clip path */
.clip-path-active {
  clip-path: polygon(0 0, calc(100% - 15px) 0, 100% 15px, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%);
}

/* Glitch effect animation */
@keyframes glitch {
  0% {
    transform: translate(0);
  }
  20% {
    transform: translate(-2px, 2px);
  }
  40% {
    transform: translate(-2px, -2px);
  }
  60% {
    transform: translate(2px, 2px);
  }
  80% {
    transform: translate(2px, -2px);
  }
  100% {
    transform: translate(0);
  }
}

.group:hover .relative {
  animation: glitch 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
}

/* Mobile menu styles */
@media (max-width: 768px) {
  .matrix-active::before {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(255, 255, 255, 0.1);
    clip-path: polygon(0 0, calc(100% - 15px) 0, 100% 15px, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%);
  }
}

:root {
  --aside-width: 400px;
  --cart-aside-summary-height-with-discount: 300px;
  --cart-aside-summary-height: 250px;
  --grid-item-width: 355px;
  --header-height: 136px; /* Fixed height: 32px announcement + 104px header */
  --announcement-height: 32px;
  --color-dark: #000;
  --color-light: #fff;
  --cart-summary-height: 280px;
}

/* Ensure main content doesn't get hidden behind fixed header */
/* Temporarily commented out for Hero testing */
/* main {
  padding-top: var(--header-height, 136px);
} */



/*
* --------------------------------------------------
* Non anchor links
* --------------------------------------------------
*/
.link:hover {
  text-decoration: underline;
  cursor: pointer;
  
}

/*
* --------------------------------------------------
* components/Aside
* --------------------------------------------------
*/
@media (max-width: 45em) {
  html:has(.overlay.expanded) {
    overflow: hidden;
  }
}

/* Base Aside Styles */
.overlay {
  visibility: hidden;
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(5px);
  z-index: 40;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
}

.overlay.expanded {
  visibility: visible;
  opacity: 1;
}

/* Mobile Menu Styles - positioning now handled in component */

[data-type="mobile-menu"] aside header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid rgb(38, 38, 38);
}

[data-type="mobile-menu"] aside header h3 {
  margin: 0;
}

[data-type="mobile-menu"] aside header .close {
  color: white;
  font-size: 1.5rem;
  padding: 0.5rem;
  cursor: pointer;
  transition: color 0.2s ease-in-out;
  z-index: 2;
}

[data-type="mobile-menu"] aside header .close:hover {
  color: rgb(163, 163, 163);
}

[data-type="mobile-menu"] aside main {
  flex: 1;
  overflow-y: auto;
  padding: 1.5rem;
}

/* Desktop Navigation Styles */
@media (min-width: 1024px) {
  nav[role="navigation"] a::before {
    display: none !important;
  }
}

/* Other Aside Types (Cart, Search, etc.) - positioning now handled in component */

[data-type="cart"] aside header,
[data-type="search"] aside header {
  align-items: center;
  border-bottom: 1px solid var(--color-dark);
  display: flex;
  height: var(--header-height);
  justify-content: space-between;
  padding: 0 20px;
}

.close-outside {
  position: fixed;
  inset: 0;
  background: transparent;
  border: none;
  width: 100%;
  height: 100%;
  cursor: default;
}

button.reset {
  border: 0;
  background: inherit;
  font-size: inherit;
}

button.reset > * {
  margin: 0;
}

button.reset:not(:has(> *)) {
  height: 1.5rem;
  line-height: 1.5rem;
}

button.reset:hover:not(:has(> *)) {
  text-decoration: underline;
  cursor: pointer;
}

/*
* --------------------------------------------------
* components/Header
* --------------------------------------------------
*/
.header {
  align-items: center;
  background: #fff;
  display: flex;
  height: var(--header-height);
  padding: 0 1rem;
  position: sticky;
  top: 0;
  z-index: 1;
}

.header-menu-mobile-toggle {
  @media (min-width: 48em) {
    display: none;
  }
}

.header-menu-mobile {
  display: flex;
  flex-direction: column;
  grid-gap: 1rem;
}

.header-menu-desktop {
  display: none;
  grid-gap: 1rem;
  @media (min-width: 45em) {
    display: flex;
    grid-gap: 1rem;
    margin-left: 3rem;
  }
}

.header-menu-item {
  cursor: pointer;
}

.header-ctas {
  align-items: center;
  display: flex;
  grid-gap: 1rem;
  margin-left: auto;
}

.header-ctas > * {
  min-width: fit-content;
}

.header-icon-button {
  position: relative;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.header-icon-button svg {
  width: 24px;
  height: 24px;
  transition: color 0.3s ease;
}

.header-icon-button:hover svg {
  color: rgba(255, 255, 255, 0.7);
}

/*
* --------------------------------------------------
* components/Footer
* --------------------------------------------------
*/
.footer {
  background: var(--color-dark);
  margin-top: auto;
}

.footer-menu {
  justify-content: center;
  display: flex;
  flex-wrap: wrap;
  grid-gap: 1rem;
  padding: 1rem;
}

.footer-menu a {
  color: var(--color-light);
  min-width: fit-content;
}

/*
* --------------------------------------------------
* components/Cart
* --------------------------------------------------
*/
.cart-main {
  height: 100%;
  max-height: calc(100vh - var(--cart-aside-summary-height));
  overflow-y: auto;
  width: auto;
  color: white;
  padding: 1rem;
  padding-bottom: calc(var(--cart-summary-height) + 2rem);
}

.cart-main.with-discount {
  padding-bottom: calc(var(--cart-summary-height) + 4rem);
}

.cart-line {
  display: flex;
  padding: 1rem 0;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.cart-line:last-child {
  border-bottom: none;
}

.cart-line img {
  height: 100px;
  width: 100px;
  display: block;
  margin-right: 1rem;
  object-fit: cover;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
}

.cart-line-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.cart-line-content a {
  color: white;
  text-decoration: none;
}

.cart-line-content a:hover {
  color: rgba(255, 255, 255, 0.8);
}

.cart-line-content strong {
  font-family: 'Oxanium', sans-serif;
  font-size: 1.1rem;
}

.cart-line-content small {
  color: rgba(255, 255, 255, 0.7);
}

.cart-line-quantity {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 1rem;
}

.cart-line-quantity button {
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: white;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.cart-line-quantity button:hover:not(:disabled) {
  background: rgba(255, 255, 255, 0.1);
}

.cart-line-quantity button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.cart-summary-aside {
  background: black;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  bottom: 0;
  left: 0;
  right: 0;
  padding: 1.5rem;
  position: fixed;
  width: 100%;
  color: white;
  height: var(--cart-summary-height);
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  z-index: 10;
}

.cart-summary-content {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.cart-summary-aside h4 {
  font-family: 'Oxanium', sans-serif;
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

.cart-subtotal {
  display: flex;
  justify-content: space-between;
  font-size: 1.1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.cart-discount-form {
  display: flex;
  gap: 0.5rem;
  margin-top: 0.5rem;
}

.cart-discount-form input {
  flex: 1;
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: white;
  padding: 0.5rem 1rem;
  font-family: 'Oxanium', sans-serif;
  
}

.cart-discount-form input::placeholder {
  color: rgba(255, 255, 255, 0.5);
}

.cart-discount-form button {
  
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: white;
  padding: 0.5rem 1.5rem;
  font-family: 'Oxanium', sans-serif;
  text-transform: uppercase;
  cursor: pointer;
  transition: all 0.3s ease;
  
  position: relative;
  overflow: hidden;
}



.cart-discount-form button > * {
  position: relative;
  z-index: 1;
  transition: color 0.3s ease;
}

.cart-discount-form button:hover > * {
  color: black !important;
}
.cart-discount-form button:hover {
  background: #333333;
  color: white;
  transition: all 0.3s ease-in-out;
}


.cart-checkout-button {
  width: 100%;
  background: #333333;
  color: white;
  padding: 1rem;
  text-align: center;
  text-transform: uppercase;
  font-family: 'Oxanium', sans-serif;
  font-weight: bold;
  cursor: pointer;
  text-decoration: none;
  display: block;
  margin-top: auto;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  position: relative;
  overflow: hidden;
 
}
.cart-checkout-button::after {
  content: '';
  position: absolute;
  top: 2px;
  left: 2px;
  right: 2px;
  bottom: 2px;
  background: #333333;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  z-index: 1;
}

 /* Fill animation layer */
 .cart-checkout-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: white;
  clip-path: polygon(15px 0, 100% 0, 100% calc(100% - 15px), calc(100% - 15px) 100%, 0 100%, 0 15px);
  transform: translateX(-100%);
  transition: transform 0.4s ease;
  z-index: 2;
}

.cart-checkout-button span {
  position: relative;
  z-index: 3;
  transition: all 0.4s ease;
}

.cart-checkout-button:hover::before {
  transform: translateX(0);
}

.cart-checkout-button:hover span {
  color: black;
  
}



/*
* --------------------------------------------------
* components/Search
* --------------------------------------------------
*/
.predictive-search {
  height: calc(100vh - var(--header-height) - 40px);
  overflow-y: auto;
}

.predictive-search-form {
  background: var(--color-light);
  position: sticky;
  top: 0;
}

.predictive-search-result {
  margin-bottom: 2rem;
}

.predictive-search-result h5 {
  text-transform: uppercase;
}

.predictive-search-result-item {
  margin-bottom: 0.5rem;
}

.predictive-search-result-item a {
  align-items: center;
  display: flex;
}

.predictive-search-result-item a img {
  margin-right: 0.75rem;
  height: 100%;
}

.search-result {
  margin-bottom: 1.5rem;
}

.search-results-item {
  margin-bottom: 0.5rem;
}

.search-results-item a {
  display: flex;
  flex: row;
  align-items: center;
  gap: 1rem;
}

/*
* --------------------------------------------------
* routes/__index
* --------------------------------------------------
*/
.featured-collection {
  display: block;
  margin-bottom: 2rem;
  position: relative;
}

.featured-collection-image {
  aspect-ratio: 1 / 1;
  @media (min-width: 45em) {
    aspect-ratio: 16 / 9;
  }
}

.featured-collection img {
  height: auto;
  max-height: 100%;
  object-fit: cover;
}

.recommended-products-grid {
  display: grid;
  grid-gap: 1.5rem;
  grid-template-columns: repeat(2, 1fr);
  @media (min-width: 45em) {
    grid-template-columns: repeat(4, 1fr);
  }
}

.recommended-product img {
  height: auto;
}

/*
* --------------------------------------------------
* routes/collections._index.tsx
* --------------------------------------------------
*/
.collections-grid {
  display: grid;
  grid-gap: 1.5rem;
  grid-template-columns: repeat(auto-fit, minmax(var(--grid-item-width), 1fr));
  margin-bottom: 2rem;
}

.collection-item img {
  height: auto;
}

/*
* --------------------------------------------------
* routes/collections.$handle.tsx
* --------------------------------------------------
*/
.collection-description {
  margin-bottom: 1rem;
  max-width: 95%;
  @media (min-width: 45em) {
    max-width: 600px;
  }
}

.products-grid {
  display: grid;
  grid-gap: 1.5rem;
  grid-template-columns: repeat(auto-fit, minmax(var(--grid-item-width), 1fr));
  margin-bottom: 2rem;
}

.product-item img {
  height: auto;
  width: 100%;
}

/*
* --------------------------------------------------
* routes/products.$handle.tsx
* --------------------------------------------------
*/
.product {
  display: grid;
  @media (min-width: 45em) {
    grid-template-columns: 1fr 1fr;
    grid-gap: 4rem;
  }
}

.product h1 {
  margin-top: 0;
}

.product-image img {
  height: auto;
  width: 100%;
}

.product-main {
  align-self: start;
  position: sticky;
  top: 6rem;
}

.product-price-on-sale {
  display: flex;
  grid-gap: 0.5rem;
}

.product-price-on-sale s {
  opacity: 0.5;
}

.product-options-grid {
  display: flex;
  flex-wrap: wrap;
  grid-gap: 0.75rem;
}

.product-options-item,
.product-options-item:disabled {
  padding: 0.25rem 0.5rem;
  background-color: transparent;
  font-size: 1rem;
  font-family: inherit;
}

.product-option-label-swatch {
  width: 1.25rem;
  height: 1.25rem;
  margin: 0.25rem 0;
}

.product-option-label-swatch img {
  width: 100%;
}

/*
* --------------------------------------------------
* routes/blog._index.tsx
* --------------------------------------------------
*/
.blog-grid {
  display: grid;
  grid-gap: 1.5rem;
  grid-template-columns: repeat(auto-fit, minmax(var(--grid-item-width), 1fr));
  margin-bottom: 2rem;
}

.blog-article-image {
  aspect-ratio: 3/2;
  display: block;
}

.blog-article-image img {
  height: 100%;
}

/*
* --------------------------------------------------
* routes/blog.$articlehandle.tsx
* --------------------------------------------------
*/
.article img {
  height: auto;
  width: 100%;
}

/*
* --------------------------------------------------
* routes/account
* --------------------------------------------------
*/

.account-logout {
  display: inline-block;
}

.clip-path-aside {
  clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
  border: 0.5px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 0 20px rgba(255, 255, 255, 0.1),
    inset 0 0 20px rgba(255, 255, 255, 0.1);
}

h1, h2, h3, h4, h5, h6, p, small, button, input, textarea, select, label {
  font-family: 'Oxanium', sans-serif;
}
</file>

</files>
